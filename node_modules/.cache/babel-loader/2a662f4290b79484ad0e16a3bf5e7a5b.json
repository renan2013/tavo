{"remainingRequest":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js!D:\\proyetos2020vue\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\proyetos2020vue\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\proyetos2020vue\\TAVOCR\\src\\views\\apps\\chat\\Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\proyetos2020vue\\TAVOCR\\src\\views\\apps\\chat\\Chat.vue","mtime":1602974933315},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport { mapActions } from \"vuex\";\nimport ChatContact from \"./ChatContact.vue\";\nimport ChatLog from \"./ChatLog.vue\";\nimport ChatNavbar from \"./ChatNavbar.vue\";\nimport UserProfile from \"./UserProfile.vue\";\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nimport moduleChat from '@/store/chat/moduleChat.js';\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\"; //import io from 'socket.io-client';\n\nexport default {\n  created: function created() {\n    var datos = {\n      NumEmpresa: this.getProfile[0].Empresa,\n      userid: this.getProfile[0].num_user\n    }; // contactos  \n\n    this.getfetContacts(datos);\n    this.getChatContacts(datos);\n    this.setSidebarWidth();\n  },\n  mounted: function mounted() {\n    try {\n      this.$socket.connect();\n      this.$store.commit('chat/MUTCHATCONNECT', 'No Conectado sus Mensajes No seran Entregados');\n      var payload = {\n        'NumEmpresa': this.getProfile[0].Empresa,\n        'username': this.getProfile[0].Username,\n        'id': this.getProfile[0].num_user,\n        'msg': this.mensajeConectado\n      };\n      this.$socket.emit('TEST_CONNECTION', payload, function (response) {\n        console.log(\"se disparo el   collback de Conectado \", response);\n      });\n    } catch (error) {\n      console.log(\"en Chat.vue  en mounted catch\" + error);\n    }\n\n    this.typedMessage = '';\n  },\n  data: function data() {\n    return {\n      tokenChat: \"\",\n      colorConectado: \"text-danger\",\n      mensajeConectado: 'Listo* Puede Chatear',\n      chatMsg: {\n        msg: 1\n      },\n      messages: [],\n      active: true,\n      isHidden: false,\n      searchContact: '',\n      activeProfileSidebar: false,\n      activeChatUser: true,\n      userProfileId: -1,\n      typedMessage: '',\n      isChatPinned: false,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.70\n      },\n      clickNotClose: true,\n      isChatSidebarActive: true,\n      isLoggedInUserProfileView: false\n    };\n  },\n  watch: {\n    getChatconnect: function getChatconnect() {\n      if (this.getChatconnect == this.mensajeConectado) this.colorConectado = \"text-success\";\n    },\n    chatMsg: function chatMsg() {\n      alert(\"cambio \");\n      console.log(\"mensaje\", this.chatMsg);\n      this.setMessage(this.chatMsg);\n    },\n    windowWidth: function windowWidth() {\n      this.setSidebarWidth();\n    },\n    getProfile: function getProfile() {\n      console.log(\"cambio el profile CHAT LINEA 167 APROX\"); //  alert(\"profile cambio \");\n    }\n  },\n  computed: {\n    getChatconnect: function getChatconnect() {\n      return this.$store.state.chat.chatconnect;\n    },\n    getRecargar: function getRecargar() {\n      return this.$store.state.recargar;\n    },\n    getAppActiveUser: function getAppActiveUser() {\n      return this.$store.state.AppActiveUser;\n    },\n    getchats: function getchats() {\n      return this.$store.state.chat.chats;\n    },\n    getProfile: function getProfile() {\n      return this.$store.state.dsoaLogin.profile;\n    },\n    // COMPONENTE DIVISOFT CHAT\n    getTokenChat: function getTokenChat() {\n      return this.$store.state.dsoaLogin.token;\n    },\n    chatLastMessaged: function chatLastMessaged() {\n      var _this = this;\n\n      return function (userId) {\n        return _this.$store.getters['chat/chatLastMessaged'](userId);\n      };\n    },\n    chatUnseenMessages: function chatUnseenMessages() {\n      var _this2 = this;\n\n      return function (userId) {\n        var unseenMsg = _this2.$store.getters['chat/chatUnseenMessages'](userId);\n\n        if (unseenMsg) return unseenMsg;\n      };\n    },\n    activeUser: function activeUser() {\n      return this.$store.state.AppActiveUser;\n    },\n    getStatusColor: function getStatusColor() {\n      var _this3 = this;\n\n      return function (isActiveUser) {\n        var userStatus = _this3.getUserStatus(isActiveUser);\n\n        if (userStatus === 'online') {\n          return 'success';\n        } else if (userStatus === 'do not disturb') {\n          return 'danger';\n        } else if (userStatus === 'away') {\n          return 'warning';\n        } else {\n          return 'grey';\n        }\n      };\n    },\n    chatContacts: function chatContacts() {\n      return this.$store.getters['chat/chatContacts'];\n    },\n    contacts: function contacts() {\n      return this.$store.getters['chat/contacts'];\n    },\n    searchQuery: {\n      get: function get() {\n        if (this.$store.state.chat.chatSearchQuery) return this.$store.state.chat.chatSearchQuery;else return \"\";\n      },\n      set: function set(val) {\n        this.$store.dispatch('chat/setChatSearchQuery', val);\n      }\n    },\n    scrollbarTag: function scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    isActiveChatUser: function isActiveChatUser() {\n      var _this4 = this;\n\n      return function (userId) {\n        return userId === _this4.activeChatUser;\n      };\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    recarga: function recarga() {\n      this.$router.go(this.$router.currentRoute);\n    },\n    getUserStatus: function getUserStatus(isActiveUser) {\n      // return \"active\"\n      return isActiveUser ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status;\n    },\n    closeProfileSidebar: function closeProfileSidebar(value) {\n      this.activeProfileSidebar = value;\n    },\n    updateActiveChatUser: function updateActiveChatUser(contactId) {\n      this.activeChatUser = contactId;\n      var datos = {\n        NumEmpresa: this.getProfile[0].Empresa,\n        userid: this.getProfile[0].num_user,\n        userSend: contactId\n      };\n      this.getfetChats(datos);\n\n      if (this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\n        this.$store.dispatch('chat/markSeenAllMessages', contactId);\n      }\n\n      var chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser);\n      if (chatData) this.isChatPinned = chatData.isPinned;else this.isChatPinned = false;\n      this.toggleChatSidebar();\n      this.typedMessage = '';\n    },\n    showProfileSidebar: function showProfileSidebar(userId) {\n      var openOnLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.userProfileId = userId;\n      this.isLoggedInUserProfileView = openOnLeft;\n      this.activeProfileSidebar = !this.activeProfileSidebar;\n    },\n    sendMsg: function sendMsg() {\n      //alert(\"divisoft envieando MENSAJE\");\n      if (!this.typedMessage) return;\n      if (!this.activeChatUser) return;\n      var payload = {\n        'NumEmpresa': this.getProfile[0].Empresa,\n        'isPinned': this.isChatPinned,\n        'username': this.getProfile[0].Username,\n        'sendusernum': this.getProfile[0].num_user,\n        'msg': {\n          'textContent': this.typedMessage,\n          'time': String(new Date()),\n          'isSent': true,\n          'isSeen': false\n        },\n        'id': this.activeChatUser\n      }; //ADEMAR VER SI HAY COMUNICACION \n\n      console.log(\"enviando \", JSON.stringify(payload));\n      this.typedMessage = ''; // se lo manda al destinatrio \n\n      this.$socket.emit('SEND_MESSAGE', payload, function (response) {\n        console.log(\"se disparo el  collback\", response);\n      }); // lo refresca en nuestro chat\n\n      this.$store.dispatch('chat/SENDCHATMESSAGE', payload);\n      var scroll_el = this.$refs.chatLogPS.$el || this.$refs.chatLogPS;\n      scroll_el.scrollTop = this.$refs.chatLog.scrollHeight;\n    },\n    setMessage: function setMessage(data) {\n      this.$store.commit(\"chat/SEND_CHAT_MESSAGE\", data);\n    },\n    toggleIsChatPinned: function toggleIsChatPinned(value) {\n      this.isChatPinned = value;\n    },\n    setSidebarWidth: function setSidebarWidth() {\n      if (this.windowWidth < 1200) {\n        this.isChatSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isChatSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleChatSidebar: function toggleChatSidebar() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!value && this.clickNotClose) return;\n      this.isChatSidebarActive = value;\n    },\n    getfetContacts: function getfetContacts(datos) {\n      this.$store.dispatch('chat/fetchContacts', datos);\n      return 1;\n    },\n    getfetChats: function getfetChats(datos) {\n      this.$store.dispatch('chat/fetchChats', datos);\n      return 1;\n    },\n    getChatContacts: function getChatContacts(datos) {\n      this.$store.dispatch('chat/fetchChatContacts', datos);\n      return 1;\n    }\n  },\n  components: {\n    VuePerfectScrollbar: VuePerfectScrollbar,\n    ChatContact: ChatContact,\n    UserProfile: UserProfile,\n    ChatNavbar: ChatNavbar,\n    ChatLog: ChatLog\n  }\n  /* beforeDestroy() {\n       this.$store.unregisterModule('chat')\n   }*/\n\n};",{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkHA,OAAA,GAAA,MAAA,KAAA;AACA,SACA,UADA,QAEA,MAFA;AAIA,OAAA,WAAA;AACA,OAAA,OAAA;AACA,OAAA,UAAA;AACA,OAAA,WAAA;AACA,OAAA,mBAAA,MAAA,uBAAA;AACA,OAAA,UAAA,MAAA,4BAAA;AACA,OAAA,KAAA,OAAA,MAAA,kCAAA,C,CAEA;;AACA,eAAA;AAEA,EAAA,OAFA,qBAEA;AAEA,QAAA,KAAA,GAAA;AACA,MAAA,UAAA,EAAA,KAAA,UAAA,CAAA,CAAA,EAAA,OADA;AAEA,MAAA,MAAA,EAAA,KAAA,UAAA,CAAA,CAAA,EAAA;AAFA,KAAA,CAFA,CAMA;;AACA,SAAA,cAAA,CAAA,KAAA;AACA,SAAA,eAAA,CAAA,KAAA;AACA,SAAA,eAAA;AAEA,GAbA;AAeA,EAAA,OAfA,qBAeA;AACA,QAAA;AACA,WAAA,OAAA,CAAA,OAAA;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,qBAAA,EAAA,+CAAA;AAEA,UAAA,OAAA,GAAA;AACA,sBAAA,KAAA,UAAA,CAAA,CAAA,EAAA,OADA;AAEA,oBAAA,KAAA,UAAA,CAAA,CAAA,EAAA,QAFA;AAGA,cAAA,KAAA,UAAA,CAAA,CAAA,EAAA,QAHA;AAIA,eAAA,KAAA;AAJA,OAAA;AASA,WAAA,OAAA,CAAA,IAAA,CAAA,iBAAA,EAAA,OAAA,EACA,UAAA,QAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,wCAAA,EAAA,QAAA;AAEA,OAJA;AAQA,KArBA,CAqBA,OAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kCAAA,KAAA;AACA;;AACA,SAAA,YAAA,GAAA,EAAA;AAEA,GA1CA;AA4CA,EAAA,IA5CA,kBA4CA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,EADA;AAEA,MAAA,cAAA,EAAA,aAFA;AAGA,MAAA,gBAAA,EAAA,sBAHA;AAMA,MAAA,OAAA,EAAA;AACA,QAAA,GAAA,EAAA;AADA,OANA;AASA,MAAA,QAAA,EAAA,EATA;AAUA,MAAA,MAAA,EAAA,IAVA;AAWA,MAAA,QAAA,EAAA,KAXA;AAYA,MAAA,aAAA,EAAA,EAZA;AAaA,MAAA,oBAAA,EAAA,KAbA;AAcA,MAAA,cAAA,EAAA,IAdA;AAeA,MAAA,aAAA,EAAA,CAAA,CAfA;AAgBA,MAAA,YAAA,EAAA,EAhBA;AAiBA,MAAA,YAAA,EAAA,KAjBA;AAkBA,MAAA,QAAA,EAAA;AACA,QAAA,kBAAA,EAAA,EADA;AAEA,QAAA,UAAA,EAAA;AAFA,OAlBA;AAsBA,MAAA,aAAA,EAAA,IAtBA;AAuBA,MAAA,mBAAA,EAAA,IAvBA;AAwBA,MAAA,yBAAA,EAAA;AAxBA,KAAA;AA0BA,GAvEA;AAwEA,EAAA,KAAA,EAAA;AACA,IAAA,cADA,4BACA;AACA,UAAA,KAAA,cAAA,IAAA,KAAA,gBAAA,EACA,KAAA,cAAA,GAAA,cAAA;AACA,KAJA;AAKA,IAAA,OALA,qBAKA;AACA,MAAA,KAAA,CAAA,SAAA,CAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,SAAA,EAAA,KAAA,OAAA;AACA,WAAA,UAAA,CAAA,KAAA,OAAA;AACA,KATA;AAWA,IAAA,WAXA,yBAWA;AACA,WAAA,eAAA;AACA,KAbA;AAcA,IAAA,UAdA,wBAcA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,wCAAA,EADA,CAEA;AACA;AAjBA,GAxEA;AA2FA,EAAA,QAAA,EAAA;AACA,IAAA,cADA,4BACA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,WAAA;AACA,KAHA;AAIA,IAAA,WAJA,yBAIA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,QAAA;AACA,KANA;AAOA,IAAA,gBAPA,8BAOA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,aAAA;AACA,KATA;AAUA,IAAA,QAVA,sBAUA;AAEA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA;AACA,KAbA;AAcA,IAAA,UAdA,wBAcA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,OAAA;AACA,KAhBA;AAiBA;AACA,IAAA,YAlBA,0BAkBA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,SAAA,CAAA,KAAA;AAEA,KArBA;AAuBA,IAAA,gBAvBA,8BAuBA;AAAA;;AACA,aAAA,UAAA,MAAA;AAAA,eAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,uBAAA,EAAA,MAAA,CAAA;AAAA,OAAA;AACA,KAzBA;AA0BA,IAAA,kBA1BA,gCA0BA;AAAA;;AACA,aAAA,UAAA,MAAA,EAAA;AACA,YAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;;AACA,YAAA,SAAA,EAAA,OAAA,SAAA;AACA,OAHA;AAIA,KA/BA;AAgCA,IAAA,UAhCA,wBAgCA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,aAAA;AACA,KAlCA;AAmCA,IAAA,cAnCA,4BAmCA;AAAA;;AACA,aAAA,UAAA,YAAA,EAAA;AACA,YAAA,UAAA,GAAA,MAAA,CAAA,aAAA,CAAA,YAAA,CAAA;;AAEA,YAAA,UAAA,KAAA,QAAA,EAAA;AACA,iBAAA,SAAA;AACA,SAFA,MAEA,IAAA,UAAA,KAAA,gBAAA,EAAA;AACA,iBAAA,QAAA;AACA,SAFA,MAEA,IAAA,UAAA,KAAA,MAAA,EAAA;AACA,iBAAA,SAAA;AACA,SAFA,MAEA;AACA,iBAAA,MAAA;AACA;AACA,OAZA;AAaA,KAjDA;AAkDA,IAAA,YAlDA,0BAkDA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,mBAAA,CAAA;AACA,KApDA;AAqDA,IAAA,QArDA,sBAqDA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,eAAA,CAAA;AACA,KAvDA;AAyDA,IAAA,WAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,YAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,eAAA,EACA,OAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,eAAA,CADA,KAGA,OAAA,EAAA;AACA,OANA;AAOA,MAAA,GAPA,eAOA,GAPA,EAOA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,yBAAA,EAAA,GAAA;AACA;AATA,KAzDA;AAoEA,IAAA,YApEA,0BAoEA;AACA,aAAA,KAAA,MAAA,CAAA,OAAA,CAAA,YAAA;AACA,KAtEA;AAuEA,IAAA,gBAvEA,8BAuEA;AAAA;;AAEA,aAAA,UAAA,MAAA;AAAA,eAAA,MAAA,KAAA,MAAA,CAAA,cAAA;AAAA,OAAA;AACA,KA1EA;AA2EA,IAAA,WA3EA,yBA2EA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,WAAA;AACA;AA7EA,GA3FA;AA0KA,EAAA,OAAA,EAAA;AACA,IAAA,OADA,qBAEA;AACA,WAAA,OAAA,CAAA,EAAA,CAAA,KAAA,OAAA,CAAA,YAAA;AACA,KAJA;AAKA,IAAA,aALA,yBAKA,YALA,EAKA;AACA;AACA,aAAA,YAAA,GAAA,KAAA,MAAA,CAAA,KAAA,CAAA,aAAA,CAAA,MAAA,GAAA,KAAA,QAAA,CAAA,KAAA,cAAA,EAAA,MAAA;AACA,KARA;AASA,IAAA,mBATA,+BASA,KATA,EASA;AACA,WAAA,oBAAA,GAAA,KAAA;AACA,KAXA;AAaA,IAAA,oBAbA,gCAaA,SAbA,EAaA;AACA,WAAA,cAAA,GAAA,SAAA;AAEA,UAAA,KAAA,GAAA;AACA,QAAA,UAAA,EAAA,KAAA,UAAA,CAAA,CAAA,EAAA,OADA;AAEA,QAAA,MAAA,EAAA,KAAA,UAAA,CAAA,CAAA,EAAA,QAFA;AAGA,QAAA,QAAA,EAAA;AAHA,OAAA;AAMA,WAAA,WAAA,CAAA,KAAA;;AAEA,UAAA,KAAA,MAAA,CAAA,OAAA,CAAA,qBAAA,EAAA,KAAA,cAAA,CAAA,EAAA;AACA,aAAA,MAAA,CAAA,QAAA,CAAA,0BAAA,EAAA,SAAA;AACA;;AACA,UAAA,QAAA,GAAA,KAAA,MAAA,CAAA,OAAA,CAAA,qBAAA,EAAA,KAAA,cAAA,CAAA;AACA,UAAA,QAAA,EAAA,KAAA,YAAA,GAAA,QAAA,CAAA,QAAA,CAAA,KACA,KAAA,YAAA,GAAA,KAAA;AACA,WAAA,iBAAA;AACA,WAAA,YAAA,GAAA,EAAA;AAEA,KAjCA;AAkCA,IAAA,kBAlCA,8BAkCA,MAlCA,EAkCA;AAAA,UAAA,UAAA,uEAAA,KAAA;AACA,WAAA,aAAA,GAAA,MAAA;AACA,WAAA,yBAAA,GAAA,UAAA;AACA,WAAA,oBAAA,GAAA,CAAA,KAAA,oBAAA;AACA,KAtCA;AAwCA,IAAA,OAxCA,qBAwCA;AACA;AACA,UAAA,CAAA,KAAA,YAAA,EAAA;AACA,UAAA,CAAA,KAAA,cAAA,EAAA;AAEA,UAAA,OAAA,GAAA;AACA,sBAAA,KAAA,UAAA,CAAA,CAAA,EAAA,OADA;AAEA,oBAAA,KAAA,YAFA;AAGA,oBAAA,KAAA,UAAA,CAAA,CAAA,EAAA,QAHA;AAIA,uBAAA,KAAA,UAAA,CAAA,CAAA,EAAA,QAJA;AAMA,eAAA;AACA,yBAAA,KAAA,YADA;AAEA,kBAAA,MAAA,CAAA,IAAA,IAAA,EAAA,CAFA;AAGA,oBAAA,IAHA;AAIA,oBAAA;AAJA,SANA;AAYA,cAAA,KAAA;AAZA,OAAA,CALA,CAmBA;;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA;AAEA,WAAA,YAAA,GAAA,EAAA,CAtBA,CAwBA;;AAEA,WAAA,OAAA,CAAA,IAAA,CAAA,cAAA,EAAA,OAAA,EACA,UAAA,QAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,yBAAA,EAAA,QAAA;AACA,OAHA,EA1BA,CA+BA;;AAEA,WAAA,MAAA,CAAA,QAAA,CAAA,sBAAA,EAAA,OAAA;AAEA,UAAA,SAAA,GAAA,KAAA,KAAA,CAAA,SAAA,CAAA,GAAA,IAAA,KAAA,KAAA,CAAA,SAAA;AACA,MAAA,SAAA,CAAA,SAAA,GAAA,KAAA,KAAA,CAAA,OAAA,CAAA,YAAA;AAEA,KA9EA;AAgFA,IAAA,UAhFA,sBAgFA,IAhFA,EAgFA;AAEA,WAAA,MAAA,CAAA,MAAA,CAAA,wBAAA,EAAA,IAAA;AACA,KAnFA;AAqFA,IAAA,kBArFA,8BAqFA,KArFA,EAqFA;AACA,WAAA,YAAA,GAAA,KAAA;AACA,KAvFA;AAwFA,IAAA,eAxFA,6BAwFA;AACA,UAAA,KAAA,WAAA,GAAA,IAAA,EAAA;AACA,aAAA,mBAAA,GAAA,KAAA,aAAA,GAAA,KAAA;AACA,OAFA,MAEA;AACA,aAAA,mBAAA,GAAA,KAAA,aAAA,GAAA,IAAA;AACA;AACA,KA9FA;AA+FA,IAAA,iBA/FA,+BA+FA;AAAA,UAAA,KAAA,uEAAA,KAAA;AACA,UAAA,CAAA,KAAA,IAAA,KAAA,aAAA,EAAA;AACA,WAAA,mBAAA,GAAA,KAAA;AACA,KAlGA;AAoGA,IAAA,cApGA,0BAoGA,KApGA,EAoGA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,oBAAA,EAAA,KAAA;AACA,aAAA,CAAA;AACA,KAvGA;AAyGA,IAAA,WAzGA,uBAyGA,KAzGA,EAyGA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,KAAA;AACA,aAAA,CAAA;AACA,KA5GA;AA6GA,IAAA,eA7GA,2BA6GA,KA7GA,EA6GA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,wBAAA,EAAA,KAAA;AACA,aAAA,CAAA;AACA;AAhHA,GA1KA;AA6RA,EAAA,UAAA,EAAA;AACA,IAAA,mBAAA,EAAA,mBADA;AAEA,IAAA,WAAA,EAAA,WAFA;AAGA,IAAA,WAAA,EAAA,WAHA;AAIA,IAAA,UAAA,EAAA,UAJA;AAKA,IAAA,OAAA,EAAA;AALA;AAQA;;;;AArSA,CAAA","sourcesContent":["<!-- =========================================================================================\n    File Name: Chat.vue\n    Description: Chat Application - Stay connected\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<template>\n      <!-- USER PROFILE SIDEBAR -->\n\n<div  v-if=\"getTokenChat\"  id=\"chat-app\" class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\">\n       \n       <!-- TOKEN CHAT:{{getTokenChat}}-->\n\n    <vs-sidebar   class=\"items-no-padding\" parent=\"#chat-app\" :click-not-close=\"clickNotClose\" :hidden-background=\"clickNotClose\" v-model=\"isChatSidebarActive\" id=\"chat-list-sidebar\">\n\n   \n        <user-profile :active=\"activeProfileSidebar\" :userId=\"userProfileId\" class=\"user-profile-container\" :isLoggedInUser=\"isLoggedInUserProfileView\" @closeProfileSidebar=\"closeProfileSidebar\"></user-profile>\n\n        <div class=\"chat__profile-search flex p-4\">\n            <div class=\"relative inline-flex\">\n                <!--vs-avatar v-if=\"activeUser.photoURL\" class=\"m-0 border-2 border-solid border-white\" :src=\"activeUser.photoURL\" size=\"40px\" @click=\"showProfileSidebar(Number(activeUser.uid), true)\" /-->\n                <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute right-0 bottom-0\" :class=\"'bg-' + getStatusColor(true)\"></div>\n            </div>\n            <vs-input icon-no-border icon=\"icon-search\" icon-pack=\"feather\" class=\"w-full mx-5 input-rounded-full\" placeholder=\"Search or start a new chat\" v-model=\"searchQuery\" />\n\n            <feather-icon class=\"md:inline-flex lg:hidden -ml-3 cursor-pointer\" icon=\"XIcon\" @click=\"toggleChatSidebar(false)\" />\n        </div>\n\n        <vs-divider class=\"d-theme-border-grey-light m-0\" />\n\n        <component :is=\"scrollbarTag\" class=\"chat-scroll-area pt-4\" :settings=\"settings\" :key=\"$vs.rtl\">\n\n            <!-- ACTIVE CHATS LIST -->\n            TOKEN CHAT:{{getTokenChat}}\n            <p :class=\"colorConectado\">Estado del chat: {{getChatconnect}}</p>\n             \n            <div class=\"chat__chats-list mb-8\">\n                <h3 class=\"text-primary mb-5 px-4\">Chats Principal</h3>\n                <ul class=\"chat__active-chats bordered-items\">\n                    <li class=\"cursor-pointer\" v-for=\"(contact, index) in chatContacts\" :key=\"index\" @click=\"updateActiveChatUser(contact.uid)\">\n                        <chat-contact v-if=\"chatLastMessaged\" showLastMsg :contact=\"contact\" :lastMessaged=\"chatLastMessaged(contact.uid).time\" :unseenMsg=\"chatUnseenMessages(contact.uid)\" :isActiveChatUser=\"isActiveChatUser(contact.uid)\"></chat-contact>\n                    </li>\n                </ul>\n            </div>\n\n            <!-- CONTACTS LIST -->\n            CONTACTS LIST CHAT.VUE\n            <div class=\"chat__contacts\">\n                <h3 class=\"text-primary mb-5 px-4\">Contacts</h3>\n                <ul class=\"chat__contacts bordered-items\">\n                    <li class=\"cursor-pointer\" v-for=\"contact in contacts\" :key=\"contact.uid\" @click=\"updateActiveChatUser(contact.uid)\">\n                        <chat-contact :contact=\"contact\"></chat-contact>\n                    </li>\n                </ul>\n            </div>\n\n        </component>\n    </vs-sidebar>\n\n    <!-- RIGHT COLUMN -->\n    RIGHT COLUMN CHAT.VUE\n    <div class=\"chat__bg no-scroll-content chat-content-area border border-solid d-theme-border-grey-light border-t-0 border-r-0 border-b-0\" :class=\"{'sidebar-spacer--wide': clickNotClose, 'flex items-center justify-center': activeChatUser === null}\">\n\n        <template v-if=\"activeChatUser\">\n            <div class=\"chat__navbar\">\n\n                <chat-navbar :isSidebarCollapsed=\"!clickNotClose\" :user-id=\"activeChatUser\" :isPinnedProp=\"isChatPinned\" @openContactsSidebar=\"toggleChatSidebar(true)\" @showProfileSidebar=\"showProfileSidebar\" @toggleIsChatPinned=\"toggleIsChatPinned\"></chat-navbar>\n\n            </div>\n\n            <component :is=\"scrollbarTag\" class=\"chat-content-scroll-area border border-solid d-theme-border-grey-light\" :settings=\"settings\" ref=\"chatLogPS\" :key=\"$vs.rtl\">\n                <div class=\"chat__log\" ref=\"chatLog\">\n                    <chat-log :userId=\"activeChatUser\" v-if=\"activeChatUser\"></chat-log>\n                </div>\n            </component>\n\n            <div class=\"chat__input flex p-4 bg-white\">\n\n                <vs-input class=\"flex-1\" placeholder=\"Su Mensaje aqui\" v-model=\"typedMessage\" @keyup.enter=\"sendMsg\" />\n\n                <vs-button class=\"bg-primary-gradient ml-4\" type=\"filled\" @click=\"sendMsg\">Send</vs-button>\n\n            </div>\n\n        </template>\n\n        <template v-else>\n            <div class=\"flex flex-col items-center\">\n                <feather-icon icon=\"MessageSquareIcon\" class=\"mb-4 bg-white p-8 shadow-md rounded-full\" svgClasses=\"w-16 h-16\"></feather-icon>\n                <h4 class=\" py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\" @click.stop=\"toggleChatSidebar(true)\">Start Conversation</h4>\n            </div>\n        </template>\n    </div>\n</div>\n<div  v-else>\n <div class=\"flex flex-col items-center\">\n\n    conctado2: {{getChatconnect}}\n       </div>\n    <div class=\"flex flex-col items-center\">\n        TOKEN CHAT:{{getChatconnect}}\n                <feather-icon icon=\"MessageSquareIcon\" class=\"mb-4 bg-white p-8 shadow-md rounded-full\" svgClasses=\"w-16 h-16\"></feather-icon>\n                <h4 class=\" py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\" @click.stop=\"recarga()\">Start Conversation</h4>\n            </div>\n</div>\n\n\n\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport {\n    mapActions\n} from \"vuex\";\n\nimport ChatContact from './ChatContact.vue'\nimport ChatLog from './ChatLog.vue'\nimport ChatNavbar from './ChatNavbar.vue'\nimport UserProfile from './UserProfile.vue'\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport moduleChat from '@/store/chat/moduleChat.js'\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\";\n\n//import io from 'socket.io-client';\nexport default {\n\n    created() {\n\n        let datos = {\n            NumEmpresa: this.getProfile[0].Empresa,\n            userid: this.getProfile[0].num_user\n        }\n        // contactos  \n        this.getfetContacts(datos);\n        this.getChatContacts(datos);\n        this.setSidebarWidth()\n\n    },\n\n    mounted() { \n        try {\n            this.$socket.connect();    \n            this.$store.commit('chat/MUTCHATCONNECT', 'No Conectado sus Mensajes No seran Entregados') \n\n            const payload = { \n                'NumEmpresa': this.getProfile[0].Empresa, \n                'username': this.getProfile[0].Username,\n                'id': this.getProfile[0].num_user, \n                'msg':this.mensajeConectado\n            }\n \n \n           \n            this.$socket.emit('TEST_CONNECTION',  payload,\n              function(response){    \n                  console.log(\"se disparo el   collback de Conectado \",response);  \n                 \n              }\n            );\n            \n\n        } catch (error) {\n            console.log(\"en Chat.vue  en mounted catch\" + error);\n        } \n        this.typedMessage = ''\n\n    },\n\n    data() {\n        return {\n            tokenChat: \"\",\n            colorConectado:\"text-danger\",\n            mensajeConectado:'Listo* Puede Chatear',\n           \n             \n            chatMsg: {\n                msg: 1\n            },\n            messages: [],\n            active: true,\n            isHidden: false,\n            searchContact: '',\n            activeProfileSidebar: false,\n            activeChatUser: true,\n            userProfileId: -1,\n            typedMessage: '',\n            isChatPinned: false,\n            settings: {\n                maxScrollbarLength: 60,\n                wheelSpeed: 0.70\n            },\n            clickNotClose: true,\n            isChatSidebarActive: true,\n            isLoggedInUserProfileView: false,\n        }\n    },\n    watch: { \n        getChatconnect() {\n            if (this.getChatconnect==this.mensajeConectado)\n              this.colorConectado=\"text-success\";\n        },\n        chatMsg() {\n            alert(\"cambio \");\n            console.log(\"mensaje\", this.chatMsg);\n            this.setMessage(this.chatMsg);\n        },\n\n        windowWidth() {\n            this.setSidebarWidth()\n        },\n        getProfile() {\n            console.log(\"cambio el profile CHAT LINEA 167 APROX\")\n            //  alert(\"profile cambio \");\n        },\n    },\n    computed: {\n        getChatconnect() {\n            return this.$store.state.chat.chatconnect;\n        },\n        getRecargar() {\n            return this.$store.state.recargar;\n        },\n        getAppActiveUser() {\n            return this.$store.state.AppActiveUser;\n        },\n        getchats() {\n\n            return this.$store.state.chat.chats;\n        },\n        getProfile() {\n            return this.$store.state.dsoaLogin.profile;\n        },\n        // COMPONENTE DIVISOFT CHAT\n        getTokenChat() {\n            return this.$store.state.dsoaLogin.token;\n\n        },\n\n        chatLastMessaged() {\n            return (userId) => this.$store.getters['chat/chatLastMessaged'](userId)\n        },\n        chatUnseenMessages() {\n            return (userId) => {\n                const unseenMsg = this.$store.getters['chat/chatUnseenMessages'](userId)\n                if (unseenMsg) return unseenMsg\n            }\n        },\n        activeUser() {\n            return this.$store.state.AppActiveUser\n        },\n        getStatusColor() {\n            return (isActiveUser) => {\n                const userStatus = this.getUserStatus(isActiveUser)\n\n                if (userStatus === 'online') {\n                    return 'success'\n                } else if (userStatus === 'do not disturb') {\n                    return 'danger'\n                } else if (userStatus === 'away') {\n                    return 'warning'\n                } else {\n                    return 'grey'\n                }\n            }\n        },\n        chatContacts() {\n            return this.$store.getters['chat/chatContacts']\n        },\n        contacts() {\n            return this.$store.getters['chat/contacts']\n        },\n\n        searchQuery: {\n            get() {\n                if (this.$store.state.chat.chatSearchQuery)\n                    return this.$store.state.chat.chatSearchQuery\n                else\n                    return \"\";\n            },\n            set(val) {\n                this.$store.dispatch('chat/setChatSearchQuery', val)\n            }\n        },\n        scrollbarTag() {\n            return this.$store.getters.scrollbarTag\n        },\n        isActiveChatUser() {\n\n            return (userId) => userId === this.activeChatUser\n        },\n        windowWidth() {\n            return this.$store.state.windowWidth\n        }\n    },\n    methods: {\n        recarga()\n        {\n           this.$router.go(this.$router.currentRoute);  \n        },\n        getUserStatus(isActiveUser) {\n            // return \"active\"\n            return isActiveUser ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status\n        },\n        closeProfileSidebar(value) {\n            this.activeProfileSidebar = value\n        },\n\n        updateActiveChatUser(contactId) {\n            this.activeChatUser = contactId\n\n            let datos = {\n                NumEmpresa: this.getProfile[0].Empresa,\n                userid: this.getProfile[0].num_user,\n                userSend: contactId\n            }\n\n            this.getfetChats(datos);\n\n            if (this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\n                this.$store.dispatch('chat/markSeenAllMessages', contactId)\n            }\n            const chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)\n            if (chatData) this.isChatPinned = chatData.isPinned\n            else this.isChatPinned = false\n            this.toggleChatSidebar()\n            this.typedMessage = ''\n\n        },\n        showProfileSidebar(userId, openOnLeft = false) {\n            this.userProfileId = userId\n            this.isLoggedInUserProfileView = openOnLeft\n            this.activeProfileSidebar = !this.activeProfileSidebar\n        },\n\n        sendMsg() {\n            //alert(\"divisoft envieando MENSAJE\");\n            if (!this.typedMessage) return\n            if (!this.activeChatUser) return\n\n            const payload = {\n                'NumEmpresa': this.getProfile[0].Empresa,\n                'isPinned': this.isChatPinned,\n                'username': this.getProfile[0].Username,\n                'sendusernum': this.getProfile[0].num_user,\n\n                'msg': {\n                    'textContent': this.typedMessage,\n                    'time': String(new Date()),\n                    'isSent': true,\n                    'isSeen': false\n                },\n                'id': this.activeChatUser\n            }\n            //ADEMAR VER SI HAY COMUNICACION \n            console.log(\"enviando \", JSON.stringify(payload));\n\n            this.typedMessage = ''\n\n            // se lo manda al destinatrio \n\n            this.$socket.emit('SEND_MESSAGE', payload,\n              function(response){     \n                 console.log(\"se disparo el  collback\",response);\n              }\n            );\n            // lo refresca en nuestro chat\n \n            this.$store.dispatch('chat/SENDCHATMESSAGE', payload)\n\n            const scroll_el = this.$refs.chatLogPS.$el || this.$refs.chatLogPS\n            scroll_el.scrollTop = this.$refs.chatLog.scrollHeight\n\n        },\n\n        setMessage(data) {\n\n            this.$store.commit(\"chat/SEND_CHAT_MESSAGE\", data);\n        },\n\n        toggleIsChatPinned(value) {\n            this.isChatPinned = value\n        },\n        setSidebarWidth() {\n            if (this.windowWidth < 1200) {\n                this.isChatSidebarActive = this.clickNotClose = false\n            } else {\n                this.isChatSidebarActive = this.clickNotClose = true\n            }\n        },\n        toggleChatSidebar(value = false) {\n            if (!value && this.clickNotClose) return\n            this.isChatSidebarActive = value\n        },\n\n        getfetContacts(datos) {\n            this.$store.dispatch('chat/fetchContacts', datos);\n            return 1;\n        },\n\n        getfetChats(datos) {\n            this.$store.dispatch('chat/fetchChats', datos);\n            return 1;\n        },\n        getChatContacts(datos) {\n            this.$store.dispatch('chat/fetchChatContacts', datos);\n            return 1;\n        }\n\n    },\n    components: {\n        VuePerfectScrollbar,\n        ChatContact,\n        UserProfile,\n        ChatNavbar,\n        ChatLog\n    },\n\n    /* beforeDestroy() {\n         this.$store.unregisterModule('chat')\n     }*/\n\n}\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/apps/chat.scss\";\n</style>\n"],"sourceRoot":"src/views/apps/chat"}]}