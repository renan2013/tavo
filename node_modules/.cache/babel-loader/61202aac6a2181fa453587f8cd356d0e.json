{"remainingRequest":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\thread-loader\\dist\\cjs.js!D:\\proyetos2020vue\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js!D:\\proyetos2020vue\\TAVOCR\\src\\store\\bitWeb\\moduleBitWebMutations.js","dependencies":[{"path":"D:\\proyetos2020vue\\TAVOCR\\src\\store\\bitWeb\\moduleBitWebMutations.js","mtime":1601945796000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\n\n/*=========================================================================================\n  File Name: mutations.js\n  Description: Vuex Store - mutations\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n  Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n==========================================================================================*/\nvar mutations = {\n  //////////////////////////////////////////////////\n  /// DIVISOFT DIVISOFT DIVISOFT DIVISOFT DIVISOFT //\n  //////////////////////////////////////////////////\n  //// MUT\n  MUTSETSELECTED: function MUTSETSELECTED(state, FilaSelected) {\n    //  console.log('Mut - fila seleccionada ', FilaSelected)\n    state.selectedRow = [];\n    state.selectedRow.push(FilaSelected);\n  },\n  //// MUT\n  MUTSETDESELECTED: function MUTSETDESELECTED(state) {\n    state.selectedRow = [];\n  },\n  //// MUT\n  MUTSETTABLEKEY: function MUTSETTABLEKEY(state, tableKey) {\n    state.tableKey.push(tableKey);\n  },\n  /// DIVISOFT  DIVISOFT  DIVISOFT  DIVISOFT DIVISOFT  DIVISOFT DIVISOFT  DIVISOFT DIVISOFT  DIVISOFT  \n  //// MUT\n  MUTSETURL: function MUTSETURL(state, indicadorUrl) {\n    //ASIGNA EL URL \n    if (indicadorUrl == \"O\") state.urlDsoa = \"http://201.194.194.84:8998/DsoaService2/dsoa/request\";\n    if (indicadorUrl == \"P\") state.urlDsoa = \"http://192.168.0.28:8989/dsoaPHP/dsoaPHP/dsoa/\";\n  },\n  //// MUT\n  MUTCLEARTABLEKEY: function MUTCLEARTABLEKEY(state) {\n    state.tableKey = [];\n  },\n  MUTPROCESANDOTRUE: function MUTPROCESANDOTRUE(state) {\n    state.estadoProcesando = 1;\n  },\n  MUTPROCESANDOFALSE: function MUTPROCESANDOFALSE(state) {\n    state.estadoProcesando = 0;\n  },\n  ////  carga la peticion a partir de texto xml ya preparado\n  MUTSETPETICIONTXT: function MUTSETPETICIONTXT(state, pettxt) {\n    // CARGO Last query \n    // empaquete la peticion \n    state.peticion = \"<SOA_Xml>\";\n    state.peticion += pettxt.header;\n    state.peticion += pettxt.parametros;\n    state.peticion += pettxt.filas;\n    state.peticion += \"</SOA_Xml>\"; //console.log(\" MUTSETPETICIONTXT  petiion FINAL FINAL FINAL\",state.peticion)\n  },\n  MUTSETPETICIONTXTCLEAR: function MUTSETPETICIONTXTCLEAR(state) {\n    // CARGO Last query \n    // empaquete la peticion \n    state.peticion = \"\";\n  },\n  //// MUT\n  MUTSETINDICADORDML: function MUTSETINDICADORDML(state, indicadorDML) {\n    state.indicadorDML = indicadorDML; // console.log(\"indicadorDML\", state.indicadorDML)\n  },\n  //// MUT\n  MUTSETDATOSDEFAULT: function MUTSETDATOSDEFAULT(state, datosDefault) {\n    state.rowsForm = datosDefault; // console.log(\"datosDefault\", state.datosDefault)\n  },\n  //// MUT\n  MUTSETRESPUESTAFORM: function MUTSETRESPUESTAFORM(state, response) {\n    console.log(\"MUTSETRESPUESTAFORM\", JSON.stringify(response));\n    state.dsoaModel = response;\n\n    try {\n      state.datosForm = JSON.parse(response.datos); //console.log(\"oracle\");\n    } catch (e) {\n      state.datosForm = response.datos; //console.log(\"php\", state.datosForm.rows);\n    }\n\n    state.rowsForm = state.datosForm.rows; //console.log(\"ROWSFORM 1\", state.rowsForm);\n  },\n  /// MUT\n  /// MUT\n  MUTSETRESPUESTAGRIDPUBLICA: function MUTSETRESPUESTAGRIDPUBLICA(state, response) {\n    state.datosPublicacion = [];\n    console.log(\"datos que VienenMUTSETRESPUESTAGRIDPUBLICA \", response);\n\n    if (response.lengt < 50) {\n      state.lastBdmsage = \"No se encontraron registros\";\n      state.lastBdmsgcode = \"0\";\n    } else {\n      console.log(\"se obtuvo \", atob(response));\n      state.datosPublicacion = JSON.parse(atob(response));\n    } //console.log(\"datos que VienenMUTSETRESPUESTAGRIDPUBLICA \", state.datosPublicacion);\n\n  },\n  MUTSETRESPUESTAGRID: function MUTSETRESPUESTAGRID(state, response) {\n    state.dsoaModel = response;\n\n    try {\n      state.datosGrid = JSON.parse(response.datos);\n      console.log(\"oracle\");\n    } catch (e) {\n      state.datosGrid = response.datos;\n    }\n\n    state.rows = state.datosGrid.rows;\n\n    if (state.datosGrid.total == 0) {\n      state.lastBdmsage = \"No se encontraron registros\";\n      state.lastBdmsgcode = \"0\";\n    }\n  },\n  /// MUT\n  MUTSETRESPUESTAPROMPT: function MUTSETRESPUESTAPROMPT(state, response) {\n    state.dsoaModel = response;\n\n    try {\n      state.datosPrompt = JSON.parse(response.datos); // console.log(\"oracle\",state.datosPrompt.rows);\n    } catch (e) {\n      state.datosPrompt = response.datos;\n      console.log(\"php\");\n    }\n\n    state.rows = state.datosPrompt.rows;\n  },\n  /// MUT\n  MUTSETPROMPTDEFAULT: function MUTSETPROMPTDEFAULT(state, response) {\n    try {\n      state.datosPrompt = response;\n    } catch (e) {\n      state.datosPrompt = response;\n    }\n  },\n  //// MUT\n  MUTSETRESPUESTACRUD: function MUTSETRESPUESTACRUD(state, response) {\n    //se debe obtener el mensaje de respuesta de la peticion\n    state.dsoaModel = response;\n    state.datosMsj = [];\n    state.datosMsj.push({\n      codigoerror: response.codigoerror,\n      deserror: response.deserror,\n      data: response.datos\n    });\n\n    if (state.datosMsj[0].codigoerror == \"0\") {\n      state.lastBdmsage = \"Proceso Exitoso !! \";\n      state.lastBdmsgcode = 0;\n      this.$vs.notify({\n        title: \"Actualizacion, Borrado o Insercion de Datos\",\n        time: 6000,\n        text: \"Proceso Exitoso\",\n        color: \"success\"\n      });\n    } else {\n      state.lastBdmsage = \"Proceso Con Errores \" + state.datosMsj[0].deserror;\n      state.lastBdmsgcode = state.datosMsj[0].codigoerror;\n      this.$vs.notify({\n        title: \"Actualizacion, Borrado o Insercion de Datos\",\n        time: 6000,\n        text: state.lastBdmsage,\n        color: \"warning\"\n      });\n    }\n  },\n  //// MUT\n  MUTSETRESPUESTAGENERICO: function MUTSETRESPUESTAGENERICO(state, response) {\n    try {\n      state.selectQuery = JSON.parse(response)[0]; //console.log(\"oracle\");\n    } catch (e) {\n      state.selectQuery = response[0];\n    }\n\n    state.datosMsj = [];\n  },\n  MUTSETRESPUESTAGENERICONULL: function MUTSETRESPUESTAGENERICONULL() {\n    state.selectQuery = \"\";\n  },\n  MUTSETRESPUESTACLOUD: function MUTSETRESPUESTACLOUD(state, response) {\n    //se debe obtener el mensaje de respuesta de la peticion\n    if (response.length < 5) state.cloudData = response;else {\n      var datos = response.datos;\n      datos = datos.replace(\"<Response><PC_DATOS><![CDATA[\", \"\");\n      datos = datos.substr(0, datos.indexOf(\"]>\") - 1);\n      console.log(\"datos sin procesaar \", datos);\n      datos = JSON.parse(datos);\n      console.log(\"credencial \", datos[0].Satcredencial);\n      state.cloudData = datos;\n      console.log(\"credencial \", datos[0].Satcredencial);\n      state.datosMsj = [];\n      state.datosMsj.push({\n        codigoerror: response.codigoerror,\n        deserror: response.deserror,\n        data: response.datos\n      });\n\n      if (state.datosMsj[0].codigoerror == \"0\") {\n        // state.lastBdmsage = \"Proceso Exitoso !! \";\n        state.lastBdmsgcode = 0;\n      } else {\n        state.lastBdmsage = \"Proceso Con Errores \" + state.datosMsj[0].deserror;\n        state.lastBdmsgcode = state.datosMsj[0].codigoerror;\n      }\n    }\n  },\n  MUTREGISTRAERROR: function MUTREGISTRAERROR(state, jsonError) {\n    state.lastBdmsage = jsonError.msgError;\n    state.lastBdmsgcode = jsonError.codigoError;\n  },\n  //// MUT   \n  MUTSETLLLAVE: function MUTSETLLLAVE(state, varLlave) {\n    // llena los campos que contiene la entidad para ser buscada puede ser rowid si es oracle\n    state.llaveRec.push(varLlave);\n  },\n  ///  MUTACIONES MUTACIONES  MULTIMEDIA MULTIMEDIA  MULTIMEDIA MULTIMEDIA  MULTIMEDIA MULTIMEDIA  MULTIMEDIA MULTIMEDIA  MULTIMEDIA MULTIMEDIA \n  //// MUT   \n  MUTSETDATA: function MUTSETDATA(state, data) {\n    // llena los campos que contiene la entidad para ser buscada puede ser rowid si es oracle\n    //console.log( \"respuesta de DATA JSON \",data);\n    state.DataCMS = data;\n  },\n  //// MUT   \n  MUTSETBD: function MUTSETBD(state, bd) {\n    // llena los campos que contiene la entidad para ser buscada puede ser rowid si es oracle\n    state.Bd = bd;\n  },\n  //// MUT   \n  MUTSETMANIPULACION: function MUTSETMANIPULACION(state, manipulacion) {\n    // llena los campos que contiene la entidad para ser buscada puede ser rowid si es oracle\n    state.Manipulacion = manipulacion;\n  },\n  //// MUT\n  MUTSETDATOSDEFAULTCMS: function MUTSETDATOSDEFAULTCMS(state, data) {\n    state.DataCMS = data; // console.log(\"datosDefault\", state.datosDefault)\n  },\n  //procedimiento almacendo\n  MUTSETOBJETOJSONPROC: function MUTSETOBJETOJSONPROC(state, respuestaProc) {\n    state.respuestaProc = respuestaProc;\n  },\n  MUTSETDINAMICKEYOB: function MUTSETDINAMICKEYOB(state, dinamicKeyOb) {\n    state.dinamicKeyOb = dinamicKeyOb;\n  },\n  //procedimiento almacendoD\n  // RESPUESTA EN  XML\n  MUTSETRESPUESTAProc: function MUTSETRESPUESTAProc(state, respuestaXML) {\n    state.procRESPUESTAXML = respuestaXML;\n    state.respuestaProc = [];\n  },\n  /// MUT PARA Asignar las respuestas de un procedimiento almacenado.\n  MUTSETRESPUESTAE: function MUTSETRESPUESTAE(state, response) {\n    state.datosMsj = [];\n    state.datosMsj.push({\n      codigoerror: response.codigoerror,\n      deserror: response.deserror,\n      data: response.datos\n    });\n\n    if (state.datosMsj[0].codigoerror == \"0\") {\n      state.lastBdmsage = \"Proceso Exitoso Ejecutado Correctamente  \";\n      state.lastBdmsgcode = 0; //console.log(\"cargand1 state.procRESPUESTAXML \", state.datosMsj[0].data);\n\n      state.procRESPUESTAXML = state.datosMsj[0].data;\n    } else {\n      state.procRESPUESTAXML = \"ERROR\";\n      state.lastBdmsage = \"Proceso Con Errores \" + state.datosMsj[0].deserror;\n      state.lastBdmsgcode = state.datosMsj[0].codigoerror;\n    }\n  }\n};",{"version":3,"sources":["D:/proyetos2020vue/TAVOCR/src/store/bitWeb/moduleBitWebMutations.js"],"names":["mutations","MUTSETSELECTED","state","FilaSelected","selectedRow","push","MUTSETDESELECTED","MUTSETTABLEKEY","tableKey","MUTSETURL","indicadorUrl","urlDsoa","MUTCLEARTABLEKEY","MUTPROCESANDOTRUE","estadoProcesando","MUTPROCESANDOFALSE","MUTSETPETICIONTXT","pettxt","peticion","header","parametros","filas","MUTSETPETICIONTXTCLEAR","MUTSETINDICADORDML","indicadorDML","MUTSETDATOSDEFAULT","datosDefault","rowsForm","MUTSETRESPUESTAFORM","response","console","log","JSON","stringify","dsoaModel","datosForm","parse","datos","e","rows","MUTSETRESPUESTAGRIDPUBLICA","datosPublicacion","lengt","lastBdmsage","lastBdmsgcode","atob","MUTSETRESPUESTAGRID","datosGrid","total","MUTSETRESPUESTAPROMPT","datosPrompt","MUTSETPROMPTDEFAULT","MUTSETRESPUESTACRUD","datosMsj","codigoerror","deserror","data","$vs","notify","title","time","text","color","MUTSETRESPUESTAGENERICO","selectQuery","MUTSETRESPUESTAGENERICONULL","MUTSETRESPUESTACLOUD","length","cloudData","replace","substr","indexOf","Satcredencial","MUTREGISTRAERROR","jsonError","msgError","codigoError","MUTSETLLLAVE","varLlave","llaveRec","MUTSETDATA","DataCMS","MUTSETBD","bd","Bd","MUTSETMANIPULACION","manipulacion","Manipulacion","MUTSETDATOSDEFAULTCMS","MUTSETOBJETOJSONPROC","respuestaProc","MUTSETDINAMICKEYOB","dinamicKeyOb","MUTSETRESPUESTAProc","respuestaXML","procRESPUESTAXML","MUTSETRESPUESTAE"],"mappings":"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","sourcesContent":["/*=========================================================================================\n  File Name: mutations.js\n  Description: Vuex Store - mutations\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n  Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n==========================================================================================*/\nconst mutations = {\n\n  //////////////////////////////////////////////////\n  /// DIVISOFT DIVISOFT DIVISOFT DIVISOFT DIVISOFT //\n  //////////////////////////////////////////////////\n\n  //// MUT\n  MUTSETSELECTED(state, FilaSelected) {\n      //  console.log('Mut - fila seleccionada ', FilaSelected)\n      state.selectedRow = [];\n      state.selectedRow.push(FilaSelected)\n  },\n  //// MUT\n  MUTSETDESELECTED(state) {\n      state.selectedRow = [];\n  },\n  //// MUT\n  MUTSETTABLEKEY(state, tableKey) {\n      state.tableKey.push(tableKey);\n\n  },\n\n  /// DIVISOFT  DIVISOFT  DIVISOFT  DIVISOFT DIVISOFT  DIVISOFT DIVISOFT  DIVISOFT DIVISOFT  DIVISOFT  \n  //// MUT\n  MUTSETURL(state, indicadorUrl) {\n      //ASIGNA EL URL \n      if (indicadorUrl == \"O\")\n          state.urlDsoa = \"http://201.194.194.84:8998/DsoaService2/dsoa/request\";\n\n      if (indicadorUrl == \"P\")\n          state.urlDsoa = \"http://192.168.0.28:8989/dsoaPHP/dsoaPHP/dsoa/\";\n\n  },\n  //// MUT\n  MUTCLEARTABLEKEY(state) {\n      state.tableKey = [];\n  },\n  MUTPROCESANDOTRUE(state) {\n      state.estadoProcesando = 1;\n  },\n\n  MUTPROCESANDOFALSE(state) {\n      state.estadoProcesando = 0;\n  },\n\n  ////  carga la peticion a partir de texto xml ya preparado\n  MUTSETPETICIONTXT(state, pettxt) {\n\n      // CARGO Last query \n      // empaquete la peticion \n      state.peticion = \"<SOA_Xml>\";\n      state.peticion += pettxt.header;\n      state.peticion += pettxt.parametros;\n      state.peticion += pettxt.filas;\n      state.peticion += \"</SOA_Xml>\";\n\n\n      //console.log(\" MUTSETPETICIONTXT  petiion FINAL FINAL FINAL\",state.peticion)\n  },\n\n  MUTSETPETICIONTXTCLEAR(state) {\n\n      // CARGO Last query \n      // empaquete la peticion \n      state.peticion = \"\";\n\n  },\n \n  //// MUT\n  MUTSETINDICADORDML(state, indicadorDML) {\n      state.indicadorDML = indicadorDML;\n      // console.log(\"indicadorDML\", state.indicadorDML)\n  },\n\n  //// MUT\n  MUTSETDATOSDEFAULT(state, datosDefault) {\n      state.rowsForm = datosDefault;\n      // console.log(\"datosDefault\", state.datosDefault)\n  },\n\n  //// MUT\n  MUTSETRESPUESTAFORM(state, response) {\n\n      console.log(\"MUTSETRESPUESTAFORM\", JSON.stringify(response))\n\n      state.dsoaModel = response;\n\n      try {\n          state.datosForm = JSON.parse(response.datos);\n          //console.log(\"oracle\");\n      } catch (e) {\n          state.datosForm = response.datos;\n          //console.log(\"php\", state.datosForm.rows);\n      }\n\n      state.rowsForm = state.datosForm.rows;\n      //console.log(\"ROWSFORM 1\", state.rowsForm);\n  },\n\n  /// MUT\n  /// MUT\n\n  MUTSETRESPUESTAGRIDPUBLICA(state, response) {\n\n\n      state.datosPublicacion = [];\n      console.log(\"datos que VienenMUTSETRESPUESTAGRIDPUBLICA \", response);\n\n      if (response.lengt < 50) {\n          state.lastBdmsage = \"No se encontraron registros\";\n          state.lastBdmsgcode = \"0\";\n      } else {\n          console.log(\"se obtuvo \", atob(response));\n          state.datosPublicacion = JSON.parse(atob(response));\n      }\n      //console.log(\"datos que VienenMUTSETRESPUESTAGRIDPUBLICA \", state.datosPublicacion);\n\n  },\n  MUTSETRESPUESTAGRID(state, response) {\n      state.dsoaModel = response;\n\n      try {\n          state.datosGrid = JSON.parse(response.datos);\n          console.log(\"oracle\");\n      } catch (e) {\n          state.datosGrid = response.datos;\n\n      }\n      state.rows = state.datosGrid.rows;\n\n      if (state.datosGrid.total == 0) {\n          state.lastBdmsage = \"No se encontraron registros\";\n          state.lastBdmsgcode = \"0\";\n      }\n  },\n\n  /// MUT\n  MUTSETRESPUESTAPROMPT(state, response) {\n\n      state.dsoaModel = response;\n\n      try {\n          state.datosPrompt = JSON.parse(response.datos);\n          // console.log(\"oracle\",state.datosPrompt.rows);\n      } catch (e) {\n          state.datosPrompt = response.datos;\n          console.log(\"php\");\n      }\n      state.rows = state.datosPrompt.rows;\n  },\n\n  /// MUT\n  MUTSETPROMPTDEFAULT(state, response) {\n\n\n      try {\n          state.datosPrompt = response;\n      } catch (e) {\n          state.datosPrompt = response;\n      }\n  },\n\n  //// MUT\n  MUTSETRESPUESTACRUD(state, response) {\n\n      //se debe obtener el mensaje de respuesta de la peticion\n      state.dsoaModel = response;\n      state.datosMsj = [];\n\n      state.datosMsj.push({\n          codigoerror: response.codigoerror,\n          deserror: response.deserror,\n          data: response.datos\n      });\n\n\n      if (state.datosMsj[0].codigoerror == \"0\") {\n          state.lastBdmsage = \"Proceso Exitoso !! \";\n          state.lastBdmsgcode = 0;\n\n\n          this.$vs.notify({\n              title: \"Actualizacion, Borrado o Insercion de Datos\",\n              time: 6000,\n              text: \"Proceso Exitoso\",\n              color: \"success\"\n          });\n\n      } else {\n          state.lastBdmsage = \"Proceso Con Errores \" + state.datosMsj[0].deserror;\n          state.lastBdmsgcode = state.datosMsj[0].codigoerror;\n\n\n          this.$vs.notify({\n              title: \"Actualizacion, Borrado o Insercion de Datos\",\n              time: 6000,\n              text: state.lastBdmsage,\n              color: \"warning\"\n          });\n\n\n      }\n\n  },\n\n  //// MUT\n  MUTSETRESPUESTAGENERICO(state, response) {\n      try {\n          state.selectQuery = JSON.parse(response)[0];\n\n          //console.log(\"oracle\");\n      } catch (e) {\n          state.selectQuery = response[0];\n\n      }\n\n\n\n      state.datosMsj = [];\n\n  },\n\n  MUTSETRESPUESTAGENERICONULL() {\n\n      state.selectQuery = \"\";\n\n\n  },\n\n  MUTSETRESPUESTACLOUD(state, response) {\n\n      //se debe obtener el mensaje de respuesta de la peticion\n      if (response.length < 5)\n          state.cloudData = response;\n      else {\n          let datos = response.datos;\n\n          datos = datos.replace(\"<Response><PC_DATOS><![CDATA[\", \"\");\n          datos = datos.substr(0, datos.indexOf(\"]>\") - 1)\n\n          console.log(\"datos sin procesaar \", datos);\n\n\n          datos = JSON.parse(datos);\n\n          console.log(\"credencial \", datos[0].Satcredencial);\n\n          state.cloudData = datos;\n\n          console.log(\"credencial \", datos[0].Satcredencial);\n          state.datosMsj = [];\n\n          state.datosMsj.push({\n              codigoerror: response.codigoerror,\n              deserror: response.deserror,\n              data: response.datos\n          });\n\n\n          if (state.datosMsj[0].codigoerror == \"0\") {\n              // state.lastBdmsage = \"Proceso Exitoso !! \";\n              state.lastBdmsgcode = 0;\n\n          } else {\n              state.lastBdmsage = \"Proceso Con Errores \" + state.datosMsj[0].deserror;\n              state.lastBdmsgcode = state.datosMsj[0].codigoerror;\n\n          }\n      }\n\n  },\n  MUTREGISTRAERROR(state, jsonError) {\n      state.lastBdmsage = jsonError.msgError;\n      state.lastBdmsgcode = jsonError.codigoError;\n\n  },\n  //// MUT   \n  MUTSETLLLAVE(state, varLlave) {\n      // llena los campos que contiene la entidad para ser buscada puede ser rowid si es oracle\n      state.llaveRec.push(varLlave);\n  },\n\n  ///  MUTACIONES MUTACIONES  MULTIMEDIA MULTIMEDIA  MULTIMEDIA MULTIMEDIA  MULTIMEDIA MULTIMEDIA  MULTIMEDIA MULTIMEDIA  MULTIMEDIA MULTIMEDIA \n\n\n  //// MUT   \n  MUTSETDATA(state, data) {\n      // llena los campos que contiene la entidad para ser buscada puede ser rowid si es oracle\n      //console.log( \"respuesta de DATA JSON \",data);\n      state.DataCMS = data;\n\n  },\n  //// MUT   \n  MUTSETBD(state, bd) {\n      // llena los campos que contiene la entidad para ser buscada puede ser rowid si es oracle\n      state.Bd = bd;\n  },\n  //// MUT   \n  MUTSETMANIPULACION(state, manipulacion) {\n      // llena los campos que contiene la entidad para ser buscada puede ser rowid si es oracle\n      state.Manipulacion = manipulacion;\n  },\n  //// MUT\n  MUTSETDATOSDEFAULTCMS(state, data) {\n      state.DataCMS = data;\n      // console.log(\"datosDefault\", state.datosDefault)\n  }, //procedimiento almacendo\n\n  MUTSETOBJETOJSONPROC(state, respuestaProc) {\n      state.respuestaProc = respuestaProc;\n\n  },\n  MUTSETDINAMICKEYOB(state, dinamicKeyOb) {\n      state.dinamicKeyOb = dinamicKeyOb;\n  },\n\n  //procedimiento almacendoD\n  // RESPUESTA EN  XML\n  MUTSETRESPUESTAProc(state, respuestaXML) {\n      state.procRESPUESTAXML = respuestaXML;\n      state.respuestaProc = [];\n  },\n\n  /// MUT PARA Asignar las respuestas de un procedimiento almacenado.\n  MUTSETRESPUESTAE(state, response) {\n\n      state.datosMsj = [];\n\n\n      state.datosMsj.push({\n          codigoerror: response.codigoerror,\n          deserror: response.deserror,\n          data: response.datos\n      });\n\n      if (state.datosMsj[0].codigoerror == \"0\") {\n          state.lastBdmsage = \"Proceso Exitoso Ejecutado Correctamente  \";\n          state.lastBdmsgcode = 0;\n          //console.log(\"cargand1 state.procRESPUESTAXML \", state.datosMsj[0].data);\n          state.procRESPUESTAXML = state.datosMsj[0].data;\n      } else {\n\n          state.procRESPUESTAXML = \"ERROR\";\n          state.lastBdmsage = \"Proceso Con Errores \" + state.datosMsj[0].deserror;\n          state.lastBdmsgcode = state.datosMsj[0].codigoerror;\n\n      }\n  }\n}\n "]}]}