{"remainingRequest":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js!E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\src\\views\\apps\\chat\\Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\src\\views\\apps\\chat\\Chat.vue","mtime":1603840912323},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Vue from \"vue\";\nimport { mapActions } from \"vuex\";\nimport ChatContact from \"./ChatContact.vue\";\nimport ChatLog from \"./ChatLog.vue\";\nimport ChatNavbar from \"./ChatNavbar.vue\";\nimport UserProfile from \"./UserProfile.vue\";\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\nimport moduleChat from \"@/store/chat/moduleChat.js\";\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\"; //import io from 'socket.io-client';\n\nexport default {\n  created: function created() {\n    // this.$store.commit('chat/MUTSETCURRENTCONTACT',5);\n    this.contactId = this.$route.params.contactId;\n    this.$store.commit(\"chat/MUTSETCURRENTCONTACT\", 0);\n    var vm = this;\n    setTimeout(function (store) {\n      vm.$store.commit(\"chat/MUTSETCURRENTCONTACT\", vm.contactId);\n    }, 2000);\n    var datos = {\n      NumEmpresa: this.getProfile[0].Empresa,\n      userid: this.getProfile[0].num_user\n    }; // contactos\n\n    this.getfetContacts(datos);\n    this.getChatContacts(datos);\n    this.setSidebarWidth();\n  },\n  mounted: function mounted() {\n    try {\n      this.$socket.connect();\n      this.$store.commit(\"chat/MUTCHATCONNECT\", \"No Conectado sus Mensajes No seran Entregados\");\n      var payload = {\n        NumEmpresa: this.getProfile[0].Empresa,\n        username: this.getProfile[0].Username,\n        id: this.getProfile[0].num_user,\n        msg: this.mensajeConectado\n      };\n      this.$socket.emit(\"TEST_CONNECTION\", payload, function (response) {\n        console.log(\"se disparo el   collback de Conectado \", response);\n      });\n    } catch (error) {\n      console.log(\"en Chat.vue  en mounted catch\" + error);\n    }\n\n    this.typedMessage = \"\";\n  },\n  data: function data() {\n    return {\n      tokenChat: \"\",\n      colorConectado: \"text-danger\",\n      mensajeConectado: \"Listo* Puede Chatear\",\n      contactId: \"0\",\n      chatMsg: {\n        msg: 1\n      },\n      messages: [],\n      active: true,\n      isHidden: false,\n      searchContact: \"\",\n      activeProfileSidebar: false,\n      activeChatUser: 118,\n      userProfileId: -1,\n      typedMessage: \"\",\n      isChatPinned: false,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.7\n      },\n      clickNotClose: true,\n      isChatSidebarActive: true,\n      isLoggedInUserProfileView: false\n    };\n  },\n  watch: {\n    getChatconnect: function getChatconnect() {\n      if (this.getChatconnect == this.mensajeConectado) this.colorConectado = \"text-success\";\n    },\n    chatMsg: function chatMsg() {\n      console.log(\"mensaje\", this.chatMsg);\n      this.setMessage(this.chatMsg);\n    },\n    windowWidth: function windowWidth() {\n      this.setSidebarWidth();\n    },\n    getProfile: function getProfile() {\n      console.log(\"cambio el profile CHAT LINEA 167 APROX\"); //  alert(\"profile cambio \");\n    },\n    getCurrentContact: function getCurrentContact() {\n      if (this.getCurrentContact > 0) {\n        var usuariochat = this.getCurrentContact;\n\n        try {\n          usuariochat = parseInt(usuariochat, 10);\n        } catch (error) {}\n\n        this.updateActiveChatUser(usuariochat);\n      } //  alert(\"profile cambio \");\n\n    }\n  },\n  computed: {\n    getChatconnect: function getChatconnect() {\n      return this.$store.state.chat.chatconnect;\n    },\n    getRecargar: function getRecargar() {\n      return this.$store.state.recargar;\n    },\n    getCurrentContact: function getCurrentContact() {\n      return this.$store.state.chat.currentContact;\n    },\n    getAppActiveUser: function getAppActiveUser() {\n      return this.$store.state.AppActiveUser;\n    },\n    getchats: function getchats() {\n      return this.$store.state.chat.chats;\n    },\n    getProfile: function getProfile() {\n      return this.$store.state.dsoaLogin.profile;\n    },\n    // COMPONENTE DIVISOFT CHAT\n    getTokenChat: function getTokenChat() {\n      return this.$store.state.dsoaLogin.token;\n    },\n    chatLastMessaged: function chatLastMessaged() {\n      var _this = this;\n\n      return function (userId) {\n        return _this.$store.getters[\"chat/chatLastMessaged\"](userId);\n      };\n    },\n    chatUnseenMessages: function chatUnseenMessages() {\n      var _this2 = this;\n\n      return function (userId) {\n        var unseenMsg = _this2.$store.getters[\"chat/chatUnseenMessages\"](userId);\n\n        if (unseenMsg) return unseenMsg;\n      };\n    },\n    activeUser: function activeUser() {\n      return this.$store.state.AppActiveUser;\n    },\n    getStatusColor: function getStatusColor() {\n      var _this3 = this;\n\n      return function (isActiveUser) {\n        var userStatus = _this3.getUserStatus(isActiveUser);\n\n        if (userStatus === \"online\") {\n          return \"success\";\n        } else if (userStatus === \"do not disturb\") {\n          return \"danger\";\n        } else if (userStatus === \"away\") {\n          return \"warning\";\n        } else {\n          return \"grey\";\n        }\n      };\n    },\n    chatContacts: function chatContacts() {\n      return this.$store.getters[\"chat/chatContacts\"];\n    },\n    contacts: function contacts() {\n      return this.$store.getters[\"chat/contacts\"];\n    },\n    searchQuery: {\n      get: function get() {\n        if (this.$store.state.chat.chatSearchQuery) return this.$store.state.chat.chatSearchQuery;else return \"\";\n      },\n      set: function set(val) {\n        this.$store.dispatch(\"chat/setChatSearchQuery\", val);\n      }\n    },\n    scrollbarTag: function scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    isActiveChatUser: function isActiveChatUser() {\n      var _this4 = this;\n\n      return function (userId) {\n        return userId === _this4.activeChatUser;\n      };\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    recarga: function recarga() {\n      this.$router.go(this.$router.currentRoute);\n    },\n    getUserStatus: function getUserStatus(isActiveUser) {\n      // return \"active\"\n      return isActiveUser ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status;\n    },\n    closeProfileSidebar: function closeProfileSidebar(value) {\n      this.activeProfileSidebar = value;\n    },\n    updateActiveChatUser: function updateActiveChatUser(contactId) {\n      //  this.$store.commit('chat/MUTSETCURRENTCONTACT',5);\n      this.contactId = 0;\n\n      try {\n        this.activeChatUser = parseInt(contactId, 10);\n      } catch (error) {\n        this.activeChatUser = contactId;\n      }\n\n      var datos = {\n        NumEmpresa: this.getProfile[0].Empresa,\n        userid: this.getProfile[0].num_user,\n        userSend: contactId\n      };\n      this.getfetChats(datos);\n\n      if (this.$store.getters[\"chat/chatDataOfUser\"](this.activeChatUser)) {\n        this.$store.dispatch(\"chat/markSeenAllMessages\", contactId);\n      }\n\n      var chatData = this.$store.getters[\"chat/chatDataOfUser\"](this.activeChatUser);\n      if (chatData) this.isChatPinned = chatData.isPinned;else this.isChatPinned = false;\n      this.toggleChatSidebar();\n      this.typedMessage = \"\";\n    },\n    showProfileSidebar: function showProfileSidebar(userId) {\n      var openOnLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      try {\n        this.userProfileId = parseInt(userId, 10);\n      } catch (error) {\n        this.userProfileId = userId;\n      }\n\n      this.isLoggedInUserProfileView = openOnLeft;\n      this.activeProfileSidebar = !this.activeProfileSidebar;\n    },\n    sendMsg: function sendMsg() {\n      //alert(\"divisoft envieando MENSAJE\");\n      if (!this.typedMessage) return;\n      if (!this.activeChatUser) return;\n      var payload = {\n        NumEmpresa: this.getProfile[0].Empresa,\n        isPinned: this.isChatPinned,\n        username: this.getProfile[0].Username,\n        sendusernum: this.getProfile[0].num_user,\n        msg: {\n          textContent: this.typedMessage,\n          time: String(new Date()),\n          isSent: true,\n          isSeen: false\n        },\n        id: this.activeChatUser\n      }; //ADEMAR VER SI HAY COMUNICACION\n\n      console.log(\"enviando \", JSON.stringify(payload));\n      this.typedMessage = \"\"; // se lo manda al destinatrio\n\n      this.$socket.emit(\"SEND_MESSAGE\", payload, function (response) {\n        console.log(\"se disparo el  collback\", response);\n      }); // lo refresca en nuestro chat\n\n      this.$store.dispatch(\"chat/SENDCHATMESSAGE\", payload);\n      var scroll_el = this.$refs.chatLogPS.$el || this.$refs.chatLogPS;\n      scroll_el.scrollTop = this.$refs.chatLog.scrollHeight;\n    },\n    setMessage: function setMessage(data) {\n      this.$store.commit(\"chat/SEND_CHAT_MESSAGE\", data);\n    },\n    toggleIsChatPinned: function toggleIsChatPinned(value) {\n      this.isChatPinned = value;\n    },\n    setSidebarWidth: function setSidebarWidth() {\n      if (this.windowWidth < 1200) {\n        this.isChatSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isChatSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleChatSidebar: function toggleChatSidebar() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!value && this.clickNotClose) return;\n      this.isChatSidebarActive = value;\n    },\n    getfetContacts: function getfetContacts(datos) {\n      this.$store.dispatch(\"chat/fetchContacts\", datos);\n      return 1;\n    },\n    getfetChats: function getfetChats(datos) {\n      this.$store.dispatch(\"chat/fetchChats\", datos);\n      return 1;\n    },\n    getChatContacts: function getChatContacts(datos) {\n      this.$store.dispatch(\"chat/fetchChatContacts\", datos);\n      return 1;\n    }\n  },\n  components: {\n    VuePerfectScrollbar: VuePerfectScrollbar,\n    ChatContact: ChatContact,\n    UserProfile: UserProfile,\n    ChatNavbar: ChatNavbar,\n    ChatLog: ChatLog\n  }\n  /* beforeDestroy() {\n         this.$store.unregisterModule('chat')\n     }*/\n\n};",{"version":3,"sources":["Chat.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- =========================================================================================\n    File Name: Chat.vue\n    Description: Chat Application - Stay connected\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<template>\n  <!-- USER PROFILE SIDEBAR -->\n\n  <div\n    v-if=\"getTokenChat\"\n    id=\"chat-app\"\n    class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\"\n  >\n    <!-- TOKEN CHAT:{{getTokenChat}}-->\n\n    <vs-sidebar\n      class=\"items-no-padding\"\n      parent=\"#chat-app\"\n      :click-not-close=\"clickNotClose\"\n      :hidden-background=\"clickNotClose\"\n      v-model=\"isChatSidebarActive\"\n      id=\"chat-list-sidebar\"\n    >\n      <user-profile\n        :active=\"activeProfileSidebar\"\n        :userId=\"userProfileId\"\n        class=\"user-profile-container\"\n        :isLoggedInUser=\"isLoggedInUserProfileView\"\n        @closeProfileSidebar=\"closeProfileSidebar\"\n      ></user-profile>\n\n      <div class=\"chat__profile-search flex p-4\">\n        <div class=\"relative inline-flex\">\n          <!--vs-avatar v-if=\"activeUser.photoURL\" class=\"m-0 border-2 border-solid border-white\" :src=\"activeUser.photoURL\" size=\"40px\" @click=\"showProfileSidebar(Number(activeUser.uid), true)\" /-->\n          <div\n            class=\"h-3 w-3 border-white border border-solid rounded-full absolute right-0 bottom-0\"\n            :class=\"'bg-' + getStatusColor(true)\"\n          ></div>\n        </div>\n        <vs-input\n          icon-no-border\n          icon=\"icon-search\"\n          icon-pack=\"feather\"\n          class=\"w-full mx-5 input-rounded-full\"\n          placeholder=\"Search or start a new chat\"\n          v-model=\"searchQuery\"\n        />\n\n        <feather-icon\n          class=\"md:inline-flex lg:hidden -ml-3 cursor-pointer\"\n          icon=\"XIcon\"\n          @click=\"toggleChatSidebar(false)\"\n        />\n      </div>\n\n      <vs-divider class=\"d-theme-border-grey-light m-0\" />\n\n      <component\n        :is=\"scrollbarTag\"\n        class=\"chat-scroll-area pt-4\"\n        :settings=\"settings\"\n        :key=\"$vs.rtl\"\n      >\n        <!-- ACTIVE CHATS LIST\n            TOKEN CHAT:{{getTokenChat}} -->\n\n        <p :class=\"colorConectado\">Estado del chat: {{ getChatconnect }}</p>\n\n        <div class=\"chat__chats-list mb-8\">\n          <h3 class=\"text-primary mb-5 px-4\">Chats Principal</h3>\n          <ul class=\"chat__active-chats bordered-items\">\n            <li\n              class=\"cursor-pointer\"\n              v-for=\"(contact, index) in chatContacts\"\n              :key=\"index\"\n              @click=\"updateActiveChatUser(contact.uid)\"\n            >\n              <chat-contact\n                v-if=\"chatLastMessaged\"\n                showLastMsg\n                :contact=\"contact\"\n                :lastMessaged=\"chatLastMessaged(contact.uid).time\"\n                :unseenMsg=\"chatUnseenMessages(contact.uid)\"\n                :isActiveChatUser=\"isActiveChatUser(contact.uid)\"\n              ></chat-contact>\n            </li>\n          </ul>\n        </div>\n\n        <!-- CONTACTS LIST \n        CONTACTS LIST CHAT.VUE-->\n        <div class=\"chat__contacts\">\n          <h3 class=\"text-primary mb-5 px-4\">Contactos</h3>\n          <ul class=\"chat__contacts bordered-items\">\n            <li\n              class=\"cursor-pointer\"\n              v-for=\"contact in contacts\"\n              :key=\"contact.uid\"\n              @click=\"updateActiveChatUser(contact.uid)\"\n            >\n              <chat-contact :contact=\"contact\"> </chat-contact>\n            </li>\n          </ul>\n        </div>\n      </component>\n    </vs-sidebar>\n\n    <!-- RIGHT COLUMN \n    RIGHT COLUMN CHAT.VUE-->\n    <div\n      class=\"chat__bg no-scroll-content chat-content-area border border-solid d-theme-border-grey-light border-t-0 border-r-0 border-b-0\"\n      :class=\"{\n        'sidebar-spacer--wide': clickNotClose,\n        'flex items-center justify-center': activeChatUser === null,\n      }\"\n    >\n      <template v-if=\"activeChatUser\">\n        <div class=\"chat__navbar\">\n          <chat-navbar\n            :isSidebarCollapsed=\"!clickNotClose\"\n            :user-id=\"activeChatUser\"\n            :isPinnedProp=\"isChatPinned\"\n            @openContactsSidebar=\"toggleChatSidebar(true)\"\n            @showProfileSidebar=\"showProfileSidebar\"\n            @toggleIsChatPinned=\"toggleIsChatPinned\"\n          ></chat-navbar>\n        </div>\n\n        <component\n          :is=\"scrollbarTag\"\n          class=\"chat-content-scroll-area border border-solid d-theme-border-grey-light\"\n          :settings=\"settings\"\n          ref=\"chatLogPS\"\n          :key=\"$vs.rtl\"\n        >\n          <div class=\"chat__log\" ref=\"chatLog\">\n            <chat-log :userId=\"activeChatUser\" v-if=\"activeChatUser\"></chat-log>\n          </div>\n        </component>\n\n        <div class=\"chat__input flex p-4 bg-white\">\n          <vs-input\n            class=\"flex-1\"\n            placeholder=\"Su Mensaje aqui\"\n            v-model=\"typedMessage\"\n            @keyup.enter=\"sendMsg\"\n          />\n\n          <vs-button\n            class=\"bg-primary-gradient ml-4\"\n            type=\"filled\"\n            @click=\"sendMsg\"\n            >Send</vs-button\n          >\n        </div>\n      </template>\n\n      <template v-else>\n        <div class=\"flex flex-col items-center\">\n          <feather-icon\n            icon=\"MessageSquareIcon\"\n            class=\"mb-4 bg-white p-8 shadow-md rounded-full\"\n            svgClasses=\"w-16 h-16\"\n          ></feather-icon>\n          <h4\n            class=\"py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\"\n            @click.stop=\"toggleChatSidebar(true)\"\n          >\n            Start Conversation\n          </h4>\n        </div>\n      </template>\n    </div>\n  </div>\n  <div v-else>\n    <div class=\"flex flex-col items-center\">\n      conctado2: {{ getChatconnect }}\n    </div>\n    <div class=\"flex flex-col items-center\">\n      <!--TOKEN CHAT:{{getChatconnect}}-->\n\n      <feather-icon\n        icon=\"MessageSquareIcon\"\n        class=\"mb-4 bg-white p-8 shadow-md rounded-full\"\n        svgClasses=\"w-16 h-16\"\n      ></feather-icon>\n      <h4\n        class=\"py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\"\n        @click.stop=\"recarga()\"\n      >\n        Start Conversation\n      </h4>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport { mapActions } from \"vuex\";\n\nimport ChatContact from \"./ChatContact.vue\";\nimport ChatLog from \"./ChatLog.vue\";\nimport ChatNavbar from \"./ChatNavbar.vue\";\nimport UserProfile from \"./UserProfile.vue\";\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\nimport moduleChat from \"@/store/chat/moduleChat.js\";\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\";\n\n//import io from 'socket.io-client';\nexport default {\n  created() {\n    // this.$store.commit('chat/MUTSETCURRENTCONTACT',5);\n    this.contactId = this.$route.params.contactId;\n    this.$store.commit(\"chat/MUTSETCURRENTCONTACT\", 0);\n\n    let vm = this;\n    setTimeout(function (store) {\n      vm.$store.commit(\"chat/MUTSETCURRENTCONTACT\", vm.contactId);\n    }, 2000);\n\n    let datos = {\n      NumEmpresa: this.getProfile[0].Empresa,\n      userid: this.getProfile[0].num_user,\n    };\n    // contactos\n    this.getfetContacts(datos);\n    this.getChatContacts(datos);\n    this.setSidebarWidth();\n  },\n\n  mounted() {\n    try {\n      this.$socket.connect();\n      this.$store.commit(\n        \"chat/MUTCHATCONNECT\",\n        \"No Conectado sus Mensajes No seran Entregados\"\n      );\n\n      const payload = {\n        NumEmpresa: this.getProfile[0].Empresa,\n        username: this.getProfile[0].Username,\n        id: this.getProfile[0].num_user,\n        msg: this.mensajeConectado,\n      };\n\n      this.$socket.emit(\"TEST_CONNECTION\", payload, function (response) {\n        console.log(\"se disparo el   collback de Conectado \", response);\n      });\n    } catch (error) {\n      console.log(\"en Chat.vue  en mounted catch\" + error);\n    }\n    this.typedMessage = \"\";\n  },\n\n  data() {\n    return {\n      tokenChat: \"\",\n      colorConectado: \"text-danger\",\n      mensajeConectado: \"Listo* Puede Chatear\",\n      contactId: \"0\",\n\n      chatMsg: {\n        msg: 1,\n      },\n      messages: [],\n      active: true,\n      isHidden: false,\n      searchContact: \"\",\n      activeProfileSidebar: false,\n      activeChatUser: 118,\n      userProfileId: -1,\n      typedMessage: \"\",\n      isChatPinned: false,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.7,\n      },\n      clickNotClose: true,\n      isChatSidebarActive: true,\n      isLoggedInUserProfileView: false,\n    };\n  },\n  watch: {\n    getChatconnect() {\n      if (this.getChatconnect == this.mensajeConectado)\n        this.colorConectado = \"text-success\";\n    },\n    chatMsg() {\n      console.log(\"mensaje\", this.chatMsg);\n      this.setMessage(this.chatMsg);\n    },\n\n    windowWidth() {\n      this.setSidebarWidth();\n    },\n    getProfile() {\n      console.log(\"cambio el profile CHAT LINEA 167 APROX\");\n      //  alert(\"profile cambio \");\n    },\n    getCurrentContact() {\n      if (this.getCurrentContact > 0) {\n        let usuariochat = this.getCurrentContact;\n        try {\n          usuariochat = parseInt(usuariochat, 10);\n        } catch (error) {}\n\n        this.updateActiveChatUser(usuariochat);\n      }\n\n      //  alert(\"profile cambio \");\n    },\n  },\n  computed: {\n    getChatconnect() {\n      return this.$store.state.chat.chatconnect;\n    },\n    getRecargar() {\n      return this.$store.state.recargar;\n    },\n    getCurrentContact() {\n      return this.$store.state.chat.currentContact;\n    },\n\n    getAppActiveUser() {\n      return this.$store.state.AppActiveUser;\n    },\n    getchats() {\n      return this.$store.state.chat.chats;\n    },\n    getProfile() {\n      return this.$store.state.dsoaLogin.profile;\n    },\n    // COMPONENTE DIVISOFT CHAT\n    getTokenChat() {\n      return this.$store.state.dsoaLogin.token;\n    },\n\n    chatLastMessaged() {\n      return (userId) => this.$store.getters[\"chat/chatLastMessaged\"](userId);\n    },\n    chatUnseenMessages() {\n      return (userId) => {\n        const unseenMsg = this.$store.getters[\"chat/chatUnseenMessages\"](\n          userId\n        );\n        if (unseenMsg) return unseenMsg;\n      };\n    },\n    activeUser() {\n      return this.$store.state.AppActiveUser;\n    },\n    getStatusColor() {\n      return (isActiveUser) => {\n        const userStatus = this.getUserStatus(isActiveUser);\n\n        if (userStatus === \"online\") {\n          return \"success\";\n        } else if (userStatus === \"do not disturb\") {\n          return \"danger\";\n        } else if (userStatus === \"away\") {\n          return \"warning\";\n        } else {\n          return \"grey\";\n        }\n      };\n    },\n    chatContacts() {\n      return this.$store.getters[\"chat/chatContacts\"];\n    },\n    contacts() {\n      return this.$store.getters[\"chat/contacts\"];\n    },\n\n    searchQuery: {\n      get() {\n        if (this.$store.state.chat.chatSearchQuery)\n          return this.$store.state.chat.chatSearchQuery;\n        else return \"\";\n      },\n      set(val) {\n        this.$store.dispatch(\"chat/setChatSearchQuery\", val);\n      },\n    },\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    isActiveChatUser() {\n      return (userId) => userId === this.activeChatUser;\n    },\n    windowWidth() {\n      return this.$store.state.windowWidth;\n    },\n  },\n  methods: {\n    recarga() {\n      this.$router.go(this.$router.currentRoute);\n    },\n    getUserStatus(isActiveUser) {\n      // return \"active\"\n      return isActiveUser\n        ? this.$store.state.AppActiveUser.status\n        : this.contacts[this.activeChatUser].status;\n    },\n    closeProfileSidebar(value) {\n      this.activeProfileSidebar = value;\n    },\n\n    updateActiveChatUser(contactId) {\n      //  this.$store.commit('chat/MUTSETCURRENTCONTACT',5);\n      this.contactId = 0;\n\n      try {\n        this.activeChatUser = parseInt(contactId, 10);\n      } catch (error) {\n        this.activeChatUser = contactId;\n      }\n\n      let datos = {\n        NumEmpresa: this.getProfile[0].Empresa,\n        userid: this.getProfile[0].num_user,\n        userSend: contactId,\n      };\n\n      this.getfetChats(datos);\n\n      if (this.$store.getters[\"chat/chatDataOfUser\"](this.activeChatUser)) {\n        this.$store.dispatch(\"chat/markSeenAllMessages\", contactId);\n      }\n      const chatData = this.$store.getters[\"chat/chatDataOfUser\"](\n        this.activeChatUser\n      );\n      if (chatData) this.isChatPinned = chatData.isPinned;\n      else this.isChatPinned = false;\n      this.toggleChatSidebar();\n      this.typedMessage = \"\";\n    },\n    showProfileSidebar(userId, openOnLeft = false) {\n      try {\n        this.userProfileId = parseInt(userId, 10);\n      } catch (error) {\n        this.userProfileId = userId;\n      }\n\n      this.isLoggedInUserProfileView = openOnLeft;\n      this.activeProfileSidebar = !this.activeProfileSidebar;\n    },\n\n    sendMsg() {\n      //alert(\"divisoft envieando MENSAJE\");\n      if (!this.typedMessage) return;\n      if (!this.activeChatUser) return;\n\n      const payload = {\n        NumEmpresa: this.getProfile[0].Empresa,\n        isPinned: this.isChatPinned,\n        username: this.getProfile[0].Username,\n        sendusernum: this.getProfile[0].num_user,\n\n        msg: {\n          textContent: this.typedMessage,\n          time: String(new Date()),\n          isSent: true,\n          isSeen: false,\n        },\n        id: this.activeChatUser,\n      };\n      //ADEMAR VER SI HAY COMUNICACION\n      console.log(\"enviando \", JSON.stringify(payload));\n\n      this.typedMessage = \"\";\n\n      // se lo manda al destinatrio\n\n      this.$socket.emit(\"SEND_MESSAGE\", payload, function (response) {\n        console.log(\"se disparo el  collback\", response);\n      });\n      // lo refresca en nuestro chat\n\n      this.$store.dispatch(\"chat/SENDCHATMESSAGE\", payload);\n\n      const scroll_el = this.$refs.chatLogPS.$el || this.$refs.chatLogPS;\n      scroll_el.scrollTop = this.$refs.chatLog.scrollHeight;\n    },\n\n    setMessage(data) {\n      this.$store.commit(\"chat/SEND_CHAT_MESSAGE\", data);\n    },\n\n    toggleIsChatPinned(value) {\n      this.isChatPinned = value;\n    },\n    setSidebarWidth() {\n      if (this.windowWidth < 1200) {\n        this.isChatSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isChatSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleChatSidebar(value = false) {\n      if (!value && this.clickNotClose) return;\n      this.isChatSidebarActive = value;\n    },\n\n    getfetContacts(datos) {\n      this.$store.dispatch(\"chat/fetchContacts\", datos);\n      return 1;\n    },\n\n    getfetChats(datos) {\n      this.$store.dispatch(\"chat/fetchChats\", datos);\n      return 1;\n    },\n    getChatContacts(datos) {\n      this.$store.dispatch(\"chat/fetchChatContacts\", datos);\n      return 1;\n    },\n  },\n  components: {\n    VuePerfectScrollbar,\n    ChatContact,\n    UserProfile,\n    ChatNavbar,\n    ChatLog,\n  },\n\n  /* beforeDestroy() {\n         this.$store.unregisterModule('chat')\n     }*/\n};\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/apps/chat.scss\";\n</style>\n"],"sourceRoot":"src/views/apps/chat"}]}