{"remainingRequest":"D:\\proyetos2020vue\\v1.3\\node_modules\\babel-loader\\lib\\index.js!D:\\proyetos2020vue\\v1.3\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\proyetos2020vue\\v1.3\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\proyetos2020vue\\v1.3\\src\\divisoft\\inputComponent\\BaseinputDecimal.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\proyetos2020vue\\v1.3\\src\\divisoft\\inputComponent\\BaseinputDecimal.vue","mtime":1600738956039},{"path":"D:\\proyetos2020vue\\v1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\v1.3\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\v1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\v1.3\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.min-safe-integer\";\nimport \"core-js/modules/es6.number.max-safe-integer\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport accounting from 'accounting-js';\nexport default {\n  name: 'VueNumeric',\n  props: {\n    label: {\n      type: String,\n      required: true\n    },\n\n    /**\r\n     * Currency symbol.\r\n     */\n    currency: {\n      type: String,\n      default: '',\n      required: false\n    },\n\n    /**\r\n     * Maximum value allowed.\r\n     */\n    max: {\n      type: [Number, String],\n      default: Number.MAX_SAFE_INTEGER || 9007199254740991,\n      required: false\n    },\n\n    /**\r\n     * Minimum value allowed.\r\n     */\n    min: {\n      type: [Number, String],\n      default: Number.MIN_SAFE_INTEGER || -9007199254740991,\n      required: false\n    },\n\n    /**\r\n     * Enable/Disable minus value.\r\n     */\n    minus: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n\n    /**\r\n     * Value when the input is empty\r\n     * DEFAULT VALUE\r\n     */\n    emptyValue: {\n      type: [Number, String],\n      default: '',\n      required: false\n    },\n\n    /**\r\n     * Number of decimals.\r\n     * Decimals symbol are the opposite of separator symbol.\r\n     */\n    precision: {\n      type: [Number, String],\n      default: 0,\n      required: false\n    },\n\n    /**\r\n     * Thousand separator type.\r\n     * Separator props accept either . or , (default).\r\n     */\n    separator: {\n      type: String,\n      default: '.',\n      required: false\n    },\n\n    /**\r\n     * Forced thousand separator.\r\n     * Accepts any string.\r\n     */\n    thousandSeparator: {\n      default: ',',\n      required: false,\n      type: String\n    },\n\n    /**\r\n     * Forced decimal separator.\r\n     * Accepts any string.\r\n     */\n    decimalSeparator: {\n      default: '.',\n      required: false,\n      type: String\n    },\n\n    /**\r\n      * The output type used for v-model.\r\n      * It can either be String or Number (default).\r\n      */\n    outputType: {\n      required: false,\n      type: String,\n      default: 'Number'\n    },\n\n    /**\r\n     * v-model value.\r\n     */\n    value: {\n      type: Number,\n      default: 0,\n      required: true\n    },\n\n    /**\r\n     * Hide input and show value in text only.\r\n     */\n    readOnly: {\n      type: Boolean,\n      default: false,\n      required: false\n    },\n\n    /**\r\n     * Class for the span tag when readOnly props is true.\r\n     */\n    readOnlyClass: {\n      type: String,\n      default: '',\n      required: false\n    },\n\n    /**\r\n     * Position of currency symbol\r\n     * Symbol position props accept either 'suffix' or 'prefix' (default).\r\n     */\n    currencySymbolPosition: {\n      type: String,\n      default: 'prefix',\n      required: false\n    }\n  },\n  data: function data() {\n    return {\n      amount: ''\n    };\n  },\n  computed: {\n    /**\r\n     * Number type of formatted value.\r\n     * @return {Number}\r\n     */\n    amountNumber: function amountNumber() {\n      return this.unformat(this.amount);\n    },\n\n    /**\r\n     * Number type of value props.\r\n     * @return {Number}\r\n     */\n    valueNumber: function valueNumber() {\n      return this.unformat(this.value);\n    },\n\n    /**\r\n     * Define decimal separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\n    decimalSeparatorSymbol: function decimalSeparatorSymbol() {\n      if (typeof this.decimalSeparator !== 'undefined') return this.decimalSeparator;\n      if (this.separator === ',') return '.';\n      return ',';\n    },\n\n    /**\r\n     * Define thousand separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\n    thousandSeparatorSymbol: function thousandSeparatorSymbol() {\n      if (typeof this.thousandSeparator !== 'undefined') return this.thousandSeparator;\n      if (this.separator === '.') return '.';\n      if (this.separator === 'space') return ' ';\n      return ',';\n    },\n\n    /**\r\n     * Define format position for currency symbol and value.\r\n     * @return {String} format\r\n     */\n    symbolPosition: function symbolPosition() {\n      if (!this.currency) return '%v';\n      return this.currencySymbolPosition === 'suffix' ? '%v %s' : '%s %v';\n    }\n  },\n  watch: {\n    /**\r\n     * Watch for value change from other input with same v-model.\r\n     * @param {Number} newValue\r\n     */\n    valueNumber: function valueNumber(newValue) {\n      if (this.$refs.numeric !== document.activeElement) {\n        this.amount = this.format(newValue);\n      }\n    },\n\n    /**\r\n     * When readOnly is true, replace the span tag class.\r\n     * @param {Boolean} newValue\r\n     * @param {Boolean} oldValue\r\n     */\n    readOnly: function readOnly(newValue, oldValue) {\n      var _this = this;\n\n      if (oldValue === false && newValue === true) {\n        this.$nextTick(function () {\n          _this.$refs.readOnly.className = _this.readOnlyClass;\n        });\n      }\n    },\n\n    /**\r\n     * Immediately reflect separator changes\r\n     */\n    separator: function separator() {\n      this.process(this.valueNumber);\n      this.amount = this.format(this.valueNumber);\n    },\n\n    /**\r\n     * Immediately reflect currency changes\r\n     */\n    currency: function currency() {\n      this.process(this.valueNumber);\n      this.amount = this.format(this.valueNumber);\n    },\n\n    /**\r\n     * Immediately reflect precision changes\r\n     */\n    precision: function precision() {\n      this.process(this.valueNumber);\n      this.amount = this.format(this.valueNumber);\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    // Set default value props when label undefined.\n    if (!this.label) {\n      this.process(this.valueNumber);\n      this.amount = this.format(this.valueNumber); // In case of delayed props value.\n\n      setTimeout(function () {\n        _this2.process(_this2.valueNumber);\n\n        _this2.amount = _this2.format(_this2.valueNumber);\n      }, 500);\n    } // Set read-only span element's class\n\n\n    if (this.readOnly) this.$refs.readOnly.className = this.readOnlyClass;\n  },\n  methods: {\n    /**\r\n     * Handle blur event.\r\n     * @param {Object} e\r\n     */\n    onBlurHandler: function onBlurHandler(e) {\n      this.$emit('blur', e);\n      this.amount = this.format(this.valueNumber);\n    },\n\n    /**\r\n     * Handle focus event.\r\n     * @param {Object} e\r\n     */\n    onFocusHandler: function onFocusHandler(e) {\n      this.$emit('focus', e);\n\n      if (this.valueNumber === 0) {\n        this.amount = null;\n      } else {\n        this.amount = accounting.formatMoney(this.valueNumber, {\n          symbol: '',\n          format: '%v',\n          thousand: '',\n          decimal: this.decimalSeparatorSymbol,\n          precision: Number(this.precision)\n        });\n      }\n    },\n\n    /**\r\n     * Handle input event.\r\n     */\n    onInputHandler: function onInputHandler() {\n      this.process(this.amountNumber);\n    },\n\n    /**\r\n     * Validate value before update the component.\r\n     * @param {Number} value\r\n     */\n    process: function process(value) {\n      if (value >= this.max) this.update(this.max);\n      if (value <= this.min) this.update(this.min);\n      if (value > this.min && value < this.max) this.update(value);\n      if (!this.minus && value < 0) this.min >= 0 ? this.update(this.min) : this.update(0);\n    },\n\n    /**\r\n     * Update parent component model value.\r\n     * @param {Number} value\r\n     */\n    update: function update(value) {\n      var fixedValue = accounting.toFixed(value, this.precision);\n      var output = this.outputType.toLowerCase() === 'string' ? fixedValue : Number(fixedValue);\n      this.$emit('input', output);\n    },\n\n    /**\r\n     * Format value using symbol and separator.\r\n     * @param {Number} value\r\n     * @return {String}\r\n     */\n    format: function format(value) {\n      return accounting.formatMoney(value, {\n        symbol: this.currency,\n        format: this.symbolPosition,\n        precision: Number(this.precision),\n        decimal: this.decimalSeparatorSymbol,\n        thousand: this.thousandSeparatorSymbol\n      });\n    },\n\n    /**\r\n     * Remove symbol and separator.\r\n     * @param {Number} value\r\n     * @return {Number}\r\n     */\n    unformat: function unformat(value) {\n      var toUnformat = typeof value === 'string' && value === '' ? this.emptyValue : value;\n      return accounting.unformat(toUnformat, this.decimalSeparatorSymbol);\n    }\n  }\n};",{"version":3,"sources":["BaseinputDecimal.vue"],"names":[],"mappings":"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","sourcesContent":[" <template>\r\n\r\n <div class=\"centerx\"> \r\n    <label>{{ label }}</label>  \r\n  <input\r\n    class=\"vs-inputx vs-input--input large hasValue\"\r\n    style=\"border: 1px solid rgba(0, 0, 0, 0.2);\"\r\n    :placeholder=\"label\"\r\n    @blur=\"onBlurHandler\"\r\n    @input=\"onInputHandler\"\r\n    @focus=\"onFocusHandler\"\r\n    ref=\"numeric\"\r\n     v-model=\"amount\"\r\n    v-if=\"!readOnly\"\r\n  />\r\n   \r\n   \r\n  <span\r\n    v-else\r\n    ref=\"readOnly\"\r\n  >{{ amount }}</span>\r\n </div>\r\n</template>\r\n\r\n<script>\r\n \r\n  \r\nimport accounting from 'accounting-js'\r\nexport default {\r\n  name: 'VueNumeric',\r\n  props: {\r\n \r\n      label: {\r\n        type: String,\r\n        required: true\r\n      },\r\n     \r\n    /**\r\n     * Currency symbol.\r\n     */\r\n    currency: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Maximum value allowed.\r\n     */\r\n    max: {\r\n      type: [Number, String],\r\n      default: Number.MAX_SAFE_INTEGER || 9007199254740991,\r\n      required: false,\r\n    },\r\n    /**\r\n     * Minimum value allowed.\r\n     */\r\n    min: {\r\n      type: [Number, String],\r\n      default: Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n      required: false\r\n    },\r\n    /**\r\n     * Enable/Disable minus value.\r\n     */\r\n    minus: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n     \r\n    /**\r\n     * Value when the input is empty\r\n     * DEFAULT VALUE\r\n     */\r\n    emptyValue: {\r\n      type: [Number, String],\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Number of decimals.\r\n     * Decimals symbol are the opposite of separator symbol.\r\n     */\r\n    precision: {\r\n      type: [Number, String],\r\n      default: 0,\r\n      required: false\r\n    },\r\n    /**\r\n     * Thousand separator type.\r\n     * Separator props accept either . or , (default).\r\n     */\r\n    separator: {\r\n      type: String,\r\n      default: '.',\r\n      required: false\r\n    },\r\n    /**\r\n     * Forced thousand separator.\r\n     * Accepts any string.\r\n     */\r\n    thousandSeparator: {\r\n      default: ',',\r\n      required: false,\r\n      type: String\r\n    },\r\n    /**\r\n     * Forced decimal separator.\r\n     * Accepts any string.\r\n     */\r\n    decimalSeparator: {\r\n      default: '.',\r\n      required: false,\r\n      type: String\r\n    },\r\n    /**\r\n      * The output type used for v-model.\r\n      * It can either be String or Number (default).\r\n      */\r\n    outputType: {\r\n      required: false,\r\n        type: String,\r\n        default: 'Number'\r\n    },\r\n    /**\r\n     * v-model value.\r\n     */\r\n    value: {\r\n      type: Number,\r\n      default: 0,\r\n      required: true\r\n    },\r\n    /**\r\n     * Hide input and show value in text only.\r\n     */\r\n    readOnly: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n    /**\r\n     * Class for the span tag when readOnly props is true.\r\n     */\r\n    readOnlyClass: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Position of currency symbol\r\n     * Symbol position props accept either 'suffix' or 'prefix' (default).\r\n     */\r\n    currencySymbolPosition: {\r\n      type: String,\r\n      default: 'prefix',\r\n      required: false\r\n    }\r\n  },\r\n  data: () => ({\r\n    amount: ''\r\n  }),\r\n  computed: {\r\n    /**\r\n     * Number type of formatted value.\r\n     * @return {Number}\r\n     */\r\n    amountNumber () {\r\n      return this.unformat(this.amount)\r\n    },\r\n    /**\r\n     * Number type of value props.\r\n     * @return {Number}\r\n     */\r\n    valueNumber () {\r\n      return this.unformat(this.value)\r\n    },\r\n    /**\r\n     * Define decimal separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\r\n    decimalSeparatorSymbol () {\r\n      if (typeof this.decimalSeparator !== 'undefined') return this.decimalSeparator\r\n      if (this.separator === ',') return '.'\r\n      return ','\r\n    },\r\n    /**\r\n     * Define thousand separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\r\n    thousandSeparatorSymbol () {\r\n      if (typeof this.thousandSeparator !== 'undefined') return this.thousandSeparator\r\n      if (this.separator === '.') return '.'\r\n      if (this.separator === 'space') return ' '\r\n      return ','\r\n    },\r\n    /**\r\n     * Define format position for currency symbol and value.\r\n     * @return {String} format\r\n     */\r\n    symbolPosition () {\r\n      if (!this.currency) return '%v'\r\n      return this.currencySymbolPosition === 'suffix' ? '%v %s' : '%s %v'\r\n    }\r\n  },\r\n  watch: {\r\n    /**\r\n     * Watch for value change from other input with same v-model.\r\n     * @param {Number} newValue\r\n     */\r\n    valueNumber (newValue) {\r\n   \r\n      if (this.$refs.numeric !== document.activeElement) {\r\n        this.amount = this.format(newValue)\r\n      }\r\n    },\r\n    /**\r\n     * When readOnly is true, replace the span tag class.\r\n     * @param {Boolean} newValue\r\n     * @param {Boolean} oldValue\r\n     */\r\n    readOnly (newValue, oldValue) {\r\n      if (oldValue === false && newValue === true) {\r\n        this.$nextTick(() => {\r\n          this.$refs.readOnly.className = this.readOnlyClass\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * Immediately reflect separator changes\r\n     */\r\n    separator () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Immediately reflect currency changes\r\n     */\r\n    currency () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Immediately reflect precision changes\r\n     */\r\n    precision () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    }\r\n  },\r\n  mounted () {\r\n      \r\n    // Set default value props when label undefined.\r\n    if (!this.label) {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n      // In case of delayed props value.\r\n      setTimeout(() => {\r\n        this.process(this.valueNumber)\r\n        this.amount = this.format(this.valueNumber)\r\n      }, 500)\r\n    }\r\n    // Set read-only span element's class\r\n    if (this.readOnly) this.$refs.readOnly.className = this.readOnlyClass\r\n  },\r\n  methods: {\r\n    /**\r\n     * Handle blur event.\r\n     * @param {Object} e\r\n     */\r\n    onBlurHandler (e) {\r\n      this.$emit('blur', e)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Handle focus event.\r\n     * @param {Object} e\r\n     */\r\n    onFocusHandler (e) {\r\n      this.$emit('focus', e)\r\n      if (this.valueNumber === 0) {\r\n        this.amount = null\r\n      } else {\r\n        this.amount = accounting.formatMoney(this.valueNumber, {\r\n          symbol: '',\r\n          format: '%v',\r\n          thousand: '',\r\n          decimal: this.decimalSeparatorSymbol,\r\n          precision: Number(this.precision)\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * Handle input event.\r\n     */\r\n    onInputHandler () {\r\n      this.process(this.amountNumber)\r\n    },\r\n    /**\r\n     * Validate value before update the component.\r\n     * @param {Number} value\r\n     */\r\n    process (value) {\r\n      if (value >= this.max) this.update(this.max)\r\n      if (value <= this.min) this.update(this.min)\r\n      if (value > this.min && value < this.max) this.update(value)\r\n      if (!this.minus && value < 0) this.min >= 0 ? this.update(this.min) : this.update(0)\r\n    },\r\n    /**\r\n     * Update parent component model value.\r\n     * @param {Number} value\r\n     */\r\n    update (value) {\r\n      const fixedValue = accounting.toFixed(value, this.precision)\r\n      const output = this.outputType.toLowerCase() === 'string' ? fixedValue : Number(fixedValue)\r\n      this.$emit('input', output)\r\n    },\r\n    /**\r\n     * Format value using symbol and separator.\r\n     * @param {Number} value\r\n     * @return {String}\r\n     */\r\n    format (value) {\r\n      return accounting.formatMoney(value, {\r\n        symbol: this.currency,\r\n        format: this.symbolPosition,\r\n        precision: Number(this.precision),\r\n        decimal: this.decimalSeparatorSymbol,\r\n        thousand: this.thousandSeparatorSymbol\r\n      })\r\n    },\r\n    /**\r\n     * Remove symbol and separator.\r\n     * @param {Number} value\r\n     * @return {Number}\r\n     */\r\n    unformat (value) {\r\n      const toUnformat = typeof value === 'string' && value === '' ? this.emptyValue : value\r\n      return accounting.unformat(toUnformat, this.decimalSeparatorSymbol)\r\n    },\r\n    \r\n      \r\n\r\n  }\r\n}\r\n</script>"],"sourceRoot":"src/divisoft/inputComponent"}]}