{"remainingRequest":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\store\\chat\\moduleChatMutations.js","dependencies":[{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\store\\chat\\moduleChatMutations.js","mtime":1604601625213},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604601561321},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\babel-loader\\lib\\index.js","mtime":1604601556483}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.for-each\";\n\n/*=========================================================================================\r\n  File Name: moduleChatMutations.js\r\n  Description: Chat Module Mutations\r\n  ----------------------------------------------------------------------------------------\r\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n  Author: Pixinvent\r\n  Author URL: http://www.themeforest.net/user/pixinvent\r\n==========================================================================================*/\nimport Vue from 'vue';\nimport { set } from \"../../utils/vuex\";\nexport default {\n  UPDATE_ABOUT_CHAT: function UPDATE_ABOUT_CHAT(state, obj) {\n    obj.rootState.AppActiveUser.about = obj.value;\n  },\n  UPDATE_STATUS_CHAT: function UPDATE_STATUS_CHAT(state, obj) {\n    obj.rootState.AppActiveUser.status = obj.value;\n  },\n  // API AFTER\n  MUTCHATCONNECT: function MUTCHATCONNECT(state, data) {\n    state.chatconnect = data;\n  },\n  MUTSETCURRENTCONTACT: function MUTSETCURRENTCONTACT(state, currentChat) {\n    state.currentContact = currentChat;\n  },\n  SEND_CHAT_MESSAGE: function SEND_CHAT_MESSAGE(state, payload) {\n    console.log(\"mensajes \", JSON.stringify(payload));\n\n    if (payload.chatData) {\n      // If there's already chat. Push msg to existing chat\n      state.chats.msg.push(payload.msg);\n    } else {\n      // Create New chat and add msg\n      var chatId = payload.id;\n      Vue.set(state.chats, [chatId], {\n        isPinned: payload.isPinned,\n        msg: [payload.msg]\n      });\n    }\n  },\n  UPDATE_CONTACTS: function UPDATE_CONTACTS(state, contacts) {\n    state.contacts = contacts;\n  },\n  UPDATE_CHAT_CONTACTS: function UPDATE_CHAT_CONTACTS(state, chatContacts) {\n    state.chatContacts = chatContacts;\n  },\n  UPDATE_CHATS: function UPDATE_CHATS(state, chats) {\n    state.chats = chats;\n  },\n  SET_CHAT_SEARCH_QUERY: function SET_CHAT_SEARCH_QUERY(state, query) {\n    state.chatSearchQuery = query;\n  },\n  MARK_SEEN_ALL_MESSAGES: function MARK_SEEN_ALL_MESSAGES(state, payload) {\n    payload.chatData.msg.forEach(function (msg) {\n      msg.isSeen = true;\n    });\n  },\n  TOGGLE_IS_PINNED: function TOGGLE_IS_PINNED(state, payload) {\n    state.chats[Object.keys(state.chats).find(function (key) {\n      return Number(key) === payload.id;\n    })].isPinned = payload.value;\n  },\n  UPDATE_CONTACTSDIVI: function UPDATE_CONTACTSDIVI(state, contacts) {\n    state.contacts = state.contacts;\n  },\n  /// traida de chat2  /////////////////////////////////////////////\n  setUser: function setUser(state, data) {\n    state.token = data.token;\n  },\n  logout: function logout(state) {\n    state.token = null;\n  },\n  /// CHAT MUTATION CHAT MUTATION \n  setProcessing: set('processing'),\n  setNotification: set('notification'),\n  setPrivateNotification: set('privateNotification'),\n  SOCKET_MUTATION_USER_JOINED: function SOCKET_MUTATION_USER_JOINED(state, data) {\n    state.notification = {\n      show: true,\n      message: data.message,\n      color: \"info\"\n    };\n  },\n  SOCKET_MUTATION_USER_LEAVE_ROOM: function SOCKET_MUTATION_USER_LEAVE_ROOM(state, data) {\n    state.notification = {\n      show: true,\n      message: data.message,\n      color: \"warning\"\n    };\n  },\n  SOCKET_MUTATION_NEW_ROOM_CREATED: function SOCKET_MUTATION_NEW_ROOM_CREATED(state, data) {\n    var room = data.room;\n    state.notification = {\n      show: true,\n      message: \"El usuario \".concat(room.owner.username, \" ha creado la sala \").concat(room.name),\n      color: \"success\"\n    };\n  },\n  SOCKET_MUTATION_PRIVATE_MESSAGE: function SOCKET_MUTATION_PRIVATE_MESSAGE(state, payload2) {\n    //alert(\"PRIVATE MESSAGES2222\");\n    console.log(\"datos que llego \", payload2); //let payload = payload2.data;\n\n    var payload = [];\n\n    if (payload2.origen == 1) {\n      payload = payload2;\n      console.log(\"local PLAY  \", JSON.stringify(payload.chatData));\n    } else {\n      payload = payload2.data; //console.log(\"lo que llego\", JSON.stringify(payload))\n\n      payload.chatData = state.chats; //Busca todo no filtra ya\n      // console.log(\"SOCKET  play CHATDADA \", JSON.stringify(payload.chatData))\n    } //payload.chatData = getters.chatDataOfUser(payload.id);\n    //ES LO QUE HACE commit('SEND_CHAT_MESSAGE', payload);\n    // si ya tiene mensajes lo agrega\n\n\n    if (payload.chatData) {\n      // If there's already chat. Push msg to existing chat \n      // console.log(\"Entro aqui SOCKET \", JSON.stringify(payload.chatData));\n      state.chats.msg.push(payload.msg); //state.chats[Object.keys(state.chats).find(key => Number(key) === payload.id)].msg.push(payload.msg)\n    } else {\n      // Create New chat and add msg\n      var chatId = payload.id;\n      Vue.set(state.chats, [chatId], {\n        isPinned: payload.isPinned,\n        msg: [payload.msg]\n      });\n    }\n\n    state.chats.mensajeGeneral = {\n      title: 'Chat Divisoft',\n      time: 6000,\n      text: 'mensaje',\n      color: 'success'\n    };\n  },\n  SOCKET_MUTATION_USER_JOINED_TO_PRIVATE_ROOM: function SOCKET_MUTATION_USER_JOINED_TO_PRIVATE_ROOM(state, message) {\n    console.log(\"lado del Cliente destinoo\", message);\n    state.notification = {\n      show: true,\n      message: message,\n      color: \"success\"\n    };\n  },\n  SOCKET_MUTATION_ESTA_CONECTADO: function SOCKET_MUTATION_ESTA_CONECTADO(state, mensaje) {\n    //  console.log(\"llego de conectadollego de conectadollego de conectadollego de conectadollego de conectadollego de conectado llego de conectado\",\n    //     JSON.stringify(mensaje));\n    state.chatconnect = mensaje.data.msg;\n  }\n};",{"version":3,"sources":["C:/Users/Renan Galvan/Desktop/sincronizados_git/tavo_nov_2020/tavo/src/store/chat/moduleChatMutations.js"],"names":["Vue","set","UPDATE_ABOUT_CHAT","state","obj","rootState","AppActiveUser","about","value","UPDATE_STATUS_CHAT","status","MUTCHATCONNECT","data","chatconnect","MUTSETCURRENTCONTACT","currentChat","currentContact","SEND_CHAT_MESSAGE","payload","console","log","JSON","stringify","chatData","chats","msg","push","chatId","id","isPinned","UPDATE_CONTACTS","contacts","UPDATE_CHAT_CONTACTS","chatContacts","UPDATE_CHATS","SET_CHAT_SEARCH_QUERY","query","chatSearchQuery","MARK_SEEN_ALL_MESSAGES","forEach","isSeen","TOGGLE_IS_PINNED","Object","keys","find","key","Number","UPDATE_CONTACTSDIVI","setUser","token","logout","setProcessing","setNotification","setPrivateNotification","SOCKET_MUTATION_USER_JOINED","notification","show","message","color","SOCKET_MUTATION_USER_LEAVE_ROOM","SOCKET_MUTATION_NEW_ROOM_CREATED","room","owner","username","name","SOCKET_MUTATION_PRIVATE_MESSAGE","payload2","origen","mensajeGeneral","title","time","text","SOCKET_MUTATION_USER_JOINED_TO_PRIVATE_ROOM","SOCKET_MUTATION_ESTA_CONECTADO","mensaje"],"mappings":"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","sourcesContent":["/*=========================================================================================\r\n  File Name: moduleChatMutations.js\r\n  Description: Chat Module Mutations\r\n  ----------------------------------------------------------------------------------------\r\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n  Author: Pixinvent\r\n  Author URL: http://www.themeforest.net/user/pixinvent\r\n==========================================================================================*/\r\n\r\n\r\nimport Vue from 'vue'\r\nimport {set } from '../../utils/vuex'\r\n\r\nexport default {\r\n    UPDATE_ABOUT_CHAT(state, obj) {\r\n        obj.rootState.AppActiveUser.about = obj.value\r\n    },\r\n    UPDATE_STATUS_CHAT(state, obj) {\r\n        obj.rootState.AppActiveUser.status = obj.value\r\n    },\r\n\r\n    // API AFTER\r\n\r\n    MUTCHATCONNECT(state, data) {\r\n        state.chatconnect = data;\r\n    },\r\n\r\n    MUTSETCURRENTCONTACT(state, currentChat) {\r\n\r\n        state.currentContact = currentChat;\r\n\r\n    },\r\n\r\n    SEND_CHAT_MESSAGE(state, payload) {\r\n\r\n        console.log(\"mensajes \", JSON.stringify(payload))\r\n\r\n        if (payload.chatData) {\r\n            // If there's already chat. Push msg to existing chat\r\n            state.chats.msg.push(payload.msg)\r\n\r\n        } else {\r\n            // Create New chat and add msg\r\n            const chatId = payload.id\r\n            Vue.set(state.chats, [chatId], {\r\n                isPinned: payload.isPinned,\r\n                msg: [payload.msg]\r\n            })\r\n        }\r\n    },\r\n\r\n\r\n    UPDATE_CONTACTS(state, contacts) {\r\n\r\n        state.contacts = contacts\r\n\r\n    },\r\n    UPDATE_CHAT_CONTACTS(state, chatContacts) {\r\n        state.chatContacts = chatContacts\r\n    },\r\n    UPDATE_CHATS(state, chats) {\r\n        state.chats = chats\r\n    },\r\n    SET_CHAT_SEARCH_QUERY(state, query) {\r\n        state.chatSearchQuery = query\r\n    },\r\n    MARK_SEEN_ALL_MESSAGES(state, payload) {\r\n        payload.chatData.msg.forEach((msg) => {\r\n            msg.isSeen = true\r\n        })\r\n    },\r\n    TOGGLE_IS_PINNED(state, payload) {\r\n        state.chats[Object.keys(state.chats).find(key => Number(key) === payload.id)].isPinned = payload.value\r\n    },\r\n\r\n\r\n    UPDATE_CONTACTSDIVI(state, contacts) {\r\n        state.contacts = state.contacts\r\n    },\r\n\r\n\r\n    /// traida de chat2  /////////////////////////////////////////////\r\n    setUser(state, data) {\r\n        state.token = data.token;\r\n    },\r\n    logout(state) {\r\n        state.token = null;\r\n    },\r\n\r\n    /// CHAT MUTATION CHAT MUTATION \r\n\r\n    setProcessing: set('processing'),\r\n    setNotification: set('notification'),\r\n    setPrivateNotification: set('privateNotification'),\r\n    SOCKET_MUTATION_USER_JOINED(state, data) {\r\n        state.notification = {\r\n            show: true,\r\n            message: data.message,\r\n            color: \"info\"\r\n        }\r\n    },\r\n    SOCKET_MUTATION_USER_LEAVE_ROOM(state, data) {\r\n        state.notification = {\r\n            show: true,\r\n            message: data.message,\r\n            color: \"warning\"\r\n        }\r\n    },\r\n\r\n    SOCKET_MUTATION_NEW_ROOM_CREATED(state, data) {\r\n        const room = data.room;\r\n        state.notification = {\r\n            show: true,\r\n            message: `El usuario ${room.owner.username} ha creado la sala ${room.name}`,\r\n            color: \"success\"\r\n        }\r\n    },\r\n\r\n    SOCKET_MUTATION_PRIVATE_MESSAGE(state, payload2) {\r\n\r\n        //alert(\"PRIVATE MESSAGES2222\");\r\n        console.log(\"datos que llego \", payload2)\r\n\r\n        //let payload = payload2.data;\r\n        let payload = [];\r\n\r\n        if (payload2.origen == 1) {\r\n            payload = payload2;\r\n            console.log(\"local PLAY  \", JSON.stringify(payload.chatData))\r\n        } else {\r\n            payload = payload2.data;\r\n            //console.log(\"lo que llego\", JSON.stringify(payload))\r\n            payload.chatData = state.chats; //Busca todo no filtra ya\r\n            // console.log(\"SOCKET  play CHATDADA \", JSON.stringify(payload.chatData))\r\n\r\n        }\r\n\r\n\r\n        //payload.chatData = getters.chatDataOfUser(payload.id);\r\n\r\n        //ES LO QUE HACE commit('SEND_CHAT_MESSAGE', payload);\r\n\r\n        // si ya tiene mensajes lo agrega\r\n        if (payload.chatData) {\r\n            // If there's already chat. Push msg to existing chat \r\n            // console.log(\"Entro aqui SOCKET \", JSON.stringify(payload.chatData));\r\n\r\n            state.chats.msg.push(payload.msg)\r\n                //state.chats[Object.keys(state.chats).find(key => Number(key) === payload.id)].msg.push(payload.msg)\r\n\r\n        } else {\r\n            // Create New chat and add msg\r\n            const chatId = payload.id\r\n\r\n            Vue.set(state.chats, [chatId], {\r\n                isPinned: payload.isPinned,\r\n                msg: [payload.msg]\r\n            })\r\n        }\r\n\r\n        state.chats.mensajeGeneral = {\r\n            title: 'Chat Divisoft',\r\n            time: 6000,\r\n            text: 'mensaje',\r\n            color: 'success'\r\n        }\r\n\r\n    },\r\n    SOCKET_MUTATION_USER_JOINED_TO_PRIVATE_ROOM(state, message) {\r\n\r\n        console.log(\"lado del Cliente destinoo\", message)\r\n        state.notification = {\r\n            show: true,\r\n            message,\r\n            color: \"success\"\r\n        }\r\n    },\r\n\r\n    SOCKET_MUTATION_ESTA_CONECTADO(state, mensaje) {\r\n        //  console.log(\"llego de conectadollego de conectadollego de conectadollego de conectadollego de conectadollego de conectado llego de conectado\",\r\n        //     JSON.stringify(mensaje));\r\n        state.chatconnect = mensaje.data.msg;\r\n\r\n\r\n    },\r\n\r\n\r\n\r\n}"]}]}