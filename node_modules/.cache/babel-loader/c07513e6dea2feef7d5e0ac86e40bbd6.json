{"remainingRequest":"C:\\proyetos2020vue\\v1.3\\node_modules\\babel-loader\\lib\\index.js!C:\\proyetos2020vue\\v1.3\\src\\store\\email\\moduleEmailActions.js","dependencies":[{"path":"C:\\proyetos2020vue\\v1.3\\src\\store\\email\\moduleEmailActions.js","mtime":1587848346494},{"path":"C:\\proyetos2020vue\\v1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\proyetos2020vue\\v1.3\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.filter\";\n\n/*=========================================================================================\n  File Name: moduleEmailActions.js\n  Description: Email Module Actions\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n  Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n==========================================================================================*/\nimport axios from 'axios';\nexport default {\n  setEmailSearchQuery: function setEmailSearchQuery(_ref, query) {\n    var commit = _ref.commit;\n    commit('SET_EMAIL_SEARCH_QUERY', query);\n  },\n  // Fetch emails\n  fetchEmails: function fetchEmails(_ref2, payload) {\n    var commit = _ref2.commit;\n    return new Promise(function (resolve, reject) {\n      axios.get('/api/apps/email/mails', {\n        params: {\n          filter: payload.filter\n        }\n      }).then(function (response) {\n        commit('SET_MAILS', response.data);\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // Fetch Tags\n  fetchTags: function fetchTags(_ref3) {\n    var commit = _ref3.commit;\n    return new Promise(function (resolve, reject) {\n      axios.get('/api/apps/email/tags').then(function (response) {\n        console.log(\"respondio\", JSON.stringify(response.data));\n        commit('SET_TAGS', response.data);\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // Fetch Email Meta\n  fetchMeta: function fetchMeta(_ref4) {\n    var commit = _ref4.commit;\n    return new Promise(function (resolve, reject) {\n      axios.get('/api/apps/email/meta').then(function (response) {\n        console.log(\"respondio2  \", JSON.stringify(response.data));\n        commit('SET_META', response.data);\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // Move mails to another folder\n  moveMailsTo: function moveMailsTo(_ref5, payload) {\n    var commit = _ref5.commit;\n    return new Promise(function (resolve, reject) {\n      axios.post('/api/apps/email/move-mails', {\n        emailIds: payload.emailIds,\n        mailFolder: payload.to\n      }).then(function (response) {\n        console.log(\"respondio3 \", JSON.stringify(response.data));\n        commit('MOVE_MAILS_TO', payload);\n        commit('UPDATE_UNREAD_META_ON_MOVE', payload);\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // Update Mails label\n  updateLabels: function updateLabels(_ref6, payload) {\n    var commit = _ref6.commit;\n    return new Promise(function (resolve, reject) {\n      axios.post('/api/apps/email/update-labels', {\n        emailIds: payload.mails,\n        label: payload.label\n      }).then(function (response) {\n        console.log(\"respondio  4 \", JSON.stringify(response.data));\n        commit('UPDATE_LABELS', payload);\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  setLabels: function setLabels(_ref7, payload) {\n    var commit = _ref7.commit;\n    return new Promise(function (resolve, reject) {\n      axios.post('/api/apps/email/set-labels', {\n        mailId: payload.mailId,\n        labels: payload.labels\n      }).then(function (response) {\n        console.log(\"respondio 5 \", JSON.stringify(response.data));\n        commit('SET_LABELS', payload);\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // Set mails flag unread to true\n  setUnread: function setUnread(_ref8, payload) {\n    var commit = _ref8.commit;\n    return new Promise(function (resolve, reject) {\n      axios.post('/api/apps/email/mark-unread', {\n        emailIds: payload.emailIds,\n        unreadFlag: payload.unreadFlag\n      }).then(function (response) {\n        console.log(\"respondio 6 \", JSON.stringify(response.data));\n        commit('SET_UNREAD', payload); // Remove this if you are getting meta like us\n        // Use your own method to update email meta if you are fetching email meta\n\n        commit('UPDATE_UNREAD_META', payload);\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  },\n  // Toggle isStarred flag in mail\n  toggleIsMailStarred: function toggleIsMailStarred(_ref9, payload) {\n    var commit = _ref9.commit;\n    return new Promise(function (resolve, reject) {\n      axios.post('/api/apps/email/set-starred', {\n        mailId: payload.mailId,\n        value: payload.value\n      }).then(function (response) {\n        commit('TOGGLE_IS_MAIL_STARRED', payload);\n        resolve(response);\n      }).catch(function (error) {\n        reject(error);\n      });\n    });\n  }\n};",{"version":3,"sources":["C:/proyetos2020vue/v1.3/src/store/email/moduleEmailActions.js"],"names":["axios","setEmailSearchQuery","query","commit","fetchEmails","payload","Promise","resolve","reject","get","params","filter","then","response","data","catch","error","fetchTags","console","log","JSON","stringify","fetchMeta","moveMailsTo","post","emailIds","mailFolder","to","updateLabels","mails","label","setLabels","mailId","labels","setUnread","unreadFlag","toggleIsMailStarred","value"],"mappings":"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","sourcesContent":["/*=========================================================================================\n  File Name: moduleEmailActions.js\n  Description: Email Module Actions\n  ----------------------------------------------------------------------------------------\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n  Author: Pixinvent\n  Author URL: http://www.themeforest.net/user/pixinvent\n==========================================================================================*/\n\nimport axios from 'axios'\n\nexport default {\n    setEmailSearchQuery({ commit }, query) {\n        commit('SET_EMAIL_SEARCH_QUERY', query)\n    },\n\n    // Fetch emails\n    fetchEmails({ commit }, payload) {\n        return new Promise((resolve, reject) => {\n            axios.get('/api/apps/email/mails', { params: { filter: payload.filter } })\n                .then((response) => {\n                    commit('SET_MAILS', response.data)\n                    resolve(response)\n                })\n                .catch((error) => { reject(error) })\n        })\n    },\n\n    // Fetch Tags\n    fetchTags({ commit }) {\n        return new Promise((resolve, reject) => {\n            axios.get('/api/apps/email/tags')\n                .then((response) => {\n                    console.log(\"respondio\", JSON.stringify(response.data));\n                    commit('SET_TAGS', response.data)\n                    resolve(response)\n                })\n                .catch((error) => { reject(error) })\n        })\n    },\n\n    // Fetch Email Meta\n    fetchMeta({ commit }) {\n        return new Promise((resolve, reject) => {\n            axios.get('/api/apps/email/meta')\n                .then((response) => {\n                    console.log(\"respondio2  \", JSON.stringify(response.data));\n                    commit('SET_META', response.data)\n                    resolve(response)\n                })\n                .catch((error) => { reject(error) })\n        })\n    },\n\n    // Move mails to another folder\n    moveMailsTo({ commit }, payload) {\n        return new Promise((resolve, reject) => {\n            axios.post('/api/apps/email/move-mails', {\n                    emailIds: payload.emailIds,\n                    mailFolder: payload.to\n                })\n                .then((response) => {\n                    console.log(\"respondio3 \", JSON.stringify(response.data));\n                    commit('MOVE_MAILS_TO', payload)\n                    commit('UPDATE_UNREAD_META_ON_MOVE', payload)\n                    resolve(response)\n                })\n                .catch((error) => { reject(error) })\n        })\n    },\n\n    // Update Mails label\n    updateLabels({ commit }, payload) {\n        return new Promise((resolve, reject) => {\n            axios.post('/api/apps/email/update-labels', {\n                    emailIds: payload.mails,\n                    label: payload.label\n                })\n                .then((response) => {\n                    console.log(\"respondio  4 \", JSON.stringify(response.data));\n                    commit('UPDATE_LABELS', payload)\n                    resolve(response)\n                })\n                .catch((error) => { reject(error) })\n        })\n    },\n\n    setLabels({ commit }, payload) {\n        return new Promise((resolve, reject) => {\n            axios.post('/api/apps/email/set-labels', {\n                    mailId: payload.mailId,\n                    labels: payload.labels\n                })\n                .then((response) => {\n                    console.log(\"respondio 5 \", JSON.stringify(response.data));\n                    commit('SET_LABELS', payload)\n                    resolve(response)\n                })\n                .catch((error) => { reject(error) })\n        })\n    },\n\n    // Set mails flag unread to true\n    setUnread({ commit }, payload) {\n        return new Promise((resolve, reject) => {\n            axios.post('/api/apps/email/mark-unread', {\n                    emailIds: payload.emailIds,\n                    unreadFlag: payload.unreadFlag\n                })\n                .then((response) => {\n\n                    console.log(\"respondio 6 \", JSON.stringify(response.data));\n                    commit('SET_UNREAD', payload)\n\n                    // Remove this if you are getting meta like us\n                    // Use your own method to update email meta if you are fetching email meta\n                    commit('UPDATE_UNREAD_META', payload)\n                    resolve(response)\n                })\n                .catch((error) => { reject(error) })\n        })\n    },\n\n    // Toggle isStarred flag in mail\n    toggleIsMailStarred({ commit }, payload) {\n        return new Promise((resolve, reject) => {\n            axios.post('/api/apps/email/set-starred', {\n                    mailId: payload.mailId,\n                    value: payload.value\n                })\n                .then((response) => {\n                    commit('TOGGLE_IS_MAIL_STARRED', payload)\n                    resolve(response)\n                })\n                .catch((error) => { reject(error) })\n        })\n    }\n}"]}]}