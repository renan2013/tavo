{"remainingRequest":"C:\\proyetos2020vue\\v1.3\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\proyetos2020vue\\v1.3\\src\\divisoft\\gonow\\administracion\\ob2501\\grid2501.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\proyetos2020vue\\v1.3\\src\\divisoft\\gonow\\administracion\\ob2501\\grid2501.vue","mtime":1588110650649},{"path":"C:\\proyetos2020vue\\v1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\proyetos2020vue\\v1.3\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\proyetos2020vue\\v1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\proyetos2020vue\\v1.3\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// importa librerias que necesita\n\nimport { AgGridVue } from \"ag-grid-vue\";\nimport { mapState } from \"vuex\"; //, mapMutations, mapActions\nimport \"@/assets/scss/vuexy/extraComponents/agGridStyleOverride.scss\";\n\nimport { eventBus } from \"@/main\"; // para que se hablen los componentes\n\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\";\n// ESTE ES UN FILTRO GENERICO, Si se necesita  puede incluir  un filtro personalizado\nimport filtrosDivisoft from \"@/divisoft/filtrosDivisoft.vue\";\n//archivo que contiene constantes y procedimientos miscelaneos de apoyo\nimport * as datos2501 from \"./js/divi2501.js\";\n\nexport default {\n    components: {\n        AgGridVue,\n        filtrosDivisoft\n    },\n\n    // antes de  inciar la pagina  cargalas  Filas que lleva que es una constante\n    // en  divi000X.js que es un libreria que guarda constantes y puede contener funciones de apoyo al  Documento\n    beforeMount() {\n        //DEFINE COLUMNAS DE LA TABLA\n        this.columnDefs = datos2501.columnDefs;\n        var defaultdatos = datos2501.datosDefault;\n        this.$store.commit(\"mutsetDatosDefault\", defaultdatos);\n    },\n\n    // Cuando se monta la aplicacion\n    mounted() {\n        this.buscarDatos();\n        this.gridApi = this.gridOptions.api;\n        this.gridColumnApi = this.gridOptions.columnApi;\n    },\n\n    data() {\n        return {\n            //APP\n            activaEdit: false, \n            locallastheader: \"\", //guarda el ultimo header de este objeto\n            locallaststrParametros: \"\", //guarda el ultimo  parametros de este objeto\n            locallaststrFilas: \"\", //guarda el ultimo filas de este objeto \n            paramtxt: \"\",\n            filastxt: \"\",\n            header: \"\", \n            isNinja: true,\n            staticKey: [],\n            // rowsForm:[],\n            dinamicKey: [],\n\n            origenUrl: \"J\",\n            dml: \"I\",\n\n            //BUSCAR\n            searchQuery: \"\", \n            activaFiltro: false,\n            //DATA GRID\n            gridOptions: {},\n            maxPageNumbers: 100,\n            gridApi: null,\n            exp: null,\n            columnDefs: null,\n\n            defaultColDef: {\n                sortable: true,\n                resizable: true,\n                editable: false, //true\n                filter: true,\n                suppressMenu: false\n            },\n\n            // seccion de filtros  Para llamar al  componente consulta\n            filtros: datos2501.filtros\n            // fin de filtros\n            //////////////////////////////////////\n        };\n    },\n    computed: {\n        ...mapState([ \n      \"profile\",\n            \"rowsForm\", \n            \"selectedRow\",\n            \"rows\", \n            \"datosGrid\",\n            \"tableKey\", \n            \"estadoProcesando\"\n        ]),\n\n        paginationPageSize() {\n            if (this.gridApi) return this.gridApi.paginationGetPageSize();\n            else return 10;\n        },\n        getAutor() {\n            return this.$parent.autor;\n    },\n    getProfile() { \n          return this.$store.state.dsoaLogin.profile[0];\n        },\n\n        totalPages() {\n            if (this.gridApi) return this.gridApi.paginationGetTotalPages();\n            else return 0;\n        },\n\n        currentPage: {\n            get() {\n                if (this.gridApi) return this.gridApi.paginationGetCurrentPage() + 1;\n                else return 1;\n            },\n            set(val) {\n                this.gridApi.paginationGoToPage(val - 1);\n            }\n        },\n\n        getDatos() {\n            return this.$store.getters.getRows;\n            //return   this.$store.state.datosJ.rows;\n        },\n\n        getDdatosRow: {\n            get() {\n                //return this.$store.state.datosGridPhp.rows;\n                return this.$store.state.datosGrid.rows; //llena la tabla con los datos obtenidos\n            }\n        },\n        currentRecord() {\n            return this.$store.state.rowsForm[0];\n        },\n\n        getDdatosPages: {\n            get() {\n                return 0;\n            }\n        },\n        lastDbmsg() {\n            return this.$store.state.lastBdmsage;\n        },\n        lastDbmsgCode() {\n            return this.$store.state.lastBdmsgcode;\n        }\n    },\n\n    methods: {\n        fechas() {\n            var myDate = new Date();\n            var ahora = myDate.valueOf();\n            //console.info(\"antes \",ahora);\n            divilib.diviTimer(5000);\n\n            myDate = new Date();\n            ahora = myDate.valueOf();\n            //console.info(\"despues \",ahora);\n        },\n        reRender() {\n            this.$forceUpdate();\n        },\n\n        onRowSelected() {\n            let rowsSelection = this.gridOptions.api.getSelectedRows();\n            //console.info(\"rowsSelection\",rowsSelection);\n        },\n\n        onSelectionChanged(event) {\n            var rowCount = event.api.getSelectedNodes().length;\n            return rowCount;\n        },\n\n        ajustaUltimoParam(parametros) {\n            this.locallaststrParametros = parametros;\n        },\n\n        refreshConsulta() {\n            // hace una nueva consulta despues de insertar, borrar o modificar\n            if (this.lastDbmsgCode != 0) this.$swal(this.lastDbmsg);\n\n            this.$store.commit(\"mutsetURL\", \"O\");\n\n            var petFiltro = {\n                header: this.locallastheader,\n                parametros: this.locallaststrParametros,\n                filas: this.locallaststrFilas\n            };\n\n            this.$store.commit(\"mutSetPeticiontxt\", petFiltro);\n\n            var pedido = {\n                dml: \"JJ\",\n                Credencial: this.getProfile.Credencial ,\n                 ObjectId:\"2501\",\n                formatoenvio: \"N\",\n                formatorecibe: \"N\",\n                indicador: \"1\", //select\n                origenUrl: this.origenUrl\n            };\n            //cambia a acDsoaPrueba // acDsoa\n            this.$store.dispatch(\"acDsoa\", pedido);\n        },\n        //PARA EDITAR\n        onDoubleClicked(event) {\n            //LIMPIA TABLEKEY\n\n            var defaultdatos = datos2501.datosDefault;\n            this.$store.commit(\"mutsetDatosDefault\", defaultdatos);\n             \n            //LLAVES  Gen_CAMPOS_GRID(1)\n            this.dinamicKey = [];\n this.dinamicKey.push({ nombre: \"COD_ZONA\", valor: event.node.data.COD_ZONA });\n\n             \n            //llama método editar Registro\n\n            eventBus.$emit(\"cargaRegistro\", this.dinamicKey);\n\n            this.$emit(\"incrementaEkey\");\n            this.$parent.activaEdit = true;\n            this.dml = \"U\";\n        },\n\n        //FUNCION BUSQUEDA EN EL INPUT DE ARRIBA\n        updateSearchQuery(val) {\n            this.gridApi.setQuickFilter(val);\n        },\n      // addFilas Gen_CAMPOS_GRID(1)\n            addFilas: function() {\n            var filas = [];\n filas.push({ NOMBRE: \"COD_ZONA\", VALOR1: \"\", VALOR2: \"\", CDATA: \"0\" }); \n filas.push({ NOMBRE: \"DES_ZONA\", VALOR1: \"\", VALOR2: \"\", CDATA: \"0\" }); \n filas.push({ NOMBRE: \"IND_ESTADO\", VALOR1: \"\", VALOR2: \"\", CDATA: \"0\" }); \n\n           this.filastxt = divilib.filaArraytoStrintg(filas, \"N\");\n           },\n          \n\n         \n        //LLAMA AL COMPONENTE EDIT PARA  AGREGAR UN REGISTRO NUEVO\n         // RegistroNuevo Gen_CAMPOS_GRID(3)\n            RegistroNuevo() {\n                    this.$parent.indicadorDML = \"I\";\n                    this.dinamicKey = [];\n                    var defaultdatos = datos2501.datosDefault;\n                    this.$store.commit(\"mutsetDatosDefault\", defaultdatos);\n                    //LLAVES\n  this.dinamicKey.push({ nombre: \"COD_ZONA\", valor: \"0\" }); \n   //llama método editar registro\n            eventBus.$emit(\"cargaRegistro\", this.dinamicKey);\n\n            this.$parent.activaEdit = true; // enciende los datos de Edicion\n        },\n \n             \n       //TRAE DATOS PARA QUE EL FORMULARIO EDIT LO CARGUE Y MODIFIQUE\n\n        //TRAE DATOS PARA MOSTRAR en el Grid\n        buscarDatos: function() {\n            var origenUrl = \"O\";\n            var header = {\n                MODO: \"JJ\",\n                OBJECTID: \"2501\",\n                CREDENCIAL:this.getProfile.Credencial ,\n                USERNAME: this.getProfile.Username,\n                REGISTROSXPAGINA: \"200\",\n                PAGINA: \"1\",\n                ORDERBY: \"\"\n            };\n            this.headertxt = divilib.GetHeaderString(header);\n            // arma la encabezado peticion\n            // agrego las filas\n            this.addFilas();\n            \n            \n          // RegistroNuevo Gen_CAMPOS_GRID(3)\n             var parametros = []; \n      //  FIN DE LLAVE FIJA\n  \n\n            //entrega arreglo de parametros recibe texto de parametros\n            this.paramtxt = divilib.paramArraytoStrintg(parametros);\n            //}\n            // cargo la peticion texto\n            var petTxt = { header: this.headertxt, parametros: this.paramtxt, filas: this.filastxt };\n\n            this.$store.commit(\"mutsetURL\", \"O\");\n            this.$store.commit(\"mutSetPeticiontxt\", petTxt); \n            \n            var pedido = {\n                dml: \"JJ\",\n               Credencial: this.getProfile.Credencial ,\n                ObjectId:\"2501\",\n                formatoenvio: \"N\",\n                formatorecibe: \"N\",\n                indicador: \"1\", //select\n                origenUrl: origenUrl\n            };\n\n            //cambia a acDsoaPrueba // acDsoa\n            this.$store.dispatch(\"acDsoa\", pedido);\n\n            //carga la ultima peticion  header parametros y addFilas\n            this.locallastheader = this.headertxt;\n            this.locallaststrParametros = this.paramtxt;\n            this.locallaststrFilas = this.filastxt;\n        }\n    }\n    // busq el  Registro a cargar\n}; // fin de Metodos\n",{"version":3,"sources":["grid2501.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"grid2501.vue","sourceRoot":"src/divisoft/gonow/administracion/ob2501","sourcesContent":[" \n<!-- =========================================================================================\n  MODELO VUE.JS  VUAX DIVISOFT  2020  \n    AUTOR: ADEMAR DIAZ \n    MODELO DE EDICION DE TABLAS CONFIGURABLE \n    CREADO POR  DIVISOFT SOA 2020\n========================================================================================== -->\n\n<template>\n  <div>\n    <div v-if=\"isNinja\" id=\"GRID2501\">  \n   <table class=\"table\">   \n      <tbody>        \n        <tr> \n           <td>\n              <button class=\"btn btn-primary btn-sm\"  @click=\"RegistroNuevo\">Agregar Registo</button>\n           </td>   \n            <td> \n                <div class=\"p-3 mb-4 mr-4 rounded-lg cursor-pointer flex items-center justify-between text-lg font-medium text-base text-primary border border-solid border-primary\" \n                    @click=\"activaFiltro = true\">  \n            \n                    <feather-icon icon=\"PlusIcon\" svgClasses=\"h-4 w-4\" />\n                    <span class=\"ml-2 text-base text-primary\">Consulta Base Datos</span> \n                </div> \n            </td> \n         </tr>   \n        </tbody> \n    </table>  \n     <filtrosDivisoft v-show=\"activaFiltro\" :header=\"locallastheader\"  :isSidebarActive=\"activaFiltro\" :filas=\"locallaststrFilas\" :filtros=\"filtros\"  @closeSidebar=\"activaFiltro = false\" \n                @ajustaUltimoParam=\"ajustaUltimoParam\"/> \n      <!-- TABLE ACTION ROW -->\n      <div class=\"flex flex-wrap justify-between items-center\"> \n        <!-- ITEMS PER PAGE / PAGINACIÓN -->\n        <div class=\"mb-4 md:mb-0 mr-4 ag-grid-table-actions-left\">\n          <vs-dropdown vs-trigger-click class=\"cursor-pointer\">\n            <div class=\"p-4 border border-solid d-theme-border-grey-light rounded-full d-theme-dark-bg cursor-pointer flex items-center justify-between font-medium\">\n              <span class=\"mr-2\">{{ currentPage * paginationPageSize - (paginationPageSize - 1) }} - {{ getDdatosRow.length - currentPage * paginationPageSize > 0 ? currentPage * paginationPageSize : getDdatosRow.length }} of {{ getDdatosRow.length }}</span>\n              <feather-icon icon=\"ChevronDownIcon\" svgClasses=\"h-4 w-4\" />\n            </div>\n            <vs-dropdown-menu>\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(10)\">\n                <span>10</span>\n              </vs-dropdown-item>\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(20)\">\n                <span>20</span>\n              </vs-dropdown-item>\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(50)\">\n                <span>50</span>\n              </vs-dropdown-item>\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(100)\">\n                <span>100</span>\n              </vs-dropdown-item>\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(150)\">\n                <span>150</span>\n              </vs-dropdown-item>\n            </vs-dropdown-menu>\n          </vs-dropdown>\n        </div> \n        <!-- TABLE ACTION COL-2: SEARCH & EXPORT AS CSV -->\n        <div class=\"flex flex-wrap items-center justify-between ag-grid-table-actions-right\">\n          <!--BUSCAR-->\n          <vs-input class=\"mb-4 md:mb-0 mr-4\" v-model=\"searchQuery\"  @input=\"updateSearchQuery\" placeholder=\"Buscar...\" />\n          <!--EXPORTAR EXCEL-->\n          <vs-button class=\"mb-4 md:mb-0\" @click=\"gridApi.exportDataAsCsv()\">Exportar a Excel</vs-button>\n        </div>\n      </div>\n      <div style=\"height: 100%\">  \n        <!--COMPONENTE GRID--> \n        <ag-grid-vue\n          class=\"ag-theme-material w-100 my-4 ag-grid-table\"\n          :gridOptions=\"gridOptions\"\n          :columnDefs=\"columnDefs\"\n          :defaultColDef=\"defaultColDef\"\n          :rowData=\"getDdatosRow\"\n          rowSelection=\"single\" \n          colResizeDefault=\"shift\"\n          :animateRows=\"true\"\n          :floatingFilter=\"true\"\n          :pagination=\"true\"\n          :suppressDragLeaveHidesColumns=\"true\"\n          :paginationPageSize=\"paginationPageSize\"\n          :suppressPaginationPanel=\"false\"\n          @row-selected=\"onRowSelected\"\n          @selection-changed=\"onSelectionChanged\"\n          @cellDoubleClicked=\"onDoubleClicked\">\n        </ag-grid-vue>\n      </div>\n      <pre></pre>\n    </div> \n  </div>\n</template> \n<script>\n// importa librerias que necesita\n\nimport { AgGridVue } from \"ag-grid-vue\";\nimport { mapState } from \"vuex\"; //, mapMutations, mapActions\nimport \"@/assets/scss/vuexy/extraComponents/agGridStyleOverride.scss\";\n\nimport { eventBus } from \"@/main\"; // para que se hablen los componentes\n\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\";\n// ESTE ES UN FILTRO GENERICO, Si se necesita  puede incluir  un filtro personalizado\nimport filtrosDivisoft from \"@/divisoft/filtrosDivisoft.vue\";\n//archivo que contiene constantes y procedimientos miscelaneos de apoyo\nimport * as datos2501 from \"./js/divi2501.js\";\n\nexport default {\n    components: {\n        AgGridVue,\n        filtrosDivisoft\n    },\n\n    // antes de  inciar la pagina  cargalas  Filas que lleva que es una constante\n    // en  divi000X.js que es un libreria que guarda constantes y puede contener funciones de apoyo al  Documento\n    beforeMount() {\n        //DEFINE COLUMNAS DE LA TABLA\n        this.columnDefs = datos2501.columnDefs;\n        var defaultdatos = datos2501.datosDefault;\n        this.$store.commit(\"mutsetDatosDefault\", defaultdatos);\n    },\n\n    // Cuando se monta la aplicacion\n    mounted() {\n        this.buscarDatos();\n        this.gridApi = this.gridOptions.api;\n        this.gridColumnApi = this.gridOptions.columnApi;\n    },\n\n    data() {\n        return {\n            //APP\n            activaEdit: false, \n            locallastheader: \"\", //guarda el ultimo header de este objeto\n            locallaststrParametros: \"\", //guarda el ultimo  parametros de este objeto\n            locallaststrFilas: \"\", //guarda el ultimo filas de este objeto \n            paramtxt: \"\",\n            filastxt: \"\",\n            header: \"\", \n            isNinja: true,\n            staticKey: [],\n            // rowsForm:[],\n            dinamicKey: [],\n\n            origenUrl: \"J\",\n            dml: \"I\",\n\n            //BUSCAR\n            searchQuery: \"\", \n            activaFiltro: false,\n            //DATA GRID\n            gridOptions: {},\n            maxPageNumbers: 100,\n            gridApi: null,\n            exp: null,\n            columnDefs: null,\n\n            defaultColDef: {\n                sortable: true,\n                resizable: true,\n                editable: false, //true\n                filter: true,\n                suppressMenu: false\n            },\n\n            // seccion de filtros  Para llamar al  componente consulta\n            filtros: datos2501.filtros\n            // fin de filtros\n            //////////////////////////////////////\n        };\n    },\n    computed: {\n        ...mapState([ \n      \"profile\",\n            \"rowsForm\", \n            \"selectedRow\",\n            \"rows\", \n            \"datosGrid\",\n            \"tableKey\", \n            \"estadoProcesando\"\n        ]),\n\n        paginationPageSize() {\n            if (this.gridApi) return this.gridApi.paginationGetPageSize();\n            else return 10;\n        },\n        getAutor() {\n            return this.$parent.autor;\n    },\n    getProfile() { \n          return this.$store.state.dsoaLogin.profile[0];\n        },\n\n        totalPages() {\n            if (this.gridApi) return this.gridApi.paginationGetTotalPages();\n            else return 0;\n        },\n\n        currentPage: {\n            get() {\n                if (this.gridApi) return this.gridApi.paginationGetCurrentPage() + 1;\n                else return 1;\n            },\n            set(val) {\n                this.gridApi.paginationGoToPage(val - 1);\n            }\n        },\n\n        getDatos() {\n            return this.$store.getters.getRows;\n            //return   this.$store.state.datosJ.rows;\n        },\n\n        getDdatosRow: {\n            get() {\n                //return this.$store.state.datosGridPhp.rows;\n                return this.$store.state.datosGrid.rows; //llena la tabla con los datos obtenidos\n            }\n        },\n        currentRecord() {\n            return this.$store.state.rowsForm[0];\n        },\n\n        getDdatosPages: {\n            get() {\n                return 0;\n            }\n        },\n        lastDbmsg() {\n            return this.$store.state.lastBdmsage;\n        },\n        lastDbmsgCode() {\n            return this.$store.state.lastBdmsgcode;\n        }\n    },\n\n    methods: {\n        fechas() {\n            var myDate = new Date();\n            var ahora = myDate.valueOf();\n            //console.info(\"antes \",ahora);\n            divilib.diviTimer(5000);\n\n            myDate = new Date();\n            ahora = myDate.valueOf();\n            //console.info(\"despues \",ahora);\n        },\n        reRender() {\n            this.$forceUpdate();\n        },\n\n        onRowSelected() {\n            let rowsSelection = this.gridOptions.api.getSelectedRows();\n            //console.info(\"rowsSelection\",rowsSelection);\n        },\n\n        onSelectionChanged(event) {\n            var rowCount = event.api.getSelectedNodes().length;\n            return rowCount;\n        },\n\n        ajustaUltimoParam(parametros) {\n            this.locallaststrParametros = parametros;\n        },\n\n        refreshConsulta() {\n            // hace una nueva consulta despues de insertar, borrar o modificar\n            if (this.lastDbmsgCode != 0) this.$swal(this.lastDbmsg);\n\n            this.$store.commit(\"mutsetURL\", \"O\");\n\n            var petFiltro = {\n                header: this.locallastheader,\n                parametros: this.locallaststrParametros,\n                filas: this.locallaststrFilas\n            };\n\n            this.$store.commit(\"mutSetPeticiontxt\", petFiltro);\n\n            var pedido = {\n                dml: \"JJ\",\n                Credencial: this.getProfile.Credencial ,\n                 ObjectId:\"2501\",\n                formatoenvio: \"N\",\n                formatorecibe: \"N\",\n                indicador: \"1\", //select\n                origenUrl: this.origenUrl\n            };\n            //cambia a acDsoaPrueba // acDsoa\n            this.$store.dispatch(\"acDsoa\", pedido);\n        },\n        //PARA EDITAR\n        onDoubleClicked(event) {\n            //LIMPIA TABLEKEY\n\n            var defaultdatos = datos2501.datosDefault;\n            this.$store.commit(\"mutsetDatosDefault\", defaultdatos);\n             \n            //LLAVES  Gen_CAMPOS_GRID(1)\n            this.dinamicKey = [];\n this.dinamicKey.push({ nombre: \"COD_ZONA\", valor: event.node.data.COD_ZONA });\n\n             \n            //llama método editar Registro\n\n            eventBus.$emit(\"cargaRegistro\", this.dinamicKey);\n\n            this.$emit(\"incrementaEkey\");\n            this.$parent.activaEdit = true;\n            this.dml = \"U\";\n        },\n\n        //FUNCION BUSQUEDA EN EL INPUT DE ARRIBA\n        updateSearchQuery(val) {\n            this.gridApi.setQuickFilter(val);\n        },\n      // addFilas Gen_CAMPOS_GRID(1)\n            addFilas: function() {\n            var filas = [];\n filas.push({ NOMBRE: \"COD_ZONA\", VALOR1: \"\", VALOR2: \"\", CDATA: \"0\" }); \n filas.push({ NOMBRE: \"DES_ZONA\", VALOR1: \"\", VALOR2: \"\", CDATA: \"0\" }); \n filas.push({ NOMBRE: \"IND_ESTADO\", VALOR1: \"\", VALOR2: \"\", CDATA: \"0\" }); \n\n           this.filastxt = divilib.filaArraytoStrintg(filas, \"N\");\n           },\n          \n\n         \n        //LLAMA AL COMPONENTE EDIT PARA  AGREGAR UN REGISTRO NUEVO\n         // RegistroNuevo Gen_CAMPOS_GRID(3)\n            RegistroNuevo() {\n                    this.$parent.indicadorDML = \"I\";\n                    this.dinamicKey = [];\n                    var defaultdatos = datos2501.datosDefault;\n                    this.$store.commit(\"mutsetDatosDefault\", defaultdatos);\n                    //LLAVES\n  this.dinamicKey.push({ nombre: \"COD_ZONA\", valor: \"0\" }); \n   //llama método editar registro\n            eventBus.$emit(\"cargaRegistro\", this.dinamicKey);\n\n            this.$parent.activaEdit = true; // enciende los datos de Edicion\n        },\n \n             \n       //TRAE DATOS PARA QUE EL FORMULARIO EDIT LO CARGUE Y MODIFIQUE\n\n        //TRAE DATOS PARA MOSTRAR en el Grid\n        buscarDatos: function() {\n            var origenUrl = \"O\";\n            var header = {\n                MODO: \"JJ\",\n                OBJECTID: \"2501\",\n                CREDENCIAL:this.getProfile.Credencial ,\n                USERNAME: this.getProfile.Username,\n                REGISTROSXPAGINA: \"200\",\n                PAGINA: \"1\",\n                ORDERBY: \"\"\n            };\n            this.headertxt = divilib.GetHeaderString(header);\n            // arma la encabezado peticion\n            // agrego las filas\n            this.addFilas();\n            \n            \n          // RegistroNuevo Gen_CAMPOS_GRID(3)\n             var parametros = []; \n      //  FIN DE LLAVE FIJA\n  \n\n            //entrega arreglo de parametros recibe texto de parametros\n            this.paramtxt = divilib.paramArraytoStrintg(parametros);\n            //}\n            // cargo la peticion texto\n            var petTxt = { header: this.headertxt, parametros: this.paramtxt, filas: this.filastxt };\n\n            this.$store.commit(\"mutsetURL\", \"O\");\n            this.$store.commit(\"mutSetPeticiontxt\", petTxt); \n            \n            var pedido = {\n                dml: \"JJ\",\n               Credencial: this.getProfile.Credencial ,\n                ObjectId:\"2501\",\n                formatoenvio: \"N\",\n                formatorecibe: \"N\",\n                indicador: \"1\", //select\n                origenUrl: origenUrl\n            };\n\n            //cambia a acDsoaPrueba // acDsoa\n            this.$store.dispatch(\"acDsoa\", pedido);\n\n            //carga la ultima peticion  header parametros y addFilas\n            this.locallastheader = this.headertxt;\n            this.locallaststrParametros = this.paramtxt;\n            this.locallaststrFilas = this.filastxt;\n        }\n    }\n    // busq el  Registro a cargar\n}; // fin de Metodos\n</script>\n        "]}]}