{"remainingRequest":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\components\\vx-auto-suggest\\VxAutoSuggest.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\components\\vx-auto-suggest\\VxAutoSuggest.vue","mtime":1604601624314},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\css-loader\\index.js","mtime":1604601568517},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1604601615300},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\postcss-loader\\src\\index.js","mtime":1604601594460},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1604601606015},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604601561321},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\index.js","mtime":1604601615297}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n@import \"@/assets/scss/vuexy/components/vxAutoSuggest.scss\";\r\n",{"version":3,"sources":["VxAutoSuggest.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqQA","file":"VxAutoSuggest.vue","sourceRoot":"src/components/vx-auto-suggest","sourcesContent":["<template>\r\n  <div class=\"vx-auto-suggest\">\r\n    <div class=\"flex items-center relative\">\r\n\r\n      <!-- Input -->\r\n      <vs-input\r\n        ref=\"input\"\r\n        :placeholder=\"placeholder\"\r\n        :class=\"inputClassses\"\r\n        class=\"z-50\"\r\n        icon-pack=\"feather\"\r\n        icon=\"icon-search\"\r\n        icon-no-border\r\n        v-model=\"searchQuery\"\r\n        @keyup.esc=\"escPressed\"\r\n        @keyup.up=\"increaseIndex(false)\"\r\n        @keyup.down=\"increaseIndex\"\r\n        @keyup.enter=\"suggestionSelected\"\r\n        @focus=\"updateInputFocus\"\r\n        @blur=\"updateInputFocus(false)\" />\r\n    </div>\r\n\r\n    <!-- Group List -->\r\n    <ul\r\n      ref=\"scrollContainer\"\r\n      :class=\"{'hidden': !inputFocused}\"\r\n      class=\"auto-suggest-suggestions-list z-50 rounded-lg mt-2 shadow-lg overflow-x-hidden\"\r\n      @mouseenter=\"insideSuggestions = true\"\r\n      @mouseleave=\"insideSuggestions = false\"\r\n      @focus=\"updateInputFocus\"\r\n      @blur=\"updateInputFocus(false)\"\r\n      tabindex=\"-1\">\r\n\r\n      <li\r\n        ref=\"grp_list\"\r\n        v-for=\"(suggestion_list, grp_name, grp_index) in filteredData\"\r\n        :key=\"grp_index\"\r\n        class=\"auto-suggest__suggestion-group-container\">\r\n\r\n          <!-- Group Header -->\r\n          <p class=\"auto-suggest__suggestion-group-title pt-3 pb-1 px-4\" v-if=\"!hideGroupTitle\">\r\n            <slot name=\"group\" :group_name=\"grp_name\"></slot>\r\n          </p>\r\n\r\n          <!-- Suggestion List of each group -->\r\n          <ul>\r\n            <li\r\n              v-for=\"(suggestion, index) in suggestion_list\"\r\n              :key=\"index\"\r\n              class=\"auto-suggest__suggestion-group__suggestion py-3 px-4 cursor-pointer\"\r\n              :class=\"{'vx-auto-suggest__current-selected': currentSelected == `${grp_index}.${index}`}\"\r\n              @mouseenter=\"currentSelected = `${grp_index}.${index}`\"\r\n              @click=\"suggestionSelected\">\r\n              <slot :name=\"grp_name\" :suggestion=\"suggestion\"></slot>\r\n            </li>\r\n\r\n            <li class=\"auto-suggest__suggestion-group__suggestion py-3 px-4 no-results\" v-if=\"!suggestion_list.length && searchQuery\">\r\n              <slot name=\"noResult\" :group_name=\"grp_name\">\r\n                  <p>No Results Found.</p>\r\n              </slot>\r\n            </li>\r\n          </ul>\r\n      </li>\r\n    </ul>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default{\r\n  props: {\r\n    placeholder: {\r\n      type: String,\r\n      default: 'Search..'\r\n    },\r\n    data: {\r\n      type: Object,\r\n      required: true\r\n    },\r\n    initalData: {\r\n      type: Object,\r\n      default: () => new Object\r\n    },\r\n    inputClassses: {\r\n      type: [String, Object, Array]\r\n    },\r\n    autoFocus: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    showPinned: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    searchLimit: {\r\n      type: Number,\r\n      default: 4\r\n    },\r\n    hideGroupTitle: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      searchQuery: '',\r\n      filteredData: {},\r\n      currentSelected: -1,\r\n      inputFocused: false,\r\n      insideSuggestions: false\r\n    }\r\n  },\r\n  watch: {\r\n    // UPDATE SUGGESTIONS LIST\r\n    searchQuery (val) {\r\n      this.$emit('input', val)\r\n\r\n      if (val === '') {\r\n        this.inputInit()\r\n      } else {\r\n        const queried_data = {}\r\n        const data_grps = Object.keys(this.data)\r\n\r\n        data_grps.forEach((grp, i) => {\r\n          queried_data[data_grps[i]] = this.filter_grp(this.data[grp])\r\n        })\r\n\r\n        // Check if any of group has at least one queried item\r\n        if (!Object.values(queried_data).some(obj => obj.length)) {\r\n          this.currentSelected = -1\r\n        }\r\n\r\n        this.filteredData = queried_data\r\n      }\r\n    },\r\n    autoFocus (val) {\r\n      if (val) this.focusInput()\r\n      else this.searchQuery = ''\r\n    },\r\n    filteredData (val) {\r\n      // Auto Select first item if it's not item-404\r\n      let grp_index = null\r\n\r\n      for (const [index, grp_suggestions] of Object.values(val).entries()) {\r\n        if (grp_suggestions.length) {\r\n          grp_index = index\r\n          break\r\n        }\r\n      }\r\n\r\n      if (grp_index !== null) this.currentSelected = `${grp_index  }.0`\r\n    }\r\n  },\r\n  methods: {\r\n    escPressed () {\r\n      this.$emit('closeSearchbar')\r\n      this.searchQuery = ''\r\n    },\r\n    filter_grp (grp) {\r\n      const exactEle = grp.data.filter((item) => {\r\n        return item[grp.key].toLowerCase().startsWith(this.searchQuery.toLowerCase())\r\n      })\r\n      const containEle = grp.data.filter((item) => {\r\n        return !item[grp.key].toLowerCase().startsWith(this.searchQuery.toLowerCase()) && item[grp.key].toLowerCase().indexOf(this.searchQuery.toLowerCase()) > -1\r\n      })\r\n      return exactEle.concat(containEle).slice(0, this.searchLimit)\r\n    },\r\n    inputInit () {\r\n      if (Object.entries(this.initalData).length === 0 && this.initalData.constructor === Object) {\r\n        this.filteredData = {}\r\n      } else {\r\n        this.filteredData = this.initalData\r\n      }\r\n    },\r\n    updateInputFocus (val = true) {\r\n      if (val) {\r\n        if (this.searchQuery === '') this.inputInit()\r\n        setTimeout(() => {\r\n          this.inputFocused = true\r\n        }, 100)\r\n      } else {\r\n        if (this.insideSuggestions) return\r\n        setTimeout(() => {\r\n          this.inputFocused = false\r\n        }, 100)\r\n        this.escPressed()\r\n      }\r\n    },\r\n    suggestionSelected () {\r\n      if (this.currentSelected > -1) {\r\n\r\n        const [grp_index, item_index] = this.currentSelected.split('.')\r\n\r\n        const grp_of_selected_item = Object.keys(this.data)[grp_index]\r\n        const selected_item = this.filteredData[grp_of_selected_item][item_index]\r\n\r\n        this.$emit('selected', {[grp_of_selected_item]: selected_item})\r\n\r\n        this.searchQuery = ''\r\n      }\r\n    },\r\n    increaseIndex (val = true) {\r\n\r\n      /* eslint-disable no-lonely-if */\r\n\r\n      // If there's no matching items\r\n      if (!Object.values(this.filteredData).some(grp_items => grp_items.length)) return\r\n\r\n      const [grp_i, item_i] = this.currentSelected.split('.')\r\n\r\n      const grp_arr = Object.entries(this.filteredData)\r\n      const active_grp_total_items = grp_arr[grp_i][1].length\r\n\r\n      if (val) {\r\n        // If active item is not of last item in grp\r\n        if (active_grp_total_items - 1 > item_i) {\r\n          this.currentSelected = `${grp_i  }.${   Number(item_i) + 1}`\r\n\r\n        // If active item grp is not last in grp list\r\n        } else if (grp_i < grp_arr.length - 1) {\r\n\r\n          for (let i = Number(grp_i) + 1; i < grp_arr.length; i++) {\r\n\r\n            // If navigating group have items => Then move in that group\r\n            if (grp_arr[i][1].length > 0) {\r\n              this.currentSelected = `${Number(i)  }.0`\r\n              break\r\n            }\r\n          }\r\n        }\r\n      } else {\r\n        // If active item is not of first item in grp\r\n        if (Number(item_i)) {\r\n          this.currentSelected = `${grp_i  }.${   Number(item_i) - 1}`\r\n\r\n        // If active item grp  is not first in grp list\r\n        } else if (Number(grp_i)) {\r\n\r\n          for (let i = Number(grp_i) - 1; i >= 0; i--) {\r\n\r\n            // If navigating group have items => Then move in that group\r\n            if (grp_arr[i][1].length > 0) {\r\n              this.currentSelected = `${i  }.${  grp_arr[i][1].length - 1}`\r\n              break\r\n            }\r\n          }\r\n        }\r\n      }\r\n      /* eslint-enable no-lonely-if */\r\n    },\r\n    focusInput () {\r\n      this.$refs.input.$el.querySelector('input').focus()\r\n    }\r\n  },\r\n  mounted () {\r\n    if (this.autoFocus) this.focusInput()\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuexy/components/vxAutoSuggest.scss\";\r\n</style>\r\n"]}]}