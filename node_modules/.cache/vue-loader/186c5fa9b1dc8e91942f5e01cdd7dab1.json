{"remainingRequest":"C:\\Users\\Usuario\\Documents\\VUE\\vuesax_marzo_2020\\vuexy-full-version\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Usuario\\Documents\\VUE\\vuesax_marzo_2020\\vuexy-full-version\\src\\views\\apps\\email\\Email.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Usuario\\Documents\\VUE\\vuesax_marzo_2020\\vuexy-full-version\\src\\views\\apps\\email\\Email.vue","mtime":1587682463992},{"path":"C:\\Users\\Usuario\\Documents\\VUE\\vuesax_marzo_2020\\vuexy-full-version\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Usuario\\Documents\\VUE\\vuesax_marzo_2020\\vuexy-full-version\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Usuario\\Documents\\VUE\\vuesax_marzo_2020\\vuexy-full-version\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Usuario\\Documents\\VUE\\vuesax_marzo_2020\\vuexy-full-version\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport EmailSidebar from \"./EmailSidebar.vue\";\nimport MailItem from \"./MailItem.vue\";\nimport EmailView from \"./EmailView.vue\";\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\nimport moduleEmail from \"@/store/email/moduleEmail.js\";\n\nexport default {\n  data() {\n    return {\n      openMailId: null,\n      selectedMails: [],\n      isSidebarActive: false,\n      showThread: false,\n      clickNotClose: true,\n      isEmailSidebarActive: true,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.3\n      }\n    };\n  },\n  watch: {\n    isSidebarActive(value) {\n      if (!value) this.showThread = false;\n    },\n    mailFilter() {\n      this.selectedMails = [];\n\n      const scroll_el = this.$refs.mailListPS.$el || this.$refs.mailListPS;\n      scroll_el.scrollTop = 0;\n\n      this.$store.commit(\"email/UPDATE_MAIL_FILTER\", this.$route.params.filter);\n      this.$store.dispatch(\"email/fetchEmails\", {\n        filter: this.$route.params.filter\n      });\n      this.toggleEmailSidebar();\n    },\n    windowWidth() {\n      this.setSidebarWidth();\n    }\n  },\n  computed: {\n    mailFilter() {\n      return this.$route.params.filter;\n    },\n    emailTags() {\n      return this.$store.state.email.mailTags;\n    },\n    searchQuery: {\n      get() {\n        return this.$store.state.email.mailSearchQuery;\n      },\n      set(val) {\n        this.$store.dispatch(\"email/setEmailSearchQuery\", val);\n      }\n    },\n    selectAllCheckBox: {\n      get() {\n        return this.selectedMails.length;\n      },\n      set(value) {\n        value\n          ? (this.selectedMails = this.mails.map(mail => mail.id))\n          : (this.selectedMails = []);\n      }\n    },\n    mails() {\n      return this.$store.getters[\"email/filteredMails\"];\n    },\n    selectAllIcon() {\n      return this.selectedMails.length === this.mails.length\n        ? \"icon-check\"\n        : \"icon-minus\";\n    },\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    isMailSelected() {\n      return mailId => this.selectedMails.indexOf(mailId) !== -1;\n    },\n    windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    updateOpenMail(mailId) {\n      this.openMailId = mailId;\n      this.isSidebarActive = true;\n    },\n    addToSelectedMails(mailId) {\n      if (this.selectedMails.indexOf(mailId) === -1)\n        this.selectedMails.push(mailId);\n    },\n    removeSelectedMail(mailId) {\n      const mailIndex = this.selectedMails.indexOf(mailId);\n      if (mailIndex !== -1) this.selectedMails.splice(mailIndex, 1);\n    },\n    moveTo(to) {\n      const payload = { emailIds: this.selectedMails, to };\n      this.$store.dispatch(\"email/moveMailsTo\", payload).catch(error => {\n        console.error(error);\n      });\n      this.selectedMails = [];\n    },\n    moveCurrentTo(to) {\n      this.selectedMails = [this.openMailId];\n      this.moveTo(to);\n    },\n    updateMarkUnread() {\n      const payload = { emailIds: this.selectedMails, unreadFlag: true };\n      this.$store.dispatch(\"email/setUnread\", payload);\n      this.selectedMails = [];\n    },\n    removeOpenMail() {\n      this.selectedMails = [this.openMailId];\n      this.moveTo(\"trashed\");\n      this.isSidebarActive = false;\n    },\n    toggleIsStarred() {\n      const payload = {\n        mailId: this.currentMail.id,\n        value: !this.currentMail.isStarred\n      };\n      this.$store.dispatch(\"email/toggleIsMailStarred\", payload);\n    },\n    nextMail() {\n      const currentMailIndex = this.mails.findIndex(\n        mail => mail.id === this.openMailId\n      );\n      if (this.mails[currentMailIndex + 1])\n        this.openMailId = this.mails[currentMailIndex + 1].id;\n    },\n    previousMail() {\n      const currentMailIndex = this.mails.findIndex(\n        mail => mail.id === this.openMailId\n      );\n      if (this.mails[currentMailIndex - 1])\n        this.openMailId = this.mails[currentMailIndex - 1].id;\n    },\n    updateSingleMarkUnread() {\n      this.selectedMails = [this.openMailId];\n      this.updateMarkUnread();\n      this.isSidebarActive = false;\n    },\n    updateLabels(label) {\n      this.$store.dispatch(\"email/updateLabels\", {\n        mails: this.selectedMails,\n        label\n      });\n      this.selectedMails = [];\n    },\n    closeMailViewSidebar() {\n      this.isSidebarActive = false;\n    },\n    setSidebarWidth() {\n      if (this.windowWidth < 992) {\n        this.isEmailSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isEmailSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleEmailSidebar(value = false) {\n      if (!value) {\n        this.closeMailViewSidebar();\n        if (this.clickNotClose) {\n          return;\n        }\n      }\n      this.isEmailSidebarActive = value;\n    }\n  },\n  components: {\n    MailItem,\n    EmailSidebar,\n    EmailView,\n    VuePerfectScrollbar\n  },\n  created() {\n    this.$store.registerModule(\"email\", moduleEmail);\n    this.setSidebarWidth();\n\n    this.$store.commit(\"email/UPDATE_MAIL_FILTER\", this.$route.params.filter); // Update Mail Filter\n    this.$store.dispatch(\"email/fetchEmails\", {\n      filter: this.$route.params.filter\n    }); // Fetch Emails From API\n    this.$store.dispatch(\"email/fetchMeta\"); // Fetch Unread Mails\n    this.$store.dispatch(\"email/fetchTags\"); // Fetch Mail Tags\n  },\n  beforeDestroy() {\n    this.$store.unregisterModule(\"email\");\n  },\n  mounted() {\n    this.$store.dispatch(\"email/setEmailSearchQuery\", \"\");\n  }\n};\n",{"version":3,"sources":["Email.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAofile":"Email.vue","sourceRoot":"src/views/apps/email","sourcesContent":["<!-- =========================================================================================\n    File Name: Email.vue\n    Description: Email Application (Inbox)\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n  <div\n    id=\"email-app\"\n    class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\"\n  >\n    <vs-sidebar\n      class=\"items-no-padding\"\n      parent=\"#email-app\"\n      :click-not-close=\"clickNotClose\"\n      :hidden-background=\"clickNotClose\"\n      v-model=\"isEmailSidebarActive\"\n    >\n      <email-sidebar\n        :emailTags=\"emailTags\"\n        @closeSidebar=\"toggleEmailSidebar\"\n        :mailFilter=\"mailFilter\"\n      />\n    </vs-sidebar>\n\n    <div\n      :class=\"{'sidebar-spacer': clickNotClose}\"\n      class=\"no-scroll-content border border-solid d-theme-border-grey-light border-r-0 border-t-0 border-b-0\"\n    >\n      <!-- SEARCH BAR -->\n      <div class=\"flex border d-theme-dark-bg items-center\">\n        <feather-icon\n          class=\"md:inline-flex lg:hidden ml-4 mr-4 cursor-pointer\"\n          icon=\"MenuIcon\"\n          @click.stop=\"toggleEmailSidebar(true)\"\n        />\n        <vs-input\n          icon-no-border\n          icon=\"icon-search\"\n          size=\"large\"\n          icon-pack=\"feather\"\n          placeholder=\"Search Mail\"\n          v-model=\"searchQuery\"\n          class=\"vs-input-no-border vs-input-no-shdow-focus w-full\"\n        />\n      </div>\n\n      <!-- EMAIL ACTION BAR -->\n      <div\n        class=\"email__actions flex items-center flex-wrap justify-between p-4 border border-r-0 border-l-0 border-solid d-theme-border-grey-light\"\n      >\n        <div class=\"flex items-center\">\n          <vs-checkbox\n            v-model=\"selectAllCheckBox\"\n            icon-pack=\"feather\"\n            :icon=\"selectAllIcon\"\n            class=\"select-all-chexkbox ml-0\"\n          >Select All</vs-checkbox>\n        </div>\n        <div class=\"flex\">\n          <vs-dropdown\n            vs-custom-content\n            vs-trigger-click\n            class=\"cursor-pointer\"\n            v-if=\"mailFilter != 'sent'\"\n          >\n            <feather-icon icon=\"FolderIcon\" class=\"cursor-pointer\" svg-classes=\"h-6 w-6\"></feather-icon>\n\n            <vs-dropdown-menu>\n              <vs-dropdown-item @click=\"moveTo('inbox')\" v-if=\"mailFilter != 'inbox'\">\n                <span class=\"flex items-center\">\n                  <feather-icon icon=\"MailIcon\" svgClasses=\"h-4 w-4\" class=\"mr-2\" />\n                  <span>Inbox</span>\n                </span>\n              </vs-dropdown-item>\n\n              <vs-dropdown-item @click=\"moveTo('draft')\" v-if=\"mailFilter != 'draft'\">\n                <span class=\"flex items-center\">\n                  <feather-icon icon=\"Edit2Icon\" svgClasses=\"h-4 w-4\" class=\"mr-2\" />\n                  <span>Draft</span>\n                </span>\n              </vs-dropdown-item>\n\n              <vs-dropdown-item @click=\"moveTo('spam')\" v-if=\"mailFilter != 'spam'\">\n                <span class=\"flex items-center\">\n                  <feather-icon icon=\"InfoIcon\" svgClasses=\"h-4 w-4\" class=\"mr-2\" />\n                  <span>Spam</span>\n                </span>\n              </vs-dropdown-item>\n\n              <vs-dropdown-item @click=\"moveTo('trash')\" v-if=\"mailFilter != 'trash'\">\n                <span class=\"flex items-center\">\n                  <feather-icon icon=\"TrashIcon\" svgClasses=\"h-4 w-4\" class=\"mr-2\" />\n                  <span>Trash</span>\n                </span>\n              </vs-dropdown-item>\n            </vs-dropdown-menu>\n          </vs-dropdown>\n\n          <vs-dropdown vs-custom-content vs-trigger-click class=\"cursor-pointer\">\n            <feather-icon icon=\"TagIcon\" class=\"cursor-pointer ml-5\" svg-classes=\"h-6 w-6\"></feather-icon>\n\n            <vs-dropdown-menu>\n              <vs-dropdown-item\n                v-for=\"(label, index) in emailTags\"\n                :key=\"index\"\n                @click=\"updateLabels(label.value)\"\n                class=\"whitespace-no-wrap\"\n              >\n                <div class=\"h-3 w-3 inline-block rounded-full mr-3\" :class=\"'bg-' + label.color\"></div>\n                <span>{{ label.text }}</span>\n              </vs-dropdown-item>\n            </vs-dropdown-menu>\n          </vs-dropdown>\n\n          <feather-icon\n            icon=\"MailIcon\"\n            class=\"ml-5 cursor-pointer\"\n            svg-classes=\"h-6 w-6\"\n            @click=\"updateMarkUnread\"\n          />\n\n          <feather-icon\n            v-if=\"mailFilter != 'trash'\"\n            icon=\"TrashIcon\"\n            class=\"cursor-pointer ml-5\"\n            svg-classes=\"h-6 w-6\"\n            @click=\"moveTo('trash')\"\n          />\n        </div>\n      </div>\n\n      <!-- EMAILS LIST -->\n      <component\n        :is=\"scrollbarTag\"\n        class=\"email-content-scroll-area\"\n        :settings=\"settings\"\n        ref=\"mailListPS\"\n        :key=\"$vs.rtl\"\n      >\n        <transition-group name=\"list-enter-up\" class=\"email__mails\" tag=\"ul\" appear>\n          <li\n            class=\"cursor-pointer email__mail-item\"\n            v-for=\"(mail, index) in mails\"\n            :key=\"String(mailFilter) + String(mail.id)\"\n            @click=\"updateOpenMail(mail.id)\"\n            :style=\"{transitionDelay: (index * 0.1) + 's'}\"\n          >\n            <mail-item\n              :mail=\"mail\"\n              :isSelected=\"isMailSelected(mail.id)\"\n              @addToSelected=\"addToSelectedMails\"\n              @removeSelected=\"removeSelectedMail\"\n            />\n          </li>\n        </transition-group>\n      </component>\n    </div>\n\n    <!-- EMAIL VIEW SIDEBAR -->\n    <email-view\n      :emailTags=\"emailTags\"\n      :openMailId=\"openMailId\"\n      :isSidebarActive=\"isSidebarActive\"\n      :mailFilter=\"mailFilter\"\n      @markUnread=\"updateSingleMarkUnread\"\n      @removeMail=\"removeOpenMail\"\n      @previousMail=\"previousMail\"\n      @nextMail=\"nextMail\"\n      @moveTo=\"moveCurrentTo\"\n      @closeSidebar=\"closeMailViewSidebar\"\n    ></email-view>\n  </div>\n</template>\n\n<script>\nimport EmailSidebar from \"./EmailSidebar.vue\";\nimport MailItem from \"./MailItem.vue\";\nimport EmailView from \"./EmailView.vue\";\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\nimport moduleEmail from \"@/store/email/moduleEmail.js\";\n\nexport default {\n  data() {\n    return {\n      openMailId: null,\n      selectedMails: [],\n      isSidebarActive: false,\n      showThread: false,\n      clickNotClose: true,\n      isEmailSidebarActive: true,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.3\n      }\n    };\n  },\n  watch: {\n    isSidebarActive(value) {\n      if (!value) this.showThread = false;\n    },\n    mailFilter() {\n      this.selectedMails = [];\n\n      const scroll_el = this.$refs.mailListPS.$el || this.$refs.mailListPS;\n      scroll_el.scrollTop = 0;\n\n      this.$store.commit(\"email/UPDATE_MAIL_FILTER\", this.$route.params.filter);\n      this.$store.dispatch(\"email/fetchEmails\", {\n        filter: this.$route.params.filter\n      });\n      this.toggleEmailSidebar();\n    },\n    windowWidth() {\n      this.setSidebarWidth();\n    }\n  },\n  computed: {\n    mailFilter() {\n      return this.$route.params.filter;\n    },\n    emailTags() {\n      return this.$store.state.email.mailTags;\n    },\n    searchQuery: {\n      get() {\n        return this.$store.state.email.mailSearchQuery;\n      },\n      set(val) {\n        this.$store.dispatch(\"email/setEmailSearchQuery\", val);\n      }\n    },\n    selectAllCheckBox: {\n      get() {\n        return this.selectedMails.length;\n      },\n      set(value) {\n        value\n          ? (this.selectedMails = this.mails.map(mail => mail.id))\n          : (this.selectedMails = []);\n      }\n    },\n    mails() {\n      return this.$store.getters[\"email/filteredMails\"];\n    },\n    selectAllIcon() {\n      return this.selectedMails.length === this.mails.length\n        ? \"icon-check\"\n        : \"icon-minus\";\n    },\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    isMailSelected() {\n      return mailId => this.selectedMails.indexOf(mailId) !== -1;\n    },\n    windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    updateOpenMail(mailId) {\n      this.openMailId = mailId;\n      this.isSidebarActive = true;\n    },\n    addToSelectedMails(mailId) {\n      if (this.selectedMails.indexOf(mailId) === -1)\n        this.selectedMails.push(mailId);\n    },\n    removeSelectedMail(mailId) {\n      const mailIndex = this.selectedMails.indexOf(mailId);\n      if (mailIndex !== -1) this.selectedMails.splice(mailIndex, 1);\n    },\n    moveTo(to) {\n      const payload = { emailIds: this.selectedMails, to };\n      this.$store.dispatch(\"email/moveMailsTo\", payload).catch(error => {\n        console.error(error);\n      });\n      this.selectedMails = [];\n    },\n    moveCurrentTo(to) {\n      this.selectedMails = [this.openMailId];\n      this.moveTo(to);\n    },\n    updateMarkUnread() {\n      const payload = { emailIds: this.selectedMails, unreadFlag: true };\n      this.$store.dispatch(\"email/setUnread\", payload);\n      this.selectedMails = [];\n    },\n    removeOpenMail() {\n      this.selectedMails = [this.openMailId];\n      this.moveTo(\"trashed\");\n      this.isSidebarActive = false;\n    },\n    toggleIsStarred() {\n      const payload = {\n        mailId: this.currentMail.id,\n        value: !this.currentMail.isStarred\n      };\n      this.$store.dispatch(\"email/toggleIsMailStarred\", payload);\n    },\n    nextMail() {\n      const currentMailIndex = this.mails.findIndex(\n        mail => mail.id === this.openMailId\n      );\n      if (this.mails[currentMailIndex + 1])\n        this.openMailId = this.mails[currentMailIndex + 1].id;\n    },\n    previousMail() {\n      const currentMailIndex = this.mails.findIndex(\n        mail => mail.id === this.openMailId\n      );\n      if (this.mails[currentMailIndex - 1])\n        this.openMailId = this.mails[currentMailIndex - 1].id;\n    },\n    updateSingleMarkUnread() {\n      this.selectedMails = [this.openMailId];\n      this.updateMarkUnread();\n      this.isSidebarActive = false;\n    },\n    updateLabels(label) {\n      this.$store.dispatch(\"email/updateLabels\", {\n        mails: this.selectedMails,\n        label\n      });\n      this.selectedMails = [];\n    },\n    closeMailViewSidebar() {\n      this.isSidebarActive = false;\n    },\n    setSidebarWidth() {\n      if (this.windowWidth < 992) {\n        this.isEmailSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isEmailSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleEmailSidebar(value = false) {\n      if (!value) {\n        this.closeMailViewSidebar();\n        if (this.clickNotClose) {\n          return;\n        }\n      }\n      this.isEmailSidebarActive = value;\n    }\n  },\n  components: {\n    MailItem,\n    EmailSidebar,\n    EmailView,\n    VuePerfectScrollbar\n  },\n  created() {\n    this.$store.registerModule(\"email\", moduleEmail);\n    this.setSidebarWidth();\n\n    this.$store.commit(\"email/UPDATE_MAIL_FILTER\", this.$route.params.filter); // Update Mail Filter\n    this.$store.dispatch(\"email/fetchEmails\", {\n      filter: this.$route.params.filter\n    }); // Fetch Emails From API\n    this.$store.dispatch(\"email/fetchMeta\"); // Fetch Unread Mails\n    this.$store.dispatch(\"email/fetchTags\"); // Fetch Mail Tags\n  },\n  beforeDestroy() {\n    this.$store.unregisterModule(\"email\");\n  },\n  mounted() {\n    this.$store.dispatch(\"email/setEmailSearchQuery\", \"\");\n  }\n};\n</script>\n\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/apps/email.scss\";\n</style>\n"]}]}