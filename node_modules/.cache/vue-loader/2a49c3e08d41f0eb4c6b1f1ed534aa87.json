{"remainingRequest":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\proyetos2020vue\\TAVOCR\\src\\views\\apps\\chat\\Chat.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"D:\\proyetos2020vue\\TAVOCR\\src\\views\\apps\\chat\\Chat.vue","mtime":1602974933315},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"@/assets/scss/vuexy/apps/chat.scss\";\n",{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6aA","file":"Chat.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<!-- =========================================================================================\n    File Name: Chat.vue\n    Description: Chat Application - Stay connected\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n<template>\n      <!-- USER PROFILE SIDEBAR -->\n\n<div  v-if=\"getTokenChat\"  id=\"chat-app\" class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\">\n       \n       <!-- TOKEN CHAT:{{getTokenChat}}-->\n\n    <vs-sidebar   class=\"items-no-padding\" parent=\"#chat-app\" :click-not-close=\"clickNotClose\" :hidden-background=\"clickNotClose\" v-model=\"isChatSidebarActive\" id=\"chat-list-sidebar\">\n\n   \n        <user-profile :active=\"activeProfileSidebar\" :userId=\"userProfileId\" class=\"user-profile-container\" :isLoggedInUser=\"isLoggedInUserProfileView\" @closeProfileSidebar=\"closeProfileSidebar\"></user-profile>\n\n        <div class=\"chat__profile-search flex p-4\">\n            <div class=\"relative inline-flex\">\n                <!--vs-avatar v-if=\"activeUser.photoURL\" class=\"m-0 border-2 border-solid border-white\" :src=\"activeUser.photoURL\" size=\"40px\" @click=\"showProfileSidebar(Number(activeUser.uid), true)\" /-->\n                <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute right-0 bottom-0\" :class=\"'bg-' + getStatusColor(true)\"></div>\n            </div>\n            <vs-input icon-no-border icon=\"icon-search\" icon-pack=\"feather\" class=\"w-full mx-5 input-rounded-full\" placeholder=\"Search or start a new chat\" v-model=\"searchQuery\" />\n\n            <feather-icon class=\"md:inline-flex lg:hidden -ml-3 cursor-pointer\" icon=\"XIcon\" @click=\"toggleChatSidebar(false)\" />\n        </div>\n\n        <vs-divider class=\"d-theme-border-grey-light m-0\" />\n\n        <component :is=\"scrollbarTag\" class=\"chat-scroll-area pt-4\" :settings=\"settings\" :key=\"$vs.rtl\">\n\n            <!-- ACTIVE CHATS LIST -->\n            TOKEN CHAT:{{getTokenChat}}\n            <p :class=\"colorConectado\">Estado del chat: {{getChatconnect}}</p>\n             \n            <div class=\"chat__chats-list mb-8\">\n                <h3 class=\"text-primary mb-5 px-4\">Chats Principal</h3>\n                <ul class=\"chat__active-chats bordered-items\">\n                    <li class=\"cursor-pointer\" v-for=\"(contact, index) in chatContacts\" :key=\"index\" @click=\"updateActiveChatUser(contact.uid)\">\n                        <chat-contact v-if=\"chatLastMessaged\" showLastMsg :contact=\"contact\" :lastMessaged=\"chatLastMessaged(contact.uid).time\" :unseenMsg=\"chatUnseenMessages(contact.uid)\" :isActiveChatUser=\"isActiveChatUser(contact.uid)\"></chat-contact>\n                    </li>\n                </ul>\n            </div>\n\n            <!-- CONTACTS LIST -->\n            CONTACTS LIST CHAT.VUE\n            <div class=\"chat__contacts\">\n                <h3 class=\"text-primary mb-5 px-4\">Contacts</h3>\n                <ul class=\"chat__contacts bordered-items\">\n                    <li class=\"cursor-pointer\" v-for=\"contact in contacts\" :key=\"contact.uid\" @click=\"updateActiveChatUser(contact.uid)\">\n                        <chat-contact :contact=\"contact\"></chat-contact>\n                    </li>\n                </ul>\n            </div>\n\n        </component>\n    </vs-sidebar>\n\n    <!-- RIGHT COLUMN -->\n    RIGHT COLUMN CHAT.VUE\n    <div class=\"chat__bg no-scroll-content chat-content-area border border-solid d-theme-border-grey-light border-t-0 border-r-0 border-b-0\" :class=\"{'sidebar-spacer--wide': clickNotClose, 'flex items-center justify-center': activeChatUser === null}\">\n\n        <template v-if=\"activeChatUser\">\n            <div class=\"chat__navbar\">\n\n                <chat-navbar :isSidebarCollapsed=\"!clickNotClose\" :user-id=\"activeChatUser\" :isPinnedProp=\"isChatPinned\" @openContactsSidebar=\"toggleChatSidebar(true)\" @showProfileSidebar=\"showProfileSidebar\" @toggleIsChatPinned=\"toggleIsChatPinned\"></chat-navbar>\n\n            </div>\n\n            <component :is=\"scrollbarTag\" class=\"chat-content-scroll-area border border-solid d-theme-border-grey-light\" :settings=\"settings\" ref=\"chatLogPS\" :key=\"$vs.rtl\">\n                <div class=\"chat__log\" ref=\"chatLog\">\n                    <chat-log :userId=\"activeChatUser\" v-if=\"activeChatUser\"></chat-log>\n                </div>\n            </component>\n\n            <div class=\"chat__input flex p-4 bg-white\">\n\n                <vs-input class=\"flex-1\" placeholder=\"Su Mensaje aqui\" v-model=\"typedMessage\" @keyup.enter=\"sendMsg\" />\n\n                <vs-button class=\"bg-primary-gradient ml-4\" type=\"filled\" @click=\"sendMsg\">Send</vs-button>\n\n            </div>\n\n        </template>\n\n        <template v-else>\n            <div class=\"flex flex-col items-center\">\n                <feather-icon icon=\"MessageSquareIcon\" class=\"mb-4 bg-white p-8 shadow-md rounded-full\" svgClasses=\"w-16 h-16\"></feather-icon>\n                <h4 class=\" py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\" @click.stop=\"toggleChatSidebar(true)\">Start Conversation</h4>\n            </div>\n        </template>\n    </div>\n</div>\n<div  v-else>\n <div class=\"flex flex-col items-center\">\n\n    conctado2: {{getChatconnect}}\n       </div>\n    <div class=\"flex flex-col items-center\">\n        TOKEN CHAT:{{getChatconnect}}\n                <feather-icon icon=\"MessageSquareIcon\" class=\"mb-4 bg-white p-8 shadow-md rounded-full\" svgClasses=\"w-16 h-16\"></feather-icon>\n                <h4 class=\" py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\" @click.stop=\"recarga()\">Start Conversation</h4>\n            </div>\n</div>\n\n\n\n</template>\n\n<script>\nimport Vue from \"vue\";\nimport {\n    mapActions\n} from \"vuex\";\n\nimport ChatContact from './ChatContact.vue'\nimport ChatLog from './ChatLog.vue'\nimport ChatNavbar from './ChatNavbar.vue'\nimport UserProfile from './UserProfile.vue'\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport moduleChat from '@/store/chat/moduleChat.js'\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\";\n\n//import io from 'socket.io-client';\nexport default {\n\n    created() {\n\n        let datos = {\n            NumEmpresa: this.getProfile[0].Empresa,\n            userid: this.getProfile[0].num_user\n        }\n        // contactos  \n        this.getfetContacts(datos);\n        this.getChatContacts(datos);\n        this.setSidebarWidth()\n\n    },\n\n    mounted() { \n        try {\n            this.$socket.connect();    \n            this.$store.commit('chat/MUTCHATCONNECT', 'No Conectado sus Mensajes No seran Entregados') \n\n            const payload = { \n                'NumEmpresa': this.getProfile[0].Empresa, \n                'username': this.getProfile[0].Username,\n                'id': this.getProfile[0].num_user, \n                'msg':this.mensajeConectado\n            }\n \n \n           \n            this.$socket.emit('TEST_CONNECTION',  payload,\n              function(response){    \n                  console.log(\"se disparo el   collback de Conectado \",response);  \n                 \n              }\n            );\n            \n\n        } catch (error) {\n            console.log(\"en Chat.vue  en mounted catch\" + error);\n        } \n        this.typedMessage = ''\n\n    },\n\n    data() {\n        return {\n            tokenChat: \"\",\n            colorConectado:\"text-danger\",\n            mensajeConectado:'Listo* Puede Chatear',\n           \n             \n            chatMsg: {\n                msg: 1\n            },\n            messages: [],\n            active: true,\n            isHidden: false,\n            searchContact: '',\n            activeProfileSidebar: false,\n            activeChatUser: true,\n            userProfileId: -1,\n            typedMessage: '',\n            isChatPinned: false,\n            settings: {\n                maxScrollbarLength: 60,\n                wheelSpeed: 0.70\n            },\n            clickNotClose: true,\n            isChatSidebarActive: true,\n            isLoggedInUserProfileView: false,\n        }\n    },\n    watch: { \n        getChatconnect() {\n            if (this.getChatconnect==this.mensajeConectado)\n              this.colorConectado=\"text-success\";\n        },\n        chatMsg() {\n            alert(\"cambio \");\n            console.log(\"mensaje\", this.chatMsg);\n            this.setMessage(this.chatMsg);\n        },\n\n        windowWidth() {\n            this.setSidebarWidth()\n        },\n        getProfile() {\n            console.log(\"cambio el profile CHAT LINEA 167 APROX\")\n            //  alert(\"profile cambio \");\n        },\n    },\n    computed: {\n        getChatconnect() {\n            return this.$store.state.chat.chatconnect;\n        },\n        getRecargar() {\n            return this.$store.state.recargar;\n        },\n        getAppActiveUser() {\n            return this.$store.state.AppActiveUser;\n        },\n        getchats() {\n\n            return this.$store.state.chat.chats;\n        },\n        getProfile() {\n            return this.$store.state.dsoaLogin.profile;\n        },\n        // COMPONENTE DIVISOFT CHAT\n        getTokenChat() {\n            return this.$store.state.dsoaLogin.token;\n\n        },\n\n        chatLastMessaged() {\n            return (userId) => this.$store.getters['chat/chatLastMessaged'](userId)\n        },\n        chatUnseenMessages() {\n            return (userId) => {\n                const unseenMsg = this.$store.getters['chat/chatUnseenMessages'](userId)\n                if (unseenMsg) return unseenMsg\n            }\n        },\n        activeUser() {\n            return this.$store.state.AppActiveUser\n        },\n        getStatusColor() {\n            return (isActiveUser) => {\n                const userStatus = this.getUserStatus(isActiveUser)\n\n                if (userStatus === 'online') {\n                    return 'success'\n                } else if (userStatus === 'do not disturb') {\n                    return 'danger'\n                } else if (userStatus === 'away') {\n                    return 'warning'\n                } else {\n                    return 'grey'\n                }\n            }\n        },\n        chatContacts() {\n            return this.$store.getters['chat/chatContacts']\n        },\n        contacts() {\n            return this.$store.getters['chat/contacts']\n        },\n\n        searchQuery: {\n            get() {\n                if (this.$store.state.chat.chatSearchQuery)\n                    return this.$store.state.chat.chatSearchQuery\n                else\n                    return \"\";\n            },\n            set(val) {\n                this.$store.dispatch('chat/setChatSearchQuery', val)\n            }\n        },\n        scrollbarTag() {\n            return this.$store.getters.scrollbarTag\n        },\n        isActiveChatUser() {\n\n            return (userId) => userId === this.activeChatUser\n        },\n        windowWidth() {\n            return this.$store.state.windowWidth\n        }\n    },\n    methods: {\n        recarga()\n        {\n           this.$router.go(this.$router.currentRoute);  \n        },\n        getUserStatus(isActiveUser) {\n            // return \"active\"\n            return isActiveUser ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status\n        },\n        closeProfileSidebar(value) {\n            this.activeProfileSidebar = value\n        },\n\n        updateActiveChatUser(contactId) {\n            this.activeChatUser = contactId\n\n            let datos = {\n                NumEmpresa: this.getProfile[0].Empresa,\n                userid: this.getProfile[0].num_user,\n                userSend: contactId\n            }\n\n            this.getfetChats(datos);\n\n            if (this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\n                this.$store.dispatch('chat/markSeenAllMessages', contactId)\n            }\n            const chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)\n            if (chatData) this.isChatPinned = chatData.isPinned\n            else this.isChatPinned = false\n            this.toggleChatSidebar()\n            this.typedMessage = ''\n\n        },\n        showProfileSidebar(userId, openOnLeft = false) {\n            this.userProfileId = userId\n            this.isLoggedInUserProfileView = openOnLeft\n            this.activeProfileSidebar = !this.activeProfileSidebar\n        },\n\n        sendMsg() {\n            //alert(\"divisoft envieando MENSAJE\");\n            if (!this.typedMessage) return\n            if (!this.activeChatUser) return\n\n            const payload = {\n                'NumEmpresa': this.getProfile[0].Empresa,\n                'isPinned': this.isChatPinned,\n                'username': this.getProfile[0].Username,\n                'sendusernum': this.getProfile[0].num_user,\n\n                'msg': {\n                    'textContent': this.typedMessage,\n                    'time': String(new Date()),\n                    'isSent': true,\n                    'isSeen': false\n                },\n                'id': this.activeChatUser\n            }\n            //ADEMAR VER SI HAY COMUNICACION \n            console.log(\"enviando \", JSON.stringify(payload));\n\n            this.typedMessage = ''\n\n            // se lo manda al destinatrio \n\n            this.$socket.emit('SEND_MESSAGE', payload,\n              function(response){     \n                 console.log(\"se disparo el  collback\",response);\n              }\n            );\n            // lo refresca en nuestro chat\n \n            this.$store.dispatch('chat/SENDCHATMESSAGE', payload)\n\n            const scroll_el = this.$refs.chatLogPS.$el || this.$refs.chatLogPS\n            scroll_el.scrollTop = this.$refs.chatLog.scrollHeight\n\n        },\n\n        setMessage(data) {\n\n            this.$store.commit(\"chat/SEND_CHAT_MESSAGE\", data);\n        },\n\n        toggleIsChatPinned(value) {\n            this.isChatPinned = value\n        },\n        setSidebarWidth() {\n            if (this.windowWidth < 1200) {\n                this.isChatSidebarActive = this.clickNotClose = false\n            } else {\n                this.isChatSidebarActive = this.clickNotClose = true\n            }\n        },\n        toggleChatSidebar(value = false) {\n            if (!value && this.clickNotClose) return\n            this.isChatSidebarActive = value\n        },\n\n        getfetContacts(datos) {\n            this.$store.dispatch('chat/fetchContacts', datos);\n            return 1;\n        },\n\n        getfetChats(datos) {\n            this.$store.dispatch('chat/fetchChats', datos);\n            return 1;\n        },\n        getChatContacts(datos) {\n            this.$store.dispatch('chat/fetchChatContacts', datos);\n            return 1;\n        }\n\n    },\n    components: {\n        VuePerfectScrollbar,\n        ChatContact,\n        UserProfile,\n        ChatNavbar,\n        ChatLog\n    },\n\n    /* beforeDestroy() {\n         this.$store.unregisterModule('chat')\n     }*/\n\n}\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/apps/chat.scss\";\n</style>\n"]}]}