{"remainingRequest":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\proyetos2020vue\\TAVOCR\\src\\views\\pages\\Mensajeria.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\proyetos2020vue\\TAVOCR\\src\\views\\pages\\Mensajeria.vue","mtime":1602289528661},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      searchword: '',\r\n      treeData: [{\r\n        title: 'node1',\r\n        expanded: true,\r\n        children: [{\r\n          title: 'node 1-1',\r\n          expanded: true,\r\n          children: [{\r\n            title: 'node 1-1-1'\r\n          }, {\r\n            title: 'node 1-1-2'\r\n          }, {\r\n            title: 'node 1-1-3'\r\n          }]\r\n        }, {\r\n          title: 'node 1-2',\r\n          children: [{\r\n            title: \"<span style='color: red'>node 1-2-1</span>\"\r\n          }, {\r\n            title: \"<span style='color: red'>node 1-2-2</span>\"\r\n          }]\r\n        }]\r\n      }]\r\n    }\r\n  },\r\n  methods: {\r\n    search () {\r\n      this.$refs.tree.searchNodes(this.searchword)\r\n    },\r\n    tpl (...args) {\r\n      let {0: node, 2: parent, 3: index} = args\r\n      let titleClass = node.selected ? 'node-title node-selected' : 'node-title'\r\n      if (node.searched) titleClass += ' node-searched'\r\n      return <span>\r\n        <span class=\"tree-expand\" onClick={() => this.$refs.tree.addNode(node, {title: 'sync node'})}>+</span>\r\n         <span class={titleClass} domPropsInnerHTML={node.title} onClick={() => {\r\n           this.$refs.tree.nodeSelected(node)\r\n         }}></span>\r\n      <button class=\"btn-async text-warning border-none cursor-pointer px-2 py-1 mr-2 rounded\" onClick={() => this.asyncLoad(node)}>async</button>\r\n      <button class=\"btn-delete text-danger border-none cursor-pointer px-2 py-1 rounded\" onClick={() => this.$refs.tree.delNode(node, parent, index)}>delete</button>\r\n      </span>\r\n    },\r\n    async asyncLoad (node) {\r\n      const {checked = false} = node\r\n      this.$set(node, 'loading', true)\r\n      let pro = new Promise(resolve => {\r\n        setTimeout(resolve, 2000, ['async node1', 'async node2'])\r\n      })\r\n      this.$refs.tree.addNodes(node, await pro)\r\n      this.$set(node, 'loading', false)\r\n      if (checked) {\r\n        this.$refs.tree.childCheckedHandle(node, checked)\r\n      }\r\n    },\r\n  },\r\n  components: {\r\n    VTree,\r\n    VSelectTree\r\n  }\r\n}\r\n",{"version":3,"sources":["Mensajeria.vue"],"names":[],"mappings":";;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Mensajeria.vue","sourceRoot":"src/views/pages","sourcesContent":["<template>\r\n<div>\r\n  <vs-input class=\"inputx tree-search-input float-left mr-2\" placeholder=\"Search...\" v-model.lazy=\"searchword\" />\r\n  <vs-button color=\"primary\" type=\"filled\" @click=\"search\" class=\"mb-3\">Search</vs-button>\r\n  <v-tree ref='tree' :canDeleteRoot=\"true\" :data='treeData' :draggable='true' :tpl='tpl' :halfcheck='true' :multiple=\"true\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { VTree, VSelectTree}  from 'vue-tree-halower'\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      searchword: '',\r\n      treeData: [{\r\n        title: 'node1',\r\n        expanded: true,\r\n        children: [{\r\n          title: 'node 1-1',\r\n          expanded: true,\r\n          children: [{\r\n            title: 'node 1-1-1'\r\n          }, {\r\n            title: 'node 1-1-2'\r\n          }, {\r\n            title: 'node 1-1-3'\r\n          }]\r\n        }, {\r\n          title: 'node 1-2',\r\n          children: [{\r\n            title: \"<span style='color: red'>node 1-2-1</span>\"\r\n          }, {\r\n            title: \"<span style='color: red'>node 1-2-2</span>\"\r\n          }]\r\n        }]\r\n      }]\r\n    }\r\n  },\r\n  methods: {\r\n    search () {\r\n      this.$refs.tree.searchNodes(this.searchword)\r\n    },\r\n    tpl (...args) {\r\n      let {0: node, 2: parent, 3: index} = args\r\n      let titleClass = node.selected ? 'node-title node-selected' : 'node-title'\r\n      if (node.searched) titleClass += ' node-searched'\r\n      return <span>\r\n        <span class=\"tree-expand\" onClick={() => this.$refs.tree.addNode(node, {title: 'sync node'})}>+</span>\r\n         <span class={titleClass} domPropsInnerHTML={node.title} onClick={() => {\r\n           this.$refs.tree.nodeSelected(node)\r\n         }}></span>\r\n      <button class=\"btn-async text-warning border-none cursor-pointer px-2 py-1 mr-2 rounded\" onClick={() => this.asyncLoad(node)}>async</button>\r\n      <button class=\"btn-delete text-danger border-none cursor-pointer px-2 py-1 rounded\" onClick={() => this.$refs.tree.delNode(node, parent, index)}>delete</button>\r\n      </span>\r\n    },\r\n    async asyncLoad (node) {\r\n      const {checked = false} = node\r\n      this.$set(node, 'loading', true)\r\n      let pro = new Promise(resolve => {\r\n        setTimeout(resolve, 2000, ['async node1', 'async node2'])\r\n      })\r\n      this.$refs.tree.addNodes(node, await pro)\r\n      this.$set(node, 'loading', false)\r\n      if (checked) {\r\n        this.$refs.tree.childCheckedHandle(node, checked)\r\n      }\r\n    },\r\n  },\r\n  components: {\r\n    VTree,\r\n    VSelectTree\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuexy/extraComponents/tree.scss\";"]}]}