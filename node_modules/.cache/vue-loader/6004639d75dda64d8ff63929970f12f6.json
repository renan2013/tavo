{"remainingRequest":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\src\\views\\apps\\chat\\ChatNavbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\src\\views\\apps\\chat\\ChatNavbar.vue","mtime":1597015032000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n    props: {\n        userId: {\n            type: Number,\n            required: true\n        },\n        isPinnedProp: {\n            type: Boolean,\n            required: true\n        },\n        isSidebarCollapsed: {\n            type: Boolean,\n            required: true\n        }\n    },\n    computed: {\n        isPinnedLocal: {\n            get() {\n                return this.isPinnedProp\n            },\n            set(val) {\n                const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId)\n                if (chatData) {\n                    const payload = {\n                        id: this.userId,\n                        value: val\n                    }\n                    this.$store.dispatch('chat/toggleIsPinned', payload)\n                        .then(() => {\n                            this.$emit('toggleIsChatPinned', val)\n                        })\n                        .catch((err) => {\n                            console.error(err)\n                        })\n                } else {\n                    this.$emit('toggleIsChatPinned', val)\n                }\n            }\n        },\n        \n        getConts2() \n        { \n         \n        return  this.$store.getters['chat/contact'](this.userId)\n         },\n        getStatusColor() {\n            return (isActiveUser) => {\n                \n                const userStatus = this.getUserStatus(isActiveUser)\n\n                if (userStatus === 'online') {\n                    return 'success'\n                } else if (userStatus === 'do not disturb') {\n                    return 'danger'\n                } else if (userStatus === 'away') {\n                    return 'warning'\n                } else {\n                    return 'grey'\n                }\n            }\n        }\n    },\n    methods: {\n       \n        getUserStatus(isActiveUser) {\n            return true\n            //return isActiveUser ? this.$store.state.AppActiveUser.status : this.getConts2.status\n        }\n    }\n}\n",{"version":3,"sources":["ChatNavbar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ChatNavbar.vue","sourceRoot":"src/views/apps/chat","sourcesContent":["<!-- =========================================================================================\n    File Name: ChatNavbar.vue\n    Description: Chat Application - Chat navbar\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n\n\n    comentario de COMPONETE\n========================================================================================== -->\n\n<template>\n<div v-if=\"userId != null\" class=\"chat__header\">\n     \n  \n    <vs-navbar class=\"p-4 flex navbar-custom\" color=\"white\" type=\"flat\">\n        <div class=\"relative flex mr-4\">\n          \n            <feather-icon icon=\"MenuIcon\" class=\"mr-4 cursor-pointer\" v-if=\"isSidebarCollapsed\" \n            @click.stop=\"$emit('openContactsSidebar')\" />\n\n            <!--vs-avatar class=\"m-0 border-2 border-solid border-white\" size=\"40px\" :src=\"userDetails.photoURL\" \n            @click.stop=\"$emit('showProfileSidebar', userId)\" /-->\n\n            <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute right-0 bottom-0\" \n            :class=\"'bg-' + getStatusColor(false)\"></div>\n        </div>\n\n        <h6>{{ getConts2.displayName }}</h6>\n        <vs-spacer></vs-spacer>\n        <feather-icon icon=\"StarIcon\" class=\"cursor-pointer\" :svgClasses=\"[{'text-warning stroke-current': isPinnedLocal}, 'w-6', 'h-6']\" \n        @click.stop=\"isPinnedLocal = !isPinnedLocal\"></feather-icon>\n    </vs-navbar>\n</div>\n</template>\n\n<script>\nexport default {\n    props: {\n        userId: {\n            type: Number,\n            required: true\n        },\n        isPinnedProp: {\n            type: Boolean,\n            required: true\n        },\n        isSidebarCollapsed: {\n            type: Boolean,\n            required: true\n        }\n    },\n    computed: {\n        isPinnedLocal: {\n            get() {\n                return this.isPinnedProp\n            },\n            set(val) {\n                const chatData = this.$store.getters['chat/chatDataOfUser'](this.userId)\n                if (chatData) {\n                    const payload = {\n                        id: this.userId,\n                        value: val\n                    }\n                    this.$store.dispatch('chat/toggleIsPinned', payload)\n                        .then(() => {\n                            this.$emit('toggleIsChatPinned', val)\n                        })\n                        .catch((err) => {\n                            console.error(err)\n                        })\n                } else {\n                    this.$emit('toggleIsChatPinned', val)\n                }\n            }\n        },\n        \n        getConts2() \n        { \n         \n        return  this.$store.getters['chat/contact'](this.userId)\n         },\n        getStatusColor() {\n            return (isActiveUser) => {\n                \n                const userStatus = this.getUserStatus(isActiveUser)\n\n                if (userStatus === 'online') {\n                    return 'success'\n                } else if (userStatus === 'do not disturb') {\n                    return 'danger'\n                } else if (userStatus === 'away') {\n                    return 'warning'\n                } else {\n                    return 'grey'\n                }\n            }\n        }\n    },\n    methods: {\n       \n        getUserStatus(isActiveUser) {\n            return true\n            //return isActiveUser ? this.$store.state.AppActiveUser.status : this.getConts2.status\n        }\n    }\n}\n</script>\n"]}]}