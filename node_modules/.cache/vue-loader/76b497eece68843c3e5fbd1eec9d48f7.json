{"remainingRequest":"D:\\proyetos2020vue\\v1.3\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\proyetos2020vue\\v1.3\\src\\divisoft\\inputComponent\\BaseinputRadio.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\proyetos2020vue\\v1.3\\src\\divisoft\\inputComponent\\BaseinputRadio.vue","mtime":1600308078158},{"path":"D:\\proyetos2020vue\\v1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\v1.3\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\v1.3\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\proyetos2020vue\\v1.3\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n  \r\n\r\nexport default {\r\n       props: {\r\n            'label-name': '',\r\n            'name': '',\r\n            'value': '',\r\n            'options': '',\r\n        },\r\n\r\n        data() {\r\n        return {\r\n          color:\"success\"\r\n        }\r\n    },\r\n     \r\n    methods: {\r\n         clicked(item) {  \r\n   \r\n      this.$emit(\"input\", item.value);\r\n\r\n\r\n    }\r\n    /*,\r\n      clicked: function(variable, key, value) {\r\n    // none of this is right, it doesn't update the vue data model\r\n\t\twindow[variable] = value; //assign the new value to the dynamic variable name\r\n\t\tselected = value;\r\n\t\tthis.$emit(\"click-event\", variable) //create the click event for model updating by the parent\r\n    }*/\r\n    }\r\n  }\r\n",{"version":3,"sources":["BaseinputRadio.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"BaseinputRadio.vue","sourceRoot":"src/divisoft/inputComponent","sourcesContent":["<template id=\"radio-set\">\r\n  <div>\r\n   radio\r\n    <ul class=\"centerx\">\r\n        <li  \r\n        type=\"button\"\r\n        v-for=\"(item, index) in options\"\r\n        :key=\"index\"\r\n        @click=\"clicked(item)\"\r\n        :id=\"name\" \r\n        :name=\"name\" \r\n        :label=\"labelName\" \r\n        >   \r\n        \r\n         <vs-checkbox    :vs-value=\"item.value\" :color=\"color\">{{item.text}}</vs-checkbox>\r\n        </li>\r\n    </ul>\r\n \r\n </div>\r\n</template>\r\n \r\n\r\n<script>  \r\n\r\nexport default {\r\n       props: {\r\n            'label-name': '',\r\n            'name': '',\r\n            'value': '',\r\n            'options': '',\r\n        },\r\n\r\n        data() {\r\n        return {\r\n          color:\"success\"\r\n        }\r\n    },\r\n     \r\n    methods: {\r\n         clicked(item) {  \r\n   \r\n      this.$emit(\"input\", item.value);\r\n\r\n\r\n    }\r\n    /*,\r\n      clicked: function(variable, key, value) {\r\n    // none of this is right, it doesn't update the vue data model\r\n\t\twindow[variable] = value; //assign the new value to the dynamic variable name\r\n\t\tselected = value;\r\n\t\tthis.$emit(\"click-event\", variable) //create the click event for model updating by the parent\r\n    }*/\r\n    }\r\n  }\r\n</script>  "]}]}