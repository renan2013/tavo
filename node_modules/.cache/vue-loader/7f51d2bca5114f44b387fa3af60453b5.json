{"remainingRequest":"C:\\Users\\Renan Galvan\\Desktop\\proyectos_git_lab\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Renan Galvan\\Desktop\\proyectos_git_lab\\TAVOCR\\src\\layouts\\components\\navbar\\components\\ContactsDropDown.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Renan Galvan\\Desktop\\proyectos_git_lab\\TAVOCR\\src\\layouts\\components\\navbar\\components\\ContactsDropDown.vue","mtime":1603835469185},{"path":"C:\\Users\\Renan Galvan\\Desktop\\proyectos_git_lab\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Renan Galvan\\Desktop\\proyectos_git_lab\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Renan Galvan\\Desktop\\proyectos_git_lab\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Renan Galvan\\Desktop\\proyectos_git_lab\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\nimport ChatContact from \"../../../../views/apps/chat/ChatContact.vue\"; //./ChatContact.vue\";\n\nexport default {\n  components: {\n    VuePerfectScrollbar,\n  },\n\n  created() {\n    let datos = {\n      NumEmpresa: this.getProfile[0].Empresa,\n      userid: this.getProfile[0].num_user,\n    };\n    // contactos\n    this.getfetContacts(datos);\n  },\n\n  data() {\n    return {\n      activeChatUser: true,\n      settings: {\n        maxScrollbarLength: 20,\n        wheelSpeed: 0.7,\n      },\n      unreadNotifications: [\n        {\n          index: 0,\n          title: \"New Message\",\n          msg: \"Are your going to meet me tonight?\",\n          icon: \"MessageSquareIcon\",\n          time: this.randomDate({ sec: 10 }),\n          category: \"primary\",\n        },\n        {\n          index: 1,\n          title: \"New Order Recieved\",\n          msg: \"You got new order of goods.\",\n          icon: \"PackageIcon\",\n          time: this.randomDate({ sec: 40 }),\n          category: \"success\",\n        },\n        {\n          index: 2,\n          title: \"Server Limit Reached!\",\n          msg: \"Server have 99% CPU usage.\",\n          icon: \"AlertOctagonIcon\",\n          time: this.randomDate({ min: 1 }),\n          category: \"danger\",\n        },\n        {\n          index: 3,\n          title: \"New Mail From Peter\",\n          msg: \"Cake sesame snaps cupcake\",\n          icon: \"MailIcon\",\n          time: this.randomDate({ min: 6 }),\n          category: \"primary\",\n        },\n        {\n          index: 4,\n          title: \"Bruce's Party\",\n          msg: \"Chocolate cake oat cake tiramisu\",\n          icon: \"CalendarIcon\",\n          time: this.randomDate({ hr: 2 }),\n          category: \"warning\",\n        },\n        {\n          index: 5,\n          title: \"New Message\",\n          msg: \"Are your going to meet me tonight?\",\n          icon: \"MessageSquareIcon\",\n          time: this.randomDate({ sec: 10 }),\n          category: \"primary\",\n        },\n      ],\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.6,\n      },\n    };\n  },\n  computed: {\n    contacts() {\n      return this.$store.getters[\"chat/contacts\"];\n    },\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n  },\n  methods: {\n    getfetContacts(datos) {\n      this.$store.dispatch(\"chat/fetchContacts\", datos);\n      return 1;\n    },\n    updateActiveChatUser(contactId) {\n      this.activeChatUser = contactId;\n    },\n    elapsedTime(startTime) {\n      const x = new Date(startTime);\n      const now = new Date();\n      let timeDiff = now - x;\n      timeDiff /= 1000;\n\n      const seconds = Math.round(timeDiff);\n      timeDiff = Math.floor(timeDiff / 60);\n\n      const minutes = Math.round(timeDiff % 60);\n      timeDiff = Math.floor(timeDiff / 60);\n\n      const hours = Math.round(timeDiff % 24);\n      timeDiff = Math.floor(timeDiff / 24);\n\n      const days = Math.round(timeDiff % 365);\n      timeDiff = Math.floor(timeDiff / 365);\n\n      const years = timeDiff;\n\n      if (years > 0) {\n        return `${years + (years > 1 ? \" Years \" : \" Year \")}ago`;\n      } else if (days > 0) {\n        return `${days + (days > 1 ? \" Days \" : \" Day \")}ago`;\n      } else if (hours > 0) {\n        return `${hours + (hours > 1 ? \" Hrs \" : \" Hour \")}ago`;\n      } else if (minutes > 0) {\n        return `${minutes + (minutes > 1 ? \" Mins \" : \" Min \")}ago`;\n      } else if (seconds > 0) {\n        return seconds + (seconds > 1 ? \" sec ago\" : \"just now\");\n      }\n\n      return \"Just Now\";\n    },\n    // Method for creating dummy notification time\n    randomDate({ hr, min, sec }) {\n      const date = new Date();\n\n      if (hr) date.setHours(date.getHours() - hr);\n      if (min) date.setMinutes(date.getMinutes() - min);\n      if (sec) date.setSeconds(date.getSeconds() - sec);\n\n      return date;\n    },\n  },\n};\n",{"version":3,"sources":["ContactsDropDown.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"ContactsDropDown.vue","sourceRoot":"src/layouts/components/navbar/components","sourcesContent":[" <!-- ContactsDropDown.vue  {{ contacts }}-->\n<template>\n  <!-- NOTIFICACIONES -->\n  <vs-dropdown vs-custom-content vs-trigger-click class=\"cursor-pointer\">\n    <feather-icon\n      icon=\"UserIcon\"\n      class=\"cursor-pointer mt-1 sm:mr-6 mr-2\"\n      :badge=\"unreadNotifications.length\"\n    />\n\n    <vs-dropdown-menu\n      class=\"notification-dropdown dropdown-custom vx-navbar-dropdown\"\n    >\n      <component\n        :is=\"scrollbarTag\"\n        class=\"chat-scroll-area pt-4\"\n        :settings=\"settings\"\n        :key=\"$vs.rtl\"\n      >\n        <!-- CONTACTS LIST -->\n        <div class=\"chat__contacts\">\n          <h3 class=\"text-primary mb-5 px-4\">Contacts</h3>\n          <ul class=\"chat__contacts bordered-items\">\n            <li\n              class=\"cursor-pointer\"\n              v-for=\"contact in contacts\"\n              :key=\"contact.uid\"\n              @click=\"updateActiveChatUser(contact.uid)\"\n            >\n              <chat-contact :contact=\"contact\"></chat-contact>\n            </li>\n          </ul>\n        </div>\n      </component>\n\n      <!--chat-contact\n        v-if=\"chatLastMessaged\"\n        showLastMsg\n        :contact=\"contact\"\n        :lastMessaged=\"chatLastMessaged(contact.uid).time\"\n        :unseenMsg=\"chatUnseenMessages(contact.uid)\"\n        :isActiveChatUser=\"isActiveChatUser(contact.uid)\"\n      ></chat-contact\n      <component\n        :is=\"scrollbarTag\"\n        ref=\"mainSidebarPs\"\n        class=\"scroll-area--nofications-dropdown p-0 mb-10\"\n        :settings=\"settings\"\n        :key=\"$vs.rtl\"\n      >\n        <ul class=\"bordered-items\">\n          <li\n            v-for=\"contact in contacts\"\n            :key=\"contact.uid\"\n            class=\"flex justify-between px-4 py-4 notification cursor-pointer\"\n          >\n            <div class=\"flex items-start\">\n              <vs-avatar\n                class=\"border-2 border-solid border-white\"\n                :src=\"contact.photoURL\"\n                size=\"42px\"\n              />\n              <div class=\"mx-2\">\n                <span class=\"font-medium block notification-title\">{{\n                  contact.displayName\n                }}</span>\n                <small>{{ contact.displayName }}</small>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </component>-->\n\n      <div\n        class=\"checkout-footer fixed bottom-0 rounded-b-lg text-primary w-full p-2 font-semibold text-center border border-b-0 border-l-0 border-r-0 border-solid d-theme-border-grey-light cursor-pointer\"\n      >\n        <!--span>View All Notifications</span-->\n      </div>\n    </vs-dropdown-menu>\n  </vs-dropdown>\n</template>\n\n<script>\nimport VuePerfectScrollbar from \"vue-perfect-scrollbar\";\nimport ChatContact from \"../../../../views/apps/chat/ChatContact.vue\"; //./ChatContact.vue\";\n\nexport default {\n  components: {\n    VuePerfectScrollbar,\n  },\n\n  created() {\n    let datos = {\n      NumEmpresa: this.getProfile[0].Empresa,\n      userid: this.getProfile[0].num_user,\n    };\n    // contactos\n    this.getfetContacts(datos);\n  },\n\n  data() {\n    return {\n      activeChatUser: true,\n      settings: {\n        maxScrollbarLength: 20,\n        wheelSpeed: 0.7,\n      },\n      unreadNotifications: [\n        {\n          index: 0,\n          title: \"New Message\",\n          msg: \"Are your going to meet me tonight?\",\n          icon: \"MessageSquareIcon\",\n          time: this.randomDate({ sec: 10 }),\n          category: \"primary\",\n        },\n        {\n          index: 1,\n          title: \"New Order Recieved\",\n          msg: \"You got new order of goods.\",\n          icon: \"PackageIcon\",\n          time: this.randomDate({ sec: 40 }),\n          category: \"success\",\n        },\n        {\n          index: 2,\n          title: \"Server Limit Reached!\",\n          msg: \"Server have 99% CPU usage.\",\n          icon: \"AlertOctagonIcon\",\n          time: this.randomDate({ min: 1 }),\n          category: \"danger\",\n        },\n        {\n          index: 3,\n          title: \"New Mail From Peter\",\n          msg: \"Cake sesame snaps cupcake\",\n          icon: \"MailIcon\",\n          time: this.randomDate({ min: 6 }),\n          category: \"primary\",\n        },\n        {\n          index: 4,\n          title: \"Bruce's Party\",\n          msg: \"Chocolate cake oat cake tiramisu\",\n          icon: \"CalendarIcon\",\n          time: this.randomDate({ hr: 2 }),\n          category: \"warning\",\n        },\n        {\n          index: 5,\n          title: \"New Message\",\n          msg: \"Are your going to meet me tonight?\",\n          icon: \"MessageSquareIcon\",\n          time: this.randomDate({ sec: 10 }),\n          category: \"primary\",\n        },\n      ],\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.6,\n      },\n    };\n  },\n  computed: {\n    contacts() {\n      return this.$store.getters[\"chat/contacts\"];\n    },\n    scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n  },\n  methods: {\n    getfetContacts(datos) {\n      this.$store.dispatch(\"chat/fetchContacts\", datos);\n      return 1;\n    },\n    updateActiveChatUser(contactId) {\n      this.activeChatUser = contactId;\n    },\n    elapsedTime(startTime) {\n      const x = new Date(startTime);\n      const now = new Date();\n      let timeDiff = now - x;\n      timeDiff /= 1000;\n\n      const seconds = Math.round(timeDiff);\n      timeDiff = Math.floor(timeDiff / 60);\n\n      const minutes = Math.round(timeDiff % 60);\n      timeDiff = Math.floor(timeDiff / 60);\n\n      const hours = Math.round(timeDiff % 24);\n      timeDiff = Math.floor(timeDiff / 24);\n\n      const days = Math.round(timeDiff % 365);\n      timeDiff = Math.floor(timeDiff / 365);\n\n      const years = timeDiff;\n\n      if (years > 0) {\n        return `${years + (years > 1 ? \" Years \" : \" Year \")}ago`;\n      } else if (days > 0) {\n        return `${days + (days > 1 ? \" Days \" : \" Day \")}ago`;\n      } else if (hours > 0) {\n        return `${hours + (hours > 1 ? \" Hrs \" : \" Hour \")}ago`;\n      } else if (minutes > 0) {\n        return `${minutes + (minutes > 1 ? \" Mins \" : \" Min \")}ago`;\n      } else if (seconds > 0) {\n        return seconds + (seconds > 1 ? \" sec ago\" : \"just now\");\n      }\n\n      return \"Just Now\";\n    },\n    // Method for creating dummy notification time\n    randomDate({ hr, min, sec }) {\n      const date = new Date();\n\n      if (hr) date.setHours(date.getHours() - hr);\n      if (min) date.setMinutes(date.getMinutes() - min);\n      if (sec) date.setSeconds(date.getSeconds() - sec);\n\n      return date;\n    },\n  },\n};\n</script>\n\n"]}]}