{"remainingRequest":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\layouts\\components\\horizontal-nav-menu\\HorizontalNavMenuHeader.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\layouts\\components\\horizontal-nav-menu\\HorizontalNavMenuHeader.vue","mtime":1604601625150},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604601561321},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\babel-loader\\lib\\index.js","mtime":1604601556483},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604601561321},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\index.js","mtime":1604601615297}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport HNavMenuGroup from './HorizontalNavMenuGroup.vue'\r\nimport HNavMenuItem from './HorizontalNavMenuItem.vue'\r\n\r\nexport default {\r\n  props: {\r\n    header: {\r\n      type: Object,\r\n      requried: true\r\n    },\r\n    openOnHover: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  components: {\r\n    HNavMenuGroup,\r\n    HNavMenuItem\r\n  },\r\n  data () {\r\n    return {\r\n      showChildren: false,\r\n      isHovered: false,\r\n      dropRight: false\r\n    }\r\n  },\r\n  computed: {\r\n    isHeaderActive () {\r\n      const path        = this.$route.fullPath\r\n      let active        = false\r\n      const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\r\n\r\n      this.header.items.forEach((item) => {\r\n\r\n        // If item is group\r\n        if (item.submenu) {\r\n          if (this.checkGrpChildrenActive(item)) { active = true }\r\n        } else if (item.url) {\r\n          if (path === item.url || routeParent === item.slug) { active = true }\r\n        }\r\n      })\r\n\r\n      return active\r\n    }\r\n  },\r\n  watch: {\r\n    showChildren () {\r\n      this.$nextTick(() => {\r\n        if (this.showChildren) {\r\n          const dd = this.$refs.headerDropdown\r\n          if (dd.getBoundingClientRect().left + dd.offsetWidth - (window.innerWidth - 16) >= 0) {\r\n            this.dropRight = true\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    checkGrpChildrenActive (group) {\r\n\r\n      const path        = this.$route.fullPath\r\n      let active        = false\r\n      const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\r\n\r\n      if (group.submenu) {\r\n        group.submenu.forEach((item) => {\r\n          if ((path === item.url || routeParent === item.slug) && item.slug) active = true\r\n          else if (item.submenu) { if (this.checkGrpChildrenActive(item)) active = true }\r\n        })\r\n      }\r\n\r\n      return active\r\n    },\r\n    hovered (val = true) {\r\n      this.isHovered = val\r\n      if (this.openOnHover) {\r\n        val ? this.showChildren = true : this.showChildren = false\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["HorizontalNavMenuHeader.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"HorizontalNavMenuHeader.vue","sourceRoot":"src/layouts/components/horizontal-nav-menu","sourcesContent":["<template>\r\n  <div\r\n    class=\"nav-header py-4\"\r\n    @mouseover  = \"hovered\"\r\n    @mouseleave = \"hovered(false)\"\r\n    @click = \"showChildren = !showChildren\">\r\n\r\n    <!-- header -->\r\n    <div\r\n      class=\"header-label flex items-center cursor-pointer relative px-5 py-2\"\r\n      :class=\"[\r\n        {'text-white bg-primary-gradient header-active': isHeaderActive},\r\n        {'header-open': isHovered || showChildren}\r\n        ]\">\r\n      <feather-icon :icon=\"header.icon\" svgClasses=\"h-5 w-5\" class=\"mr-3\" />\r\n      <span class=\"whitespace-no-wrap\">{{ $t(header.i18n) || header.header }}</span>\r\n      <feather-icon icon=\"ChevronDownIcon\" svgClasses=\"h-4 w-4\" class=\"ml-1\" />\r\n    </div>\r\n\r\n    <!-- Children -->\r\n    <transition name=\"fade-top-2x\">\r\n      <ul class=\"header-children h-nav-menu-dd shadow-drop text-intial absolute shadow-lg py-2\" :class=\"{'dd-right': dropRight}\" v-show=\"showChildren\" ref=\"headerDropdown\">\r\n        <li v-for=\"(item, index) in header.items\" :key=\"item.name\">\r\n          <template v-if=\"!item.submenu\">\r\n            <h-nav-menu-item\r\n              :to=\"item.slug != 'external' ? item.url : ''\"\r\n              :href=\"item.slug == 'external' ? item.url : ''\"\r\n              :icon=\"item.icon\" :target=\"item.target\"\r\n              :isDisabled=\"item.isDisabled\"\r\n              :slug=\"item.slug\">\r\n                <span class=\"truncate\">{{ $t(item.i18n) || item.name }}</span>\r\n                <vs-chip :color=\"item.tagColor\" v-if=\"item.tag\">{{ item.tag }}</vs-chip>\r\n            </h-nav-menu-item>\r\n          </template>\r\n          <template v-else>\r\n            <h-nav-menu-group\r\n              openHover\r\n              :key=\"`group-${index}`\"\r\n              :group=\"item\"\r\n              :groupIndex=\"index\"\r\n              :open=\"checkGrpChildrenActive(item)\" />\r\n          </template>\r\n        </li>\r\n      </ul>\r\n    </transition>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport HNavMenuGroup from './HorizontalNavMenuGroup.vue'\r\nimport HNavMenuItem from './HorizontalNavMenuItem.vue'\r\n\r\nexport default {\r\n  props: {\r\n    header: {\r\n      type: Object,\r\n      requried: true\r\n    },\r\n    openOnHover: {\r\n      type: Boolean,\r\n      default: true\r\n    }\r\n  },\r\n  components: {\r\n    HNavMenuGroup,\r\n    HNavMenuItem\r\n  },\r\n  data () {\r\n    return {\r\n      showChildren: false,\r\n      isHovered: false,\r\n      dropRight: false\r\n    }\r\n  },\r\n  computed: {\r\n    isHeaderActive () {\r\n      const path        = this.$route.fullPath\r\n      let active        = false\r\n      const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\r\n\r\n      this.header.items.forEach((item) => {\r\n\r\n        // If item is group\r\n        if (item.submenu) {\r\n          if (this.checkGrpChildrenActive(item)) { active = true }\r\n        } else if (item.url) {\r\n          if (path === item.url || routeParent === item.slug) { active = true }\r\n        }\r\n      })\r\n\r\n      return active\r\n    }\r\n  },\r\n  watch: {\r\n    showChildren () {\r\n      this.$nextTick(() => {\r\n        if (this.showChildren) {\r\n          const dd = this.$refs.headerDropdown\r\n          if (dd.getBoundingClientRect().left + dd.offsetWidth - (window.innerWidth - 16) >= 0) {\r\n            this.dropRight = true\r\n          }\r\n        }\r\n      })\r\n    }\r\n  },\r\n  methods: {\r\n    checkGrpChildrenActive (group) {\r\n\r\n      const path        = this.$route.fullPath\r\n      let active        = false\r\n      const routeParent = this.$route.meta ? this.$route.meta.parent : undefined\r\n\r\n      if (group.submenu) {\r\n        group.submenu.forEach((item) => {\r\n          if ((path === item.url || routeParent === item.slug) && item.slug) active = true\r\n          else if (item.submenu) { if (this.checkGrpChildrenActive(item)) active = true }\r\n        })\r\n      }\r\n\r\n      return active\r\n    },\r\n    hovered (val = true) {\r\n      this.isHovered = val\r\n      if (this.openOnHover) {\r\n        val ? this.showChildren = true : this.showChildren = false\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n@import \"@/assets/scss/vuexy/components/horizontalNavMenuHeader.scss\";\r\n</style>\r\n"]}]}