{"remainingRequest":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\divisoft\\gonow\\shop\\ob2518\\Edit2518.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\divisoft\\gonow\\shop\\ob2518\\Edit2518.vue","mtime":1604601624615},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604601561321},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\babel-loader\\lib\\index.js","mtime":1604601556483},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604601561321},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\index.js","mtime":1604601615297}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport {\r\n    FormWizard,\r\n    TabContent\r\n} from 'vue-form-wizard'\r\nimport 'vue-form-wizard/dist/vue-form-wizard.min.css'\r\n\r\n// For custom error message\r\nimport {\r\n    Validator\r\n} from 'vee-validate'\r\n\r\n\r\n \r\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\"; \r\n   import proceSP  from \"@/divisoft/storeProcDivisoft.vue\";\r\n// NO USAR SI NO HAY FECHAS\r\nimport flatPickr from \"vue-flatpickr-component\";\r\nimport \"flatpickr/dist/flatpickr.min.css\";\r\nimport { Spanish } from \"flatpickr/dist/l10n/es.js\";\r\n// FIN IMPORT POR FECHAS  \r\n  \r\n     //  CMS IMPORT PARA CARGAR Y VER ARCHIVOS\r\nimport UploadDefault from \"@/divisoft/uploadFile/UploadDefault.vue\";\r\nimport downloadDefault from \"@/divisoft/downloadFile/downloadDefault.vue\";\r\n\r\n// TIPOS NUMERICOS\r\n\r\nimport BaseN1  from \"@/divisoft/inputComponent/BaseinputDecimal.vue\";\r\n\r\n\r\n\r\nconst dict = {\r\n    custom: {\r\n        first_name: {\r\n            required: 'First name is required',\r\n            alpha: 'First name may only contain alphabetic characters'\r\n        },\r\n        last_name: {\r\n            required: 'Last name is required',\r\n            alpha: 'Last name may only contain alphabetic characters'\r\n        },\r\n        email: {\r\n            required: 'Email is required',\r\n            email: 'Please enter valid email'\r\n        },\r\n        job_title: {\r\n            required: 'Job title name is required',\r\n            alpha: 'Job title may only contain alphabetic characters'\r\n        },\r\n        proposal_title: {\r\n            required: 'Proposal title name is required',\r\n            alpha: 'Proposal title may only contain alphabetic characters'\r\n        },\r\n        event_name: {\r\n            required: 'Event name is required',\r\n            alpha: 'Event name may only contain alphabetic characters'\r\n        }\r\n    }\r\n}\r\n\r\n// register custom messages\r\nValidator.localize('en', dict)\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            city: 'new-york',\r\n            proposalTitle: '',\r\n            jobTitle: '',\r\n            textarea: '',\r\n            eventName: '',\r\n            eventLocation: 'san-francisco',\r\n            status: 'plannning',\r\n            cityOptions: [{\r\n                    text: 'New York',\r\n                    value: 'new-york'\r\n                },\r\n                {\r\n                    text: 'Chicago',\r\n                    value: 'chicago'\r\n                },\r\n                {\r\n                    text: 'San Francisco',\r\n                    value: 'san-francisco'\r\n                },\r\n                {\r\n                    text: 'Boston',\r\n                    value: 'boston'\r\n                }\r\n            ],\r\n            statusOptions: [{\r\n                    text: 'Plannning',\r\n                    value: 'plannning'\r\n                },\r\n                {\r\n                    text: 'In Progress',\r\n                    value: 'in progress'\r\n                },\r\n                {\r\n                    text: 'Finished',\r\n                    value: 'finished'\r\n                }\r\n            ],\r\n            LocationOptions: [{\r\n                    text: 'New York',\r\n                    value: 'new-york'\r\n                },\r\n                {\r\n                    text: 'Chicago',\r\n                    value: 'chicago'\r\n                },\r\n                {\r\n                    text: 'San Francisco',\r\n                    value: 'san-francisco'\r\n                },\r\n                {\r\n                    text: 'Boston',\r\n                    value: 'boston'\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    methods: {\r\n        validateStep1() {\r\n            return new Promise((resolve, reject) => {\r\n                this.$validator.validateAll('step-1').then(result => {\r\n                    if (result) {\r\n                        resolve(true)\r\n                    } else {\r\n                        reject('correct all values')\r\n                    }\r\n                })\r\n            })\r\n        },\r\n        validateStep2() {\r\n            return new Promise((resolve, reject) => {\r\n                this.$validator.validateAll('step-2').then(result => {\r\n                    if (result) {\r\n                        resolve(true)\r\n                    } else {\r\n                        reject('correct all values')\r\n                    }\r\n                })\r\n            })\r\n        },\r\n        validateStep3() {\r\n            return new Promise((resolve, reject) => {\r\n                this.$validator.validateAll('step-3').then(result => {\r\n                    if (result) {\r\n                        alert('Form submitted!')\r\n                        resolve(true)\r\n                    } else {\r\n                        reject('correct all values')\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    },\r\n    components: {\r\n        FormWizard,\r\n        TabContent,\r\n        \r\n     proceSP,\r\n    flatPickr,\r\n   \r\n    Prism,   \r\n    //subir una imagen\r\n    UploadDefault,\r\n     downloadDefault,\r\n    BaseN1\r\n    }\r\n}\r\n",{"version":3,"sources":["Edit2518.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Edit2518.vue","sourceRoot":"src/divisoft/gonow/shop/ob2518","sourcesContent":["<!-- =========================================================================================\r\n  File Name: FormWizardValidation.vue\r\n  Description: Form wizard with validation\r\n  ----------------------------------------------------------------------------------------\r\n  Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\r\n  Author: Pixinvent\r\n  Author URL: http://www.themeforest.net/user/pixinvent\r\n========================================================================================== -->\r\n\r\n<template>\r\n<vx-card title=\"Form wizard with validation\" code-toggler>\r\n\r\n    <p>Implement Form validation with form wizard using popular <strong>\r\n            <router-link to=\"/forms/form-validation\">VeeValidate</router-link>\r\n        </strong></p>\r\n\r\n    <div class=\"mt-5\">\r\n        <form-wizard color=\"rgba(var(--vs-primary), 1)\" errorColor=\"rgba(var(--vs-danger), 1)\" :title=\"null\" :subtitle=\"null\" finishButtonText=\"Submit\">\r\n            <tab-content title=\"Step 1\" class=\"mb-5\" icon=\"feather icon-home\" :before-change=\"validateStep1\">\r\n\r\n                <!-- tab 1 content -->\r\n                <form data-vv-scope=\"step-1\">\r\n                    <div class=\"vx-row\">\r\n                        <div class=\"vx-col md:w-1/2 w-full mt-5\">\r\n                            <vs-input label=\"First Name\" v-model=\"firstName\" class=\"w-full\" name=\"first_name\" v-validate=\"'required|alpha'\" />\r\n                            <span class=\"text-danger\">{{ errors.first('step-1.first_name') }}</span>\r\n                        </div>\r\n                        <div class=\"vx-col md:w-1/2 w-full mt-5\">\r\n                            <vs-input label=\"Last Name\" v-model=\"lastName\" class=\"w-full\" name=\"last_name\" v-validate=\"'required|alpha'\" />\r\n                            <span class=\"text-danger\">{{ errors.first('step-1.last_name') }}</span>\r\n                        </div>\r\n                        <div class=\"vx-col md:w-1/2 w-full mt-5\">\r\n                            <vs-input type=\"email\" label=\"Email\" v-model=\"email\" class=\"w-full\" name=\"email\" v-validate=\"'required|email'\" />\r\n                            <span class=\"text-danger\">{{ errors.first('step-1.email') }}</span>\r\n                        </div>\r\n                        <div class=\"vx-col md:w-1/2 w-full mt-5\">\r\n                            <vs-select v-model=\"city\" class=\"w-full select-large\" label=\"City\">\r\n                                <vs-select-item :key=\"index\" :value=\"item.value\" :text=\"item.text\" v-for=\"(item,index) in cityOptions\" class=\"w-full\" />\r\n                            </vs-select>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </tab-content>\r\n\r\n            <!-- tab 2 content -->\r\n            <tab-content title=\"Step 2\" class=\"mb-5\" icon=\"feather icon-briefcase\" :before-change=\"validateStep2\">\r\n                <form data-vv-scope=\"step-2\">\r\n                    <div class=\"vx-row\">\r\n                        <div class=\"vx-col md:w-1/2 w-full\">\r\n                            <vs-input label=\"Proposal Title\" v-model=\"proposalTitle\" class=\"w-full mt-4\" name=\"proposal_title\" v-validate=\"'required|alpha_spaces'\" />\r\n                            <span class=\"text-danger\">{{ errors.first('step-2.proposal_title') }}</span>\r\n\r\n                            <vs-input label=\"Job Title\" v-model=\"jobTitle\" class=\"w-full mt-4\" name=\"job_title\" v-validate=\"'required|alpha_spaces'\" />\r\n                            <span class=\"text-danger\">{{ errors.first('step-2.job_title') }}</span>\r\n                        </div>\r\n                        <div class=\"vx-col md:w-1/2 w-full\">\r\n                            <vs-textarea v-model=\"textarea\" label=\"Short discription\" class=\"md:mt-10 mt-6 mb-0\" rows=\"3\" />\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </tab-content>\r\n\r\n            <!-- tab 3 content -->\r\n            <tab-content title=\"Step 3\" class=\"mb-5\" icon=\"feather icon-image\" :before-change=\"validateStep3\">\r\n                <form data-vv-scope=\"step-3\">\r\n                    <div class=\"vx-row\">\r\n                        <div class=\"vx-col md:w-1/2 w-full\">\r\n                            <vs-input label=\"Event Name\" v-model=\"eventName\" class=\"w-full mt-5\" name=\"event_name\" v-validate=\"'required|alpha_spaces'\" />\r\n                            <span class=\"text-danger\">{{ errors.first('step-3.event_name') }}</span>\r\n                        </div>\r\n                        <div class=\"vx-col md:w-1/2 w-full\">\r\n                            <vs-select v-model=\"city\" class=\"w-full select-large mt-5\" label=\"Event Location\">\r\n                                <vs-select-item :key=\"index\" :value=\"item.value\" :text=\"item.text\" v-for=\"(item,index) in cityOptions\" class=\"w-full\" />\r\n                            </vs-select>\r\n                        </div>\r\n                        <div class=\"vx-col md:w-1/2 w-full mt-5\">\r\n                            <vs-select v-model=\"status\" class=\"w-full select-large\" label=\"Event Status\">\r\n                                <vs-select-item :key=\"index\" :value=\"item.value\" :text=\"item.text\" v-for=\"(item,index) in statusOptions\" class=\"w-full\" />\r\n                            </vs-select>\r\n                        </div>\r\n                        <div class=\"vx-col md:w-1/2 w-full md:mt-8\">\r\n                            <div class=\"demo-alignment\">\r\n                                <span>Requirements:</span>\r\n                                <div class=\"flex\">\r\n                                    <vs-checkbox>Staffing</vs-checkbox>\r\n                                    <vs-checkbox>Catering</vs-checkbox>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </tab-content>\r\n        </form-wizard>\r\n    </div>\r\n\r\n</vx-card>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n    FormWizard,\r\n    TabContent\r\n} from 'vue-form-wizard'\r\nimport 'vue-form-wizard/dist/vue-form-wizard.min.css'\r\n\r\n// For custom error message\r\nimport {\r\n    Validator\r\n} from 'vee-validate'\r\n\r\n\r\n \r\nimport * as divilib from \"@/divisoftlibs/utilDivisoftJS.js\"; \r\n   import proceSP  from \"@/divisoft/storeProcDivisoft.vue\";\r\n// NO USAR SI NO HAY FECHAS\r\nimport flatPickr from \"vue-flatpickr-component\";\r\nimport \"flatpickr/dist/flatpickr.min.css\";\r\nimport { Spanish } from \"flatpickr/dist/l10n/es.js\";\r\n// FIN IMPORT POR FECHAS  \r\n  \r\n     //  CMS IMPORT PARA CARGAR Y VER ARCHIVOS\r\nimport UploadDefault from \"@/divisoft/uploadFile/UploadDefault.vue\";\r\nimport downloadDefault from \"@/divisoft/downloadFile/downloadDefault.vue\";\r\n\r\n// TIPOS NUMERICOS\r\n\r\nimport BaseN1  from \"@/divisoft/inputComponent/BaseinputDecimal.vue\";\r\n\r\n\r\n\r\nconst dict = {\r\n    custom: {\r\n        first_name: {\r\n            required: 'First name is required',\r\n            alpha: 'First name may only contain alphabetic characters'\r\n        },\r\n        last_name: {\r\n            required: 'Last name is required',\r\n            alpha: 'Last name may only contain alphabetic characters'\r\n        },\r\n        email: {\r\n            required: 'Email is required',\r\n            email: 'Please enter valid email'\r\n        },\r\n        job_title: {\r\n            required: 'Job title name is required',\r\n            alpha: 'Job title may only contain alphabetic characters'\r\n        },\r\n        proposal_title: {\r\n            required: 'Proposal title name is required',\r\n            alpha: 'Proposal title may only contain alphabetic characters'\r\n        },\r\n        event_name: {\r\n            required: 'Event name is required',\r\n            alpha: 'Event name may only contain alphabetic characters'\r\n        }\r\n    }\r\n}\r\n\r\n// register custom messages\r\nValidator.localize('en', dict)\r\n\r\nexport default {\r\n    data() {\r\n        return {\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            city: 'new-york',\r\n            proposalTitle: '',\r\n            jobTitle: '',\r\n            textarea: '',\r\n            eventName: '',\r\n            eventLocation: 'san-francisco',\r\n            status: 'plannning',\r\n            cityOptions: [{\r\n                    text: 'New York',\r\n                    value: 'new-york'\r\n                },\r\n                {\r\n                    text: 'Chicago',\r\n                    value: 'chicago'\r\n                },\r\n                {\r\n                    text: 'San Francisco',\r\n                    value: 'san-francisco'\r\n                },\r\n                {\r\n                    text: 'Boston',\r\n                    value: 'boston'\r\n                }\r\n            ],\r\n            statusOptions: [{\r\n                    text: 'Plannning',\r\n                    value: 'plannning'\r\n                },\r\n                {\r\n                    text: 'In Progress',\r\n                    value: 'in progress'\r\n                },\r\n                {\r\n                    text: 'Finished',\r\n                    value: 'finished'\r\n                }\r\n            ],\r\n            LocationOptions: [{\r\n                    text: 'New York',\r\n                    value: 'new-york'\r\n                },\r\n                {\r\n                    text: 'Chicago',\r\n                    value: 'chicago'\r\n                },\r\n                {\r\n                    text: 'San Francisco',\r\n                    value: 'san-francisco'\r\n                },\r\n                {\r\n                    text: 'Boston',\r\n                    value: 'boston'\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    methods: {\r\n        validateStep1() {\r\n            return new Promise((resolve, reject) => {\r\n                this.$validator.validateAll('step-1').then(result => {\r\n                    if (result) {\r\n                        resolve(true)\r\n                    } else {\r\n                        reject('correct all values')\r\n                    }\r\n                })\r\n            })\r\n        },\r\n        validateStep2() {\r\n            return new Promise((resolve, reject) => {\r\n                this.$validator.validateAll('step-2').then(result => {\r\n                    if (result) {\r\n                        resolve(true)\r\n                    } else {\r\n                        reject('correct all values')\r\n                    }\r\n                })\r\n            })\r\n        },\r\n        validateStep3() {\r\n            return new Promise((resolve, reject) => {\r\n                this.$validator.validateAll('step-3').then(result => {\r\n                    if (result) {\r\n                        alert('Form submitted!')\r\n                        resolve(true)\r\n                    } else {\r\n                        reject('correct all values')\r\n                    }\r\n                })\r\n            })\r\n        }\r\n    },\r\n    components: {\r\n        FormWizard,\r\n        TabContent,\r\n        \r\n     proceSP,\r\n    flatPickr,\r\n   \r\n    Prism,   \r\n    //subir una imagen\r\n    UploadDefault,\r\n     downloadDefault,\r\n    BaseN1\r\n    }\r\n}\r\n</script>\r\n"]}]}