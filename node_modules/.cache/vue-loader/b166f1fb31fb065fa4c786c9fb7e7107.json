{"remainingRequest":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\src\\divisoft\\inputComponent\\BaseinputDecimal.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\src\\divisoft\\inputComponent\\BaseinputDecimal.vue","mtime":1600738958000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\Oficina\\PROYECTO TAVO\\TAVOCR\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n \r\n  \r\nimport accounting from 'accounting-js'\r\nexport default {\r\n  name: 'VueNumeric',\r\n  props: {\r\n \r\n      label: {\r\n        type: String,\r\n        required: true\r\n      },\r\n     \r\n    /**\r\n     * Currency symbol.\r\n     */\r\n    currency: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Maximum value allowed.\r\n     */\r\n    max: {\r\n      type: [Number, String],\r\n      default: Number.MAX_SAFE_INTEGER || 9007199254740991,\r\n      required: false,\r\n    },\r\n    /**\r\n     * Minimum value allowed.\r\n     */\r\n    min: {\r\n      type: [Number, String],\r\n      default: Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n      required: false\r\n    },\r\n    /**\r\n     * Enable/Disable minus value.\r\n     */\r\n    minus: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n     \r\n    /**\r\n     * Value when the input is empty\r\n     * DEFAULT VALUE\r\n     */\r\n    emptyValue: {\r\n      type: [Number, String],\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Number of decimals.\r\n     * Decimals symbol are the opposite of separator symbol.\r\n     */\r\n    precision: {\r\n      type: [Number, String],\r\n      default: 0,\r\n      required: false\r\n    },\r\n    /**\r\n     * Thousand separator type.\r\n     * Separator props accept either . or , (default).\r\n     */\r\n    separator: {\r\n      type: String,\r\n      default: '.',\r\n      required: false\r\n    },\r\n    /**\r\n     * Forced thousand separator.\r\n     * Accepts any string.\r\n     */\r\n    thousandSeparator: {\r\n      default: ',',\r\n      required: false,\r\n      type: String\r\n    },\r\n    /**\r\n     * Forced decimal separator.\r\n     * Accepts any string.\r\n     */\r\n    decimalSeparator: {\r\n      default: '.',\r\n      required: false,\r\n      type: String\r\n    },\r\n    /**\r\n      * The output type used for v-model.\r\n      * It can either be String or Number (default).\r\n      */\r\n    outputType: {\r\n      required: false,\r\n        type: String,\r\n        default: 'Number'\r\n    },\r\n    /**\r\n     * v-model value.\r\n     */\r\n    value: {\r\n      type: Number,\r\n      default: 0,\r\n      required: true\r\n    },\r\n    /**\r\n     * Hide input and show value in text only.\r\n     */\r\n    readOnly: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n    /**\r\n     * Class for the span tag when readOnly props is true.\r\n     */\r\n    readOnlyClass: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Position of currency symbol\r\n     * Symbol position props accept either 'suffix' or 'prefix' (default).\r\n     */\r\n    currencySymbolPosition: {\r\n      type: String,\r\n      default: 'prefix',\r\n      required: false\r\n    }\r\n  },\r\n  data: () => ({\r\n    amount: ''\r\n  }),\r\n  computed: {\r\n    /**\r\n     * Number type of formatted value.\r\n     * @return {Number}\r\n     */\r\n    amountNumber () {\r\n      return this.unformat(this.amount)\r\n    },\r\n    /**\r\n     * Number type of value props.\r\n     * @return {Number}\r\n     */\r\n    valueNumber () {\r\n      return this.unformat(this.value)\r\n    },\r\n    /**\r\n     * Define decimal separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\r\n    decimalSeparatorSymbol () {\r\n      if (typeof this.decimalSeparator !== 'undefined') return this.decimalSeparator\r\n      if (this.separator === ',') return '.'\r\n      return ','\r\n    },\r\n    /**\r\n     * Define thousand separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\r\n    thousandSeparatorSymbol () {\r\n      if (typeof this.thousandSeparator !== 'undefined') return this.thousandSeparator\r\n      if (this.separator === '.') return '.'\r\n      if (this.separator === 'space') return ' '\r\n      return ','\r\n    },\r\n    /**\r\n     * Define format position for currency symbol and value.\r\n     * @return {String} format\r\n     */\r\n    symbolPosition () {\r\n      if (!this.currency) return '%v'\r\n      return this.currencySymbolPosition === 'suffix' ? '%v %s' : '%s %v'\r\n    }\r\n  },\r\n  watch: {\r\n    /**\r\n     * Watch for value change from other input with same v-model.\r\n     * @param {Number} newValue\r\n     */\r\n    valueNumber (newValue) {\r\n   \r\n      if (this.$refs.numeric !== document.activeElement) {\r\n        this.amount = this.format(newValue)\r\n      }\r\n    },\r\n    /**\r\n     * When readOnly is true, replace the span tag class.\r\n     * @param {Boolean} newValue\r\n     * @param {Boolean} oldValue\r\n     */\r\n    readOnly (newValue, oldValue) {\r\n      if (oldValue === false && newValue === true) {\r\n        this.$nextTick(() => {\r\n          this.$refs.readOnly.className = this.readOnlyClass\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * Immediately reflect separator changes\r\n     */\r\n    separator () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Immediately reflect currency changes\r\n     */\r\n    currency () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Immediately reflect precision changes\r\n     */\r\n    precision () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    }\r\n  },\r\n  mounted () {\r\n      \r\n    // Set default value props when label undefined.\r\n    if (!this.label) {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n      // In case of delayed props value.\r\n      setTimeout(() => {\r\n        this.process(this.valueNumber)\r\n        this.amount = this.format(this.valueNumber)\r\n      }, 500)\r\n    }\r\n    // Set read-only span element's class\r\n    if (this.readOnly) this.$refs.readOnly.className = this.readOnlyClass\r\n  },\r\n  methods: {\r\n    /**\r\n     * Handle blur event.\r\n     * @param {Object} e\r\n     */\r\n    onBlurHandler (e) {\r\n      this.$emit('blur', e)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Handle focus event.\r\n     * @param {Object} e\r\n     */\r\n    onFocusHandler (e) {\r\n      this.$emit('focus', e)\r\n      if (this.valueNumber === 0) {\r\n        this.amount = null\r\n      } else {\r\n        this.amount = accounting.formatMoney(this.valueNumber, {\r\n          symbol: '',\r\n          format: '%v',\r\n          thousand: '',\r\n          decimal: this.decimalSeparatorSymbol,\r\n          precision: Number(this.precision)\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * Handle input event.\r\n     */\r\n    onInputHandler () {\r\n      this.process(this.amountNumber)\r\n    },\r\n    /**\r\n     * Validate value before update the component.\r\n     * @param {Number} value\r\n     */\r\n    process (value) {\r\n      if (value >= this.max) this.update(this.max)\r\n      if (value <= this.min) this.update(this.min)\r\n      if (value > this.min && value < this.max) this.update(value)\r\n      if (!this.minus && value < 0) this.min >= 0 ? this.update(this.min) : this.update(0)\r\n    },\r\n    /**\r\n     * Update parent component model value.\r\n     * @param {Number} value\r\n     */\r\n    update (value) {\r\n      const fixedValue = accounting.toFixed(value, this.precision)\r\n      const output = this.outputType.toLowerCase() === 'string' ? fixedValue : Number(fixedValue)\r\n      this.$emit('input', output)\r\n    },\r\n    /**\r\n     * Format value using symbol and separator.\r\n     * @param {Number} value\r\n     * @return {String}\r\n     */\r\n    format (value) {\r\n      return accounting.formatMoney(value, {\r\n        symbol: this.currency,\r\n        format: this.symbolPosition,\r\n        precision: Number(this.precision),\r\n        decimal: this.decimalSeparatorSymbol,\r\n        thousand: this.thousandSeparatorSymbol\r\n      })\r\n    },\r\n    /**\r\n     * Remove symbol and separator.\r\n     * @param {Number} value\r\n     * @return {Number}\r\n     */\r\n    unformat (value) {\r\n      const toUnformat = typeof value === 'string' && value === '' ? this.emptyValue : value\r\n      return accounting.unformat(toUnformat, this.decimalSeparatorSymbol)\r\n    },\r\n    \r\n      \r\n\r\n  }\r\n}\r\n",{"version":3,"sources":["BaseinputDecimal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA","file":"BaseinputDecimal.vue","sourceRoot":"src/divisoft/inputComponent","sourcesContent":[" <template>\r\n\r\n <div class=\"centerx\"> \r\n    <label>{{ label }}</label>  \r\n  <input\r\n    class=\"vs-inputx vs-input--input large hasValue\"\r\n    style=\"border: 1px solid rgba(0, 0, 0, 0.2);\"\r\n    :placeholder=\"label\"\r\n    @blur=\"onBlurHandler\"\r\n    @input=\"onInputHandler\"\r\n    @focus=\"onFocusHandler\"\r\n    ref=\"numeric\"\r\n     v-model=\"amount\"\r\n    v-if=\"!readOnly\"\r\n  />\r\n   \r\n   \r\n  <span\r\n    v-else\r\n    ref=\"readOnly\"\r\n  >{{ amount }}</span>\r\n </div>\r\n</template>\r\n\r\n<script>\r\n \r\n  \r\nimport accounting from 'accounting-js'\r\nexport default {\r\n  name: 'VueNumeric',\r\n  props: {\r\n \r\n      label: {\r\n        type: String,\r\n        required: true\r\n      },\r\n     \r\n    /**\r\n     * Currency symbol.\r\n     */\r\n    currency: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Maximum value allowed.\r\n     */\r\n    max: {\r\n      type: [Number, String],\r\n      default: Number.MAX_SAFE_INTEGER || 9007199254740991,\r\n      required: false,\r\n    },\r\n    /**\r\n     * Minimum value allowed.\r\n     */\r\n    min: {\r\n      type: [Number, String],\r\n      default: Number.MIN_SAFE_INTEGER || -9007199254740991,\r\n      required: false\r\n    },\r\n    /**\r\n     * Enable/Disable minus value.\r\n     */\r\n    minus: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n     \r\n    /**\r\n     * Value when the input is empty\r\n     * DEFAULT VALUE\r\n     */\r\n    emptyValue: {\r\n      type: [Number, String],\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Number of decimals.\r\n     * Decimals symbol are the opposite of separator symbol.\r\n     */\r\n    precision: {\r\n      type: [Number, String],\r\n      default: 0,\r\n      required: false\r\n    },\r\n    /**\r\n     * Thousand separator type.\r\n     * Separator props accept either . or , (default).\r\n     */\r\n    separator: {\r\n      type: String,\r\n      default: '.',\r\n      required: false\r\n    },\r\n    /**\r\n     * Forced thousand separator.\r\n     * Accepts any string.\r\n     */\r\n    thousandSeparator: {\r\n      default: ',',\r\n      required: false,\r\n      type: String\r\n    },\r\n    /**\r\n     * Forced decimal separator.\r\n     * Accepts any string.\r\n     */\r\n    decimalSeparator: {\r\n      default: '.',\r\n      required: false,\r\n      type: String\r\n    },\r\n    /**\r\n      * The output type used for v-model.\r\n      * It can either be String or Number (default).\r\n      */\r\n    outputType: {\r\n      required: false,\r\n        type: String,\r\n        default: 'Number'\r\n    },\r\n    /**\r\n     * v-model value.\r\n     */\r\n    value: {\r\n      type: Number,\r\n      default: 0,\r\n      required: true\r\n    },\r\n    /**\r\n     * Hide input and show value in text only.\r\n     */\r\n    readOnly: {\r\n      type: Boolean,\r\n      default: false,\r\n      required: false\r\n    },\r\n    /**\r\n     * Class for the span tag when readOnly props is true.\r\n     */\r\n    readOnlyClass: {\r\n      type: String,\r\n      default: '',\r\n      required: false\r\n    },\r\n    /**\r\n     * Position of currency symbol\r\n     * Symbol position props accept either 'suffix' or 'prefix' (default).\r\n     */\r\n    currencySymbolPosition: {\r\n      type: String,\r\n      default: 'prefix',\r\n      required: false\r\n    }\r\n  },\r\n  data: () => ({\r\n    amount: ''\r\n  }),\r\n  computed: {\r\n    /**\r\n     * Number type of formatted value.\r\n     * @return {Number}\r\n     */\r\n    amountNumber () {\r\n      return this.unformat(this.amount)\r\n    },\r\n    /**\r\n     * Number type of value props.\r\n     * @return {Number}\r\n     */\r\n    valueNumber () {\r\n      return this.unformat(this.value)\r\n    },\r\n    /**\r\n     * Define decimal separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\r\n    decimalSeparatorSymbol () {\r\n      if (typeof this.decimalSeparator !== 'undefined') return this.decimalSeparator\r\n      if (this.separator === ',') return '.'\r\n      return ','\r\n    },\r\n    /**\r\n     * Define thousand separator based on separator props.\r\n     * @return {String} '.' or ','\r\n     */\r\n    thousandSeparatorSymbol () {\r\n      if (typeof this.thousandSeparator !== 'undefined') return this.thousandSeparator\r\n      if (this.separator === '.') return '.'\r\n      if (this.separator === 'space') return ' '\r\n      return ','\r\n    },\r\n    /**\r\n     * Define format position for currency symbol and value.\r\n     * @return {String} format\r\n     */\r\n    symbolPosition () {\r\n      if (!this.currency) return '%v'\r\n      return this.currencySymbolPosition === 'suffix' ? '%v %s' : '%s %v'\r\n    }\r\n  },\r\n  watch: {\r\n    /**\r\n     * Watch for value change from other input with same v-model.\r\n     * @param {Number} newValue\r\n     */\r\n    valueNumber (newValue) {\r\n   \r\n      if (this.$refs.numeric !== document.activeElement) {\r\n        this.amount = this.format(newValue)\r\n      }\r\n    },\r\n    /**\r\n     * When readOnly is true, replace the span tag class.\r\n     * @param {Boolean} newValue\r\n     * @param {Boolean} oldValue\r\n     */\r\n    readOnly (newValue, oldValue) {\r\n      if (oldValue === false && newValue === true) {\r\n        this.$nextTick(() => {\r\n          this.$refs.readOnly.className = this.readOnlyClass\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * Immediately reflect separator changes\r\n     */\r\n    separator () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Immediately reflect currency changes\r\n     */\r\n    currency () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Immediately reflect precision changes\r\n     */\r\n    precision () {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n    }\r\n  },\r\n  mounted () {\r\n      \r\n    // Set default value props when label undefined.\r\n    if (!this.label) {\r\n      this.process(this.valueNumber)\r\n      this.amount = this.format(this.valueNumber)\r\n      // In case of delayed props value.\r\n      setTimeout(() => {\r\n        this.process(this.valueNumber)\r\n        this.amount = this.format(this.valueNumber)\r\n      }, 500)\r\n    }\r\n    // Set read-only span element's class\r\n    if (this.readOnly) this.$refs.readOnly.className = this.readOnlyClass\r\n  },\r\n  methods: {\r\n    /**\r\n     * Handle blur event.\r\n     * @param {Object} e\r\n     */\r\n    onBlurHandler (e) {\r\n      this.$emit('blur', e)\r\n      this.amount = this.format(this.valueNumber)\r\n    },\r\n    /**\r\n     * Handle focus event.\r\n     * @param {Object} e\r\n     */\r\n    onFocusHandler (e) {\r\n      this.$emit('focus', e)\r\n      if (this.valueNumber === 0) {\r\n        this.amount = null\r\n      } else {\r\n        this.amount = accounting.formatMoney(this.valueNumber, {\r\n          symbol: '',\r\n          format: '%v',\r\n          thousand: '',\r\n          decimal: this.decimalSeparatorSymbol,\r\n          precision: Number(this.precision)\r\n        })\r\n      }\r\n    },\r\n    /**\r\n     * Handle input event.\r\n     */\r\n    onInputHandler () {\r\n      this.process(this.amountNumber)\r\n    },\r\n    /**\r\n     * Validate value before update the component.\r\n     * @param {Number} value\r\n     */\r\n    process (value) {\r\n      if (value >= this.max) this.update(this.max)\r\n      if (value <= this.min) this.update(this.min)\r\n      if (value > this.min && value < this.max) this.update(value)\r\n      if (!this.minus && value < 0) this.min >= 0 ? this.update(this.min) : this.update(0)\r\n    },\r\n    /**\r\n     * Update parent component model value.\r\n     * @param {Number} value\r\n     */\r\n    update (value) {\r\n      const fixedValue = accounting.toFixed(value, this.precision)\r\n      const output = this.outputType.toLowerCase() === 'string' ? fixedValue : Number(fixedValue)\r\n      this.$emit('input', output)\r\n    },\r\n    /**\r\n     * Format value using symbol and separator.\r\n     * @param {Number} value\r\n     * @return {String}\r\n     */\r\n    format (value) {\r\n      return accounting.formatMoney(value, {\r\n        symbol: this.currency,\r\n        format: this.symbolPosition,\r\n        precision: Number(this.precision),\r\n        decimal: this.decimalSeparatorSymbol,\r\n        thousand: this.thousandSeparatorSymbol\r\n      })\r\n    },\r\n    /**\r\n     * Remove symbol and separator.\r\n     * @param {Number} value\r\n     * @return {Number}\r\n     */\r\n    unformat (value) {\r\n      const toUnformat = typeof value === 'string' && value === '' ? this.emptyValue : value\r\n      return accounting.unformat(toUnformat, this.decimalSeparatorSymbol)\r\n    },\r\n    \r\n      \r\n\r\n  }\r\n}\r\n</script>"]}]}