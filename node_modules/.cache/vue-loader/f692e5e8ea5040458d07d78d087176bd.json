{"remainingRequest":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\divisoft\\promptDivisoft.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\src\\divisoft\\promptDivisoft.vue","mtime":1604601624758},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604601561321},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\babel-loader\\lib\\index.js","mtime":1604601556483},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1604601561321},{"path":"C:\\Users\\Renan Galvan\\Desktop\\sincronizados_git\\tavo_nov_2020\\tavo\\node_modules\\vue-loader\\lib\\index.js","mtime":1604601615297}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n// importa librerias que necesita \r\nimport { AgGridVue } from \"ag-grid-vue\";\r\nimport { mapState } from \"vuex\"; //, mapMutations, mapActions\r\nimport {eventBus} from \"@/main\";  // para que se hablen los componentes\r\nimport \"@/assets/scss/vuexy/extraComponents/agGridStyleOverride.scss\";\r\n\r\nimport * as divilib from '@/divisoftlibs/utilDivisoftJS.js'; \r\n\r\nexport default {\r\n  components: {\r\n    AgGridVue\r\n  }, \r\n   \r\n  props: {\r\n\t  datosPrompt: {  //registros del prompt \r\n\t\t\t// header Es recibido del padre\r\n\t\t\ttype: Array,\r\n      required: true\r\n      }\r\n    }, \r\n    \r\n  // antes de  inciar la pagina  cargalas  Filas que lleva que es una constante \r\n  // en  divi000X.js que es un libreria que guarda constantes y puede contener funciones de apoyo al  Documento\r\n  beforeMount() { \r\n    //DEFINE COLUMNAS DE LA TABLA\r\n     \r\n    this.columnDefs = this.datosPrompt[0].columnDefs;    \r\n  },\r\n\r\n// Cuando se monta la aplicacion\r\n  mounted() { \r\n\r\n     if (this.datosPrompt[0].datos[0].nombre==\"NA\"  )\r\n        this.datosPrompt[0].datos[0].nombre=\"NA\";\r\n      \r\n     else   \r\n     {\r\n        \r\n      this.buscaRegistros();\r\n      }  \r\n\r\n    ///this.buscaRegistros();\r\n    this.gridApi = this.gridOptions.api;\r\n    this.gridColumnApi = this.gridOptions.columnApi; \r\n  },\r\n \r\n\r\n  computed: \r\n  {\r\n    ...mapState([ \"datosJ\",  \"selectedRow\",\"rows\", \"datosGrid\",\"tableKey\",\"urlOrigen\",\r\n    \"laststrheader\",\"laststrParametros\",\"laststrFilas\"]),\r\n       \r\n    \r\n\r\n     getProfile() {\r\n      return this.$store.state.dsoaLogin.profile[0];\r\n    },\r\n\r\n    paginationPageSize() {\r\n      if (this.gridApi) return this.gridApi.paginationGetPageSize();\r\n      else return 10;\r\n    },\r\n\r\n    totalPages() {\r\n      if (this.gridApi) return this.gridApi.paginationGetTotalPages();\r\n      else return 0;\r\n    },\r\n    getTitulo() {\r\n      return this.datosPrompt[0].titulo+\" XXX\";\r\n    }, \r\n\r\n    currentPage: {\r\n      get() {\r\n        if (this.gridApi) return this.gridApi.paginationGetCurrentPage() + 1;\r\n        else return 1;\r\n      },\r\n      set(val) {\r\n        this.gridApi.paginationGoToPage(val - 1);\r\n      }\r\n    },\r\n\r\n    getDatos() {\r\n      return this.$store.getters.getRows;\r\n      //return   this.$store.state.datosJ.rows;\r\n    },\r\n \r\n    getDdatosRow: {\r\n      get() {\r\n        //return this.$store.state.datosGridPhp.rows;\r\n        return this.$store.state.datosPrompt.rows; //llena la tabla con los datos obtenidos\r\n        \r\n      },\r\n    \r\n    }, \r\n    getDdatosPages: {\r\n      get() {\r\n        return 0;\r\n      }\r\n    },\r\n   lastDbmsg () {\r\n      return this.$store.state.lastBdmsage;\r\n    },\r\n    lastDbmsgCode () {\r\n      return this.$store.state.lastBdmsgcode;\r\n    }, \r\n  },\r\n\r\n  data() {\r\n    return { \r\n      //APP\r\n       activaEdit: false, \r\n       locallastheader: \"\",  //guarda el ultimo header de este objeto\r\n       locallaststrParametros: \"\", //guarda el ultimo  parametros de este objeto\r\n       locallaststrFilas: \"\",//guarda el ultimo filas de este objeto\r\n\r\n       paramtxt:\"\",\r\n       filastxt:\"\",\r\n       header:\"\",  \r\n      \r\n      staticKey: [],\r\n      rowsForm:[],\r\n      dinamicKey: [],\r\n      titulo:'Consulta de Cantones',\r\n\r\n\r\n      origenUrl : \"J\",\r\n      dml : \"I\",\r\n\r\n      //BUSCAR\r\n      searchQuery: \"\",\r\n     \r\n      activaFiltro: false,\r\n      //DATA GRID \r\n      gridOptions: {},\r\n      maxPageNumbers: 100,\r\n      gridApi: null,\r\n      exp: null,\r\n      columnDefs: null,\r\n\r\n      defaultColDef: {\r\n        sortable: true,\r\n        resizable: true,\r\n        editable: false, //true\r\n        filter:true,\r\n        suppressMenu: false,\r\n      }, \r\n  //////////////////////////////////////\r\n     \r\n    };\r\n  },\r\n\r\n  methods: {    \r\n    //PARA EDITAR\r\n    onDoubleClicked(event) { \r\n\r\n      let rowsSelection = this.gridOptions.api.getSelectedRows();\r\n//      console.log(\"prompt row selection \",rowsSelection );\r\n        \r\n     //LLAMA AL INVOCADOR Y LE ENTREA LOS DATOS\r\n     \r\n      eventBus.$emit('datosprompt',rowsSelection[0],this.datosPrompt[0].idprompt);\r\n       this.$parent.activaPromp= false;\r\n    },\r\n\r\n    //FUNCION BUSQUEDA EN EL INPUT DE ARRIBA\r\n    updateSearchQuery(val)\r\n     {\r\n      this.gridApi.setQuickFilter(val);\r\n    },\r\n\r\n    addFilas: function()\r\n     {\r\n\r\n       var filas=[];\r\n\r\n       var fila1 = { NOMBRE: \"\",  VALOR1: \"\", VALOR2: \"\", CDATA: \"0\"};\r\n \r\n       var xmlFilas=\"\";\r\n       var contador=0; \r\n       \r\n          \r\n          this.datosPrompt[0].filas.forEach(function callback(item) { \r\n              \r\n              fila1 = { NOMBRE: item.NOMBRE,  VALOR1:\"\", VALOR2: \"\", CDATA: \"0\"};\r\n              filas.push(fila1); \r\n             contador++;\r\n              \r\n    // tu iterador\r\n         });  \r\n         \r\n         this.filastxt=divilib.filaArraytoStrintg(filas,\"N\");\r\n    },\r\n      \r\n\r\n    //TRAE DATOS PARA MOSTRAR EN TABLA INCIALMENTE\r\n     buscaRegistros : function() \r\n     {\r\n      \r\n      var origenUrl = \"O\";  \r\n      var header={ MODO: \"JJ\", \r\n      OBJECTID: this.datosPrompt[0].ObjectId, \r\n      CREDENCIAL: this.getProfile.Credencial, \r\n      USERNAME:  this.getProfile.UserName, \r\n      REGISTROSXPAGINA: \"200\", \r\n      PAGINA: \"1\", \r\n      ORDERBY: \"\"};\r\n      this.headertxt =divilib.GetHeaderString(header);  \r\n      // arma la encabezado peticion\r\n      // agrego las filas\r\n\r\n       this.addFilas();  \r\n\r\n       var parametros=[];\r\n       var parametro1 = { NOMBRE: \"\", OPERADOR: \"=\", VALOR1: \"01\", VALOR2: \"\", CDATA: \"0\"};\r\n \r\n       var xmlParametros=\"\";\r\n       var contador=0; \r\n       this.datosPrompt[0].datos.forEach(function callback(item) { \r\n\r\n       if (item.valor.length>0)\r\n              { \r\n              parametro1 = { NOMBRE: item.nombre, OPERADOR:  \"=\" , VALOR1:item.valor, VALOR2: \"\", CDATA: \"0\"};\r\n              parametros.push(parametro1); \r\n             contador++;\r\n             }\r\n         }); \r\n       //entrega arreglo de parametros recibe texto de parametros\r\n       if (contador==0)\r\n           this.paramtxt= \"<Param/>\"; \r\n       else\r\n          this.paramtxt=divilib.paramArraytoStrintg(parametros);  \r\n      // cargo la peticion texto\r\n\r\n      \r\n      console.log(\"header\",this.headertxt);\r\n      console.log(\"param\",this.paramtxt);\r\n      console.log(\"filas\",this.filastxt);\r\n      \r\n      var petTxt= {header:this.headertxt, parametros:this.paramtxt , filas:this.filastxt }; \r\n\r\n\r\n      this.$store.commit(\"MUTSETURL\", \"O\"); \r\n      this.$store.commit(\"MUTSETPETICIONTXT\",petTxt); \r\n\r\n      var pedido = {\r\n        dml: \"JJ\",\r\n\r\n        Credencial: this.getProfile.Credencial,\r\n        ObjectId:this.datosPrompt[0].ObjectId,\r\n        formatoenvio: \"N\",\r\n        formatorecibe: \"N\",\r\n        indicador: \"5\", // prompt\r\n        origenUrl: origenUrl\r\n      };\r\n      \r\n      //cambia a acDsoaPrueba // acDsoa\r\n      this.$store.dispatch(\"acDsoa\", pedido); \r\n\r\n    },\r\n   },\r\n};  // fin de Metodos \r\n",{"version":3,"sources":["promptDivisoft.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2EA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA","file":"promptDivisoft.vue","sourceRoot":"src/divisoft","sourcesContent":["<template>\r\n  <div>\r\n    <div   id=\"ag-grid-demo\">   \r\n \r\n    <div>{{ getTitulo }}</div>  \r\n      \r\n        \r\n      {{datosPrompt[0].datos}}\r\n      <!-- TABLE ACTION ROW -->\r\n      <div class=\"flex flex-wrap justify-between items-center\"> \r\n        <!-- ITEMS PER PAGE / PAGINACIÓN -->\r\n        <div class=\"mb-4 md:mb-0 mr-4 ag-grid-table-actions-left\">\r\n          <vs-dropdown vs-trigger-click class=\"cursor-pointer\">\r\n         \r\n            <div class=\"p-4 border border-solid d-theme-border-grey-light rounded-full d-theme-dark-bg cursor-pointer flex items-center justify-between font-medium\">\r\n              <span class=\"mr-2\">{{ currentPage * paginationPageSize - (paginationPageSize - 1) }} - {{ getDdatosRow.length - currentPage * paginationPageSize > 0 ? currentPage * paginationPageSize : getDdatosRow.length }} of {{ getDdatosRow.length }}</span>\r\n              <feather-icon icon=\"ChevronDownIcon\" svgClasses=\"h-4 w-4\" />\r\n            </div>  \r\n            <vs-dropdown-menu>\r\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(10)\">\r\n                <span>10</span>\r\n              </vs-dropdown-item>\r\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(20)\">\r\n                <span>20</span>\r\n              </vs-dropdown-item>\r\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(50)\">\r\n                <span>50</span>\r\n              </vs-dropdown-item>\r\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(100)\">\r\n                <span>100</span>\r\n              </vs-dropdown-item>\r\n              <vs-dropdown-item @click=\"gridApi.paginationSetPageSize(150)\">\r\n                <span>150</span>\r\n              </vs-dropdown-item>\r\n            </vs-dropdown-menu>\r\n          </vs-dropdown>\r\n        </div>\r\n\r\n        <!-- TABLE ACTION COL-2: SEARCH & EXPORT AS CSV -->\r\n        <div class=\"flex flex-wrap items-center justify-between ag-grid-table-actions-right\">\r\n          <!--BUSCAR-->\r\n          <vs-input class=\"mb-4 md:mb-0 mr-4\" v-model=\"searchQuery\"  @input=\"updateSearchQuery\" placeholder=\"Buscar...\" />\r\n          <!--EXPORTAR EXCEL-->\r\n          <vs-button class=\"mb-4 md:mb-0\" @click=\"gridApi.exportDataAsCsv()\">Exportar a Excel</vs-button>\r\n        </div>\r\n      </div>\r\n      <div style=\"height: 100%\">\r\n        <!-- rowSelection=\"multiple\" // :floatingFilter=\"true\" -->\r\n        \r\n        <!--COMPONENTE GRID-->\r\n        <ag-grid-vue\r\n          class=\"ag-theme-material w-100 my-4 ag-grid-table\"\r\n          :gridOptions=\"gridOptions\"\r\n          :columnDefs=\"columnDefs\"\r\n          :defaultColDef=\"defaultColDef\"\r\n          :rowData=\"getDdatosRow\"\r\n          rowSelection=\"single\" \r\n          colResizeDefault=\"shift\"\r\n          :animateRows=\"true\"\r\n          :floatingFilter=\"true\"\r\n          :pagination=\"true\"\r\n          :suppressDragLeaveHidesColumns=\"true\"\r\n          :paginationPageSize=\"paginationPageSize\"\r\n          :suppressPaginationPanel=\"false\"\r\n          @cellDoubleClicked=\"onDoubleClicked\">\r\n        </ag-grid-vue>\r\n      </div>\r\n      <pre></pre>\r\n    </div>\r\n      \r\n     \r\n  </div>\r\n</template>\r\n  \r\n<script>\r\n// importa librerias que necesita \r\nimport { AgGridVue } from \"ag-grid-vue\";\r\nimport { mapState } from \"vuex\"; //, mapMutations, mapActions\r\nimport {eventBus} from \"@/main\";  // para que se hablen los componentes\r\nimport \"@/assets/scss/vuexy/extraComponents/agGridStyleOverride.scss\";\r\n\r\nimport * as divilib from '@/divisoftlibs/utilDivisoftJS.js'; \r\n\r\nexport default {\r\n  components: {\r\n    AgGridVue\r\n  }, \r\n   \r\n  props: {\r\n\t  datosPrompt: {  //registros del prompt \r\n\t\t\t// header Es recibido del padre\r\n\t\t\ttype: Array,\r\n      required: true\r\n      }\r\n    }, \r\n    \r\n  // antes de  inciar la pagina  cargalas  Filas que lleva que es una constante \r\n  // en  divi000X.js que es un libreria que guarda constantes y puede contener funciones de apoyo al  Documento\r\n  beforeMount() { \r\n    //DEFINE COLUMNAS DE LA TABLA\r\n     \r\n    this.columnDefs = this.datosPrompt[0].columnDefs;    \r\n  },\r\n\r\n// Cuando se monta la aplicacion\r\n  mounted() { \r\n\r\n     if (this.datosPrompt[0].datos[0].nombre==\"NA\"  )\r\n        this.datosPrompt[0].datos[0].nombre=\"NA\";\r\n      \r\n     else   \r\n     {\r\n        \r\n      this.buscaRegistros();\r\n      }  \r\n\r\n    ///this.buscaRegistros();\r\n    this.gridApi = this.gridOptions.api;\r\n    this.gridColumnApi = this.gridOptions.columnApi; \r\n  },\r\n \r\n\r\n  computed: \r\n  {\r\n    ...mapState([ \"datosJ\",  \"selectedRow\",\"rows\", \"datosGrid\",\"tableKey\",\"urlOrigen\",\r\n    \"laststrheader\",\"laststrParametros\",\"laststrFilas\"]),\r\n       \r\n    \r\n\r\n     getProfile() {\r\n      return this.$store.state.dsoaLogin.profile[0];\r\n    },\r\n\r\n    paginationPageSize() {\r\n      if (this.gridApi) return this.gridApi.paginationGetPageSize();\r\n      else return 10;\r\n    },\r\n\r\n    totalPages() {\r\n      if (this.gridApi) return this.gridApi.paginationGetTotalPages();\r\n      else return 0;\r\n    },\r\n    getTitulo() {\r\n      return this.datosPrompt[0].titulo+\" XXX\";\r\n    }, \r\n\r\n    currentPage: {\r\n      get() {\r\n        if (this.gridApi) return this.gridApi.paginationGetCurrentPage() + 1;\r\n        else return 1;\r\n      },\r\n      set(val) {\r\n        this.gridApi.paginationGoToPage(val - 1);\r\n      }\r\n    },\r\n\r\n    getDatos() {\r\n      return this.$store.getters.getRows;\r\n      //return   this.$store.state.datosJ.rows;\r\n    },\r\n \r\n    getDdatosRow: {\r\n      get() {\r\n        //return this.$store.state.datosGridPhp.rows;\r\n        return this.$store.state.datosPrompt.rows; //llena la tabla con los datos obtenidos\r\n        \r\n      },\r\n    \r\n    }, \r\n    getDdatosPages: {\r\n      get() {\r\n        return 0;\r\n      }\r\n    },\r\n   lastDbmsg () {\r\n      return this.$store.state.lastBdmsage;\r\n    },\r\n    lastDbmsgCode () {\r\n      return this.$store.state.lastBdmsgcode;\r\n    }, \r\n  },\r\n\r\n  data() {\r\n    return { \r\n      //APP\r\n       activaEdit: false, \r\n       locallastheader: \"\",  //guarda el ultimo header de este objeto\r\n       locallaststrParametros: \"\", //guarda el ultimo  parametros de este objeto\r\n       locallaststrFilas: \"\",//guarda el ultimo filas de este objeto\r\n\r\n       paramtxt:\"\",\r\n       filastxt:\"\",\r\n       header:\"\",  \r\n      \r\n      staticKey: [],\r\n      rowsForm:[],\r\n      dinamicKey: [],\r\n      titulo:'Consulta de Cantones',\r\n\r\n\r\n      origenUrl : \"J\",\r\n      dml : \"I\",\r\n\r\n      //BUSCAR\r\n      searchQuery: \"\",\r\n     \r\n      activaFiltro: false,\r\n      //DATA GRID \r\n      gridOptions: {},\r\n      maxPageNumbers: 100,\r\n      gridApi: null,\r\n      exp: null,\r\n      columnDefs: null,\r\n\r\n      defaultColDef: {\r\n        sortable: true,\r\n        resizable: true,\r\n        editable: false, //true\r\n        filter:true,\r\n        suppressMenu: false,\r\n      }, \r\n  //////////////////////////////////////\r\n     \r\n    };\r\n  },\r\n\r\n  methods: {    \r\n    //PARA EDITAR\r\n    onDoubleClicked(event) { \r\n\r\n      let rowsSelection = this.gridOptions.api.getSelectedRows();\r\n//      console.log(\"prompt row selection \",rowsSelection );\r\n        \r\n     //LLAMA AL INVOCADOR Y LE ENTREA LOS DATOS\r\n     \r\n      eventBus.$emit('datosprompt',rowsSelection[0],this.datosPrompt[0].idprompt);\r\n       this.$parent.activaPromp= false;\r\n    },\r\n\r\n    //FUNCION BUSQUEDA EN EL INPUT DE ARRIBA\r\n    updateSearchQuery(val)\r\n     {\r\n      this.gridApi.setQuickFilter(val);\r\n    },\r\n\r\n    addFilas: function()\r\n     {\r\n\r\n       var filas=[];\r\n\r\n       var fila1 = { NOMBRE: \"\",  VALOR1: \"\", VALOR2: \"\", CDATA: \"0\"};\r\n \r\n       var xmlFilas=\"\";\r\n       var contador=0; \r\n       \r\n          \r\n          this.datosPrompt[0].filas.forEach(function callback(item) { \r\n              \r\n              fila1 = { NOMBRE: item.NOMBRE,  VALOR1:\"\", VALOR2: \"\", CDATA: \"0\"};\r\n              filas.push(fila1); \r\n             contador++;\r\n              \r\n    // tu iterador\r\n         });  \r\n         \r\n         this.filastxt=divilib.filaArraytoStrintg(filas,\"N\");\r\n    },\r\n      \r\n\r\n    //TRAE DATOS PARA MOSTRAR EN TABLA INCIALMENTE\r\n     buscaRegistros : function() \r\n     {\r\n      \r\n      var origenUrl = \"O\";  \r\n      var header={ MODO: \"JJ\", \r\n      OBJECTID: this.datosPrompt[0].ObjectId, \r\n      CREDENCIAL: this.getProfile.Credencial, \r\n      USERNAME:  this.getProfile.UserName, \r\n      REGISTROSXPAGINA: \"200\", \r\n      PAGINA: \"1\", \r\n      ORDERBY: \"\"};\r\n      this.headertxt =divilib.GetHeaderString(header);  \r\n      // arma la encabezado peticion\r\n      // agrego las filas\r\n\r\n       this.addFilas();  \r\n\r\n       var parametros=[];\r\n       var parametro1 = { NOMBRE: \"\", OPERADOR: \"=\", VALOR1: \"01\", VALOR2: \"\", CDATA: \"0\"};\r\n \r\n       var xmlParametros=\"\";\r\n       var contador=0; \r\n       this.datosPrompt[0].datos.forEach(function callback(item) { \r\n\r\n       if (item.valor.length>0)\r\n              { \r\n              parametro1 = { NOMBRE: item.nombre, OPERADOR:  \"=\" , VALOR1:item.valor, VALOR2: \"\", CDATA: \"0\"};\r\n              parametros.push(parametro1); \r\n             contador++;\r\n             }\r\n         }); \r\n       //entrega arreglo de parametros recibe texto de parametros\r\n       if (contador==0)\r\n           this.paramtxt= \"<Param/>\"; \r\n       else\r\n          this.paramtxt=divilib.paramArraytoStrintg(parametros);  \r\n      // cargo la peticion texto\r\n\r\n      \r\n      console.log(\"header\",this.headertxt);\r\n      console.log(\"param\",this.paramtxt);\r\n      console.log(\"filas\",this.filastxt);\r\n      \r\n      var petTxt= {header:this.headertxt, parametros:this.paramtxt , filas:this.filastxt }; \r\n\r\n\r\n      this.$store.commit(\"MUTSETURL\", \"O\"); \r\n      this.$store.commit(\"MUTSETPETICIONTXT\",petTxt); \r\n\r\n      var pedido = {\r\n        dml: \"JJ\",\r\n\r\n        Credencial: this.getProfile.Credencial,\r\n        ObjectId:this.datosPrompt[0].ObjectId,\r\n        formatoenvio: \"N\",\r\n        formatorecibe: \"N\",\r\n        indicador: \"5\", // prompt\r\n        origenUrl: origenUrl\r\n      };\r\n      \r\n      //cambia a acDsoaPrueba // acDsoa\r\n      this.$store.dispatch(\"acDsoa\", pedido); \r\n\r\n    },\r\n   },\r\n};  // fin de Metodos \r\n</script>\r\n  \r\n\t\t"]}]}